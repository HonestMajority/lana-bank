diff --git a/apps/admin-panel/app/credit-facilities/[credit-facility-id]/layout.tsx b/apps/admin-panel/app/credit-facilities/[credit-facility-id]/layout.tsx
index 3c8f314192c7e79687ed032764cc940a4914546b..a4bba6d266352615da0b2f9a10aafd532e246cc2 100644
--- a/apps/admin-panel/app/credit-facilities/[credit-facility-id]/layout.tsx
+++ b/apps/admin-panel/app/credit-facilities/[credit-facility-id]/layout.tsx
@@ -82,50 +82,51 @@ gql`
           value
         }
         ... on InfiniteCVLPct {
           isInfinite
         }
       }
       marginCallCvl {
         __typename
         ... on FiniteCVLPct {
           value
         }
         ... on InfiniteCVLPct {
           isInfinite
         }
       }
       initialCvl {
         __typename
         ... on FiniteCVLPct {
           value
         }
         ... on InfiniteCVLPct {
           isInfinite
         }
       }
       oneTimeFeeRate
+      disburseAllAtActivation
       duration {
         period
         units
       }
     }
     repaymentPlan {
       repaymentType
       status
       initial
       outstanding
       accrualAt
       dueAt
     }
     customer {
       customerId
       publicId
       customerType
       email
     }
     wallet {
       id
       walletId
       address
       network
       custodian {
diff --git a/apps/admin-panel/app/credit-facilities/[credit-facility-id]/terms-dialog.tsx b/apps/admin-panel/app/credit-facilities/[credit-facility-id]/terms-dialog.tsx
index 4d757330d92935d23b8ca8f7cdf186911ebfa4c9..a55b49a27da27bb8404bef2d665b1a39ad64db83 100644
--- a/apps/admin-panel/app/credit-facilities/[credit-facility-id]/terms-dialog.tsx
+++ b/apps/admin-panel/app/credit-facilities/[credit-facility-id]/terms-dialog.tsx
@@ -42,41 +42,47 @@ export const CreditFacilityTermsDialog: React.FC<CreditFacilityTermsDialogProps>
     },
     {
       label: t("details.interestRate"),
       value: `${creditFacility.creditFacilityTerms.annualRate}%`,
     },
     {
       label: t("details.targetCvl"),
       value: `${formatCvl(creditFacility.creditFacilityTerms.initialCvl)}`,
     },
     {
       label: t("details.marginCallCvl"),
       value: `${formatCvl(creditFacility.creditFacilityTerms.marginCallCvl)}`,
     },
     {
       label: t("details.liquidationCvl"),
       value: `${formatCvl(creditFacility.creditFacilityTerms.liquidationCvl)}`,
     },
     {
       label: t("details.dateCreated"),
       value: formatDate(creditFacility.activatedAt),
     },
     {
       label: t("details.structuringFeeRate"),
       value: `${creditFacility.creditFacilityTerms.oneTimeFeeRate}%`,
     },
+    {
+      label: t("details.disburseAllAtActivation"),
+      value: creditFacility.creditFacilityTerms.disburseAllAtActivation
+        ? t("details.enabled")
+        : t("details.disabled"),
+    },
     { label: t("details.effectiveRate"), value: `${effectiveRate}%` },
   ]
 
   return (
     <Dialog open={openTermsDialog} onOpenChange={setOpenTermsDialog}>
       <DialogContent>
         <DialogHeader>
           <DialogTitle>{t("title")}</DialogTitle>
         </DialogHeader>
         <div className="py-2">
           <DetailsCard columns={2} variant="container" details={details} />
         </div>
       </DialogContent>
     </Dialog>
   )
 }
diff --git a/apps/admin-panel/app/credit-facility-proposals/[credit-facility-proposal-id]/layout.tsx b/apps/admin-panel/app/credit-facility-proposals/[credit-facility-proposal-id]/layout.tsx
index f13e26b4bd4afeb0651035b9410737d63cc2c40f..1f93a9957e20218d5bba3b1220d68b96772d5376 100644
--- a/apps/admin-panel/app/credit-facility-proposals/[credit-facility-proposal-id]/layout.tsx
+++ b/apps/admin-panel/app/credit-facility-proposals/[credit-facility-proposal-id]/layout.tsx
@@ -14,50 +14,51 @@ import { DetailsPageSkeleton } from "@/components/details-page-skeleton"
 import { useGetCreditFacilityProposalLayoutDetailsQuery } from "@/lib/graphql/generated"
 
 gql`
   fragment CreditFacilityProposalLayoutFragment on CreditFacilityProposal {
     id
     creditFacilityProposalId
     approvalProcessId
     createdAt
     status
     facilityAmount
     collateralizationState
     collateral {
       btcBalance
     }
     customer {
       customerId
       customerType
       publicId
       email
     }
     creditFacilityTerms {
       annualRate
       accrualInterval
       accrualCycleInterval
       oneTimeFeeRate
+      disburseAllAtActivation
       duration {
         period
         units
       }
       liquidationCvl {
         __typename
         ... on FiniteCVLPct {
           value
         }
         ... on InfiniteCVLPct {
           isInfinite
         }
       }
       marginCallCvl {
         __typename
         ... on FiniteCVLPct {
           value
         }
         ... on InfiniteCVLPct {
           isInfinite
         }
       }
       initialCvl {
         __typename
         ... on FiniteCVLPct {
diff --git a/apps/admin-panel/app/terms-templates/[terms-template-id]/details.tsx b/apps/admin-panel/app/terms-templates/[terms-template-id]/details.tsx
index 112344b30334bd770b0f2f119656898c0e182086..aba705c89977556f11647af284e0d4c47629df8e 100644
--- a/apps/admin-panel/app/terms-templates/[terms-template-id]/details.tsx
+++ b/apps/admin-panel/app/terms-templates/[terms-template-id]/details.tsx
@@ -38,50 +38,56 @@ const TermsTemplateDetailsCard: React.FC<TermsTemplateDetailsProps> = ({
           {termsTemplate.values.duration.units}{" "}
           <PeriodLabel period={termsTemplate.values.duration.period} />
         </>
       ),
     },
     {
       label: t("fields.annualRate"),
       value: `${termsTemplate.values.annualRate}%`,
     },
     {
       label: t("fields.initialCvl"),
       value: formatCvl(termsTemplate.values.initialCvl),
     },
     {
       label: t("fields.marginCallCvl"),
       value: formatCvl(termsTemplate.values.marginCallCvl),
     },
     {
       label: t("fields.liquidationCvl"),
       value: formatCvl(termsTemplate.values.liquidationCvl),
     },
     {
       label: t("fields.oneTimeFeeRate"),
       value: `${termsTemplate.values.oneTimeFeeRate}%`,
     },
+    {
+      label: t("fields.disburseAllAtActivation"),
+      value: termsTemplate.values.disburseAllAtActivation
+        ? t("values.disburseAllAtActivation.enabled")
+        : t("values.disburseAllAtActivation.disabled"),
+    },
   ]
 
   const footerContent = (
     <div className="flex gap-2">
       <Button
         variant="outline"
         onClick={() => setOpenCreateTermsTemplateDialog(true)}
         data-testid="terms-template-duplicate-button"
       >
         <Copy className="h-4 w-4 mr-2" />
         {t("buttons.duplicate")}
       </Button>
       <Button
         variant="outline"
         onClick={() => setOpenUpdateTermsTemplateDialog(true)}
         data-testid="terms-template-update-button"
       >
         {t("buttons.update")}
       </Button>
     </div>
   )
 
   return (
     <>
       <UpdateTermsTemplateDialog
diff --git a/apps/admin-panel/app/terms-templates/[terms-template-id]/update.tsx b/apps/admin-panel/app/terms-templates/[terms-template-id]/update.tsx
index e4bc4b1a4a87c44c7bb6718330289cd94d4f2b11..32bbbc4f1ea2212f03ab02cbc7df1099a7609f1b 100644
--- a/apps/admin-panel/app/terms-templates/[terms-template-id]/update.tsx
+++ b/apps/admin-panel/app/terms-templates/[terms-template-id]/update.tsx
@@ -1,175 +1,188 @@
 "use client"
 
 import { useTranslations } from "next-intl"
 import React, { useState, useEffect } from "react"
 import { gql } from "@apollo/client"
 import { toast } from "sonner"
 
 import {
   Dialog,
   DialogContent,
   DialogDescription,
   DialogFooter,
   DialogHeader,
   DialogTitle,
 } from "@lana/web/ui/dialog"
 
 import { Input } from "@lana/web/ui/input"
 import { Button } from "@lana/web/ui/button"
 import { Label } from "@lana/web/ui/label"
+import { Checkbox } from "@lana/web/ui/check-box"
 
 import {
   useUpdateTermsTemplateMutation,
   TermsTemplateFieldsFragment,
 } from "@/lib/graphql/generated"
 import { DEFAULT_TERMS } from "@/lib/constants/terms"
 import { getCvlValue } from "@/lib/utils"
 
 gql`
   mutation UpdateTermsTemplate($input: TermsTemplateUpdateInput!) {
     termsTemplateUpdate(input: $input) {
       termsTemplate {
         ...TermsTemplateFields
       }
     }
   }
 `
 
 type UpdateTermsTemplateDialogProps = {
   setOpenUpdateTermsTemplateDialog: (isOpen: boolean) => void
   openUpdateTermsTemplateDialog: boolean
   termsTemplate: TermsTemplateFieldsFragment
 }
 
 export const UpdateTermsTemplateDialog: React.FC<UpdateTermsTemplateDialogProps> = ({
   setOpenUpdateTermsTemplateDialog,
   openUpdateTermsTemplateDialog,
   termsTemplate,
 }) => {
   const t = useTranslations("TermsTemplates.TermsTemplateDetails.UpdateTermsTemplate")
 
   const [updateTermsTemplate, { loading, error: updateTermsTemplateError }] =
     useUpdateTermsTemplateMutation()
 
   const [formValues, setFormValues] = useState({
     name: termsTemplate.name,
     annualRate: termsTemplate.values.annualRate.toString(),
     durationUnits: termsTemplate.values.duration.units.toString(),
     liquidationCvl: termsTemplate.values.liquidationCvl.toString(),
     marginCallCvl: termsTemplate.values.marginCallCvl.toString(),
     initialCvl: termsTemplate.values.initialCvl.toString(),
     oneTimeFeeRate: termsTemplate.values.oneTimeFeeRate.toString(),
+    disburseAllAtActivation: termsTemplate.values.disburseAllAtActivation,
   })
 
   const [error, setError] = useState<string | null>(null)
 
   useEffect(() => {
     if (openUpdateTermsTemplateDialog) {
       setFormValues({
         name: termsTemplate.name,
         annualRate: termsTemplate.values.annualRate.toString(),
         durationUnits: termsTemplate.values.duration.units.toString(),
         liquidationCvl: getCvlValue(termsTemplate.values.liquidationCvl).toString(),
         marginCallCvl: getCvlValue(termsTemplate.values.marginCallCvl).toString(),
         initialCvl: getCvlValue(termsTemplate.values.initialCvl).toString(),
         oneTimeFeeRate: termsTemplate.values.oneTimeFeeRate.toString(),
+        disburseAllAtActivation:
+          termsTemplate.values.disburseAllAtActivation,
       })
     }
   }, [openUpdateTermsTemplateDialog, termsTemplate])
 
   const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
     const { name, value } = e.target
     setFormValues((prevValues) => ({
       ...prevValues,
       [name]: value,
     }))
   }
 
+  const handleCheckboxChange = (checked: boolean) => {
+    setFormValues((prevValues) => ({
+      ...prevValues,
+      disburseAllAtActivation: checked,
+    }))
+  }
+
   const handleSubmit = async (e: React.FormEvent) => {
     e.preventDefault()
     setError(null)
 
     try {
       const { data } = await updateTermsTemplate({
         variables: {
           input: {
             id: termsTemplate.termsId,
             annualRate: formValues.annualRate,
             accrualCycleInterval: DEFAULT_TERMS.ACCRUAL_CYCLE_INTERVAL,
             accrualInterval: DEFAULT_TERMS.ACCRUAL_INTERVAL,
             duration: {
               period: DEFAULT_TERMS.DURATION_PERIOD,
               units: parseInt(formValues.durationUnits),
             },
             interestDueDurationFromAccrual: {
               period: DEFAULT_TERMS.INTEREST_DUE_DURATION_FROM_ACCRUAL.PERIOD,
               units: DEFAULT_TERMS.INTEREST_DUE_DURATION_FROM_ACCRUAL.UNITS,
             },
             obligationOverdueDurationFromDue: {
               period: DEFAULT_TERMS.OBLIGATION_OVERDUE_DURATION_FROM_DUE.PERIOD,
               units: DEFAULT_TERMS.OBLIGATION_OVERDUE_DURATION_FROM_DUE.UNITS,
             },
             obligationLiquidationDurationFromDue: {
               period: DEFAULT_TERMS.OBLIGATION_LIQUIDATION_DURATION_FROM_DUE.PERIOD,
               units: DEFAULT_TERMS.OBLIGATION_LIQUIDATION_DURATION_FROM_DUE.UNITS,
             },
             liquidationCvl: formValues.liquidationCvl,
             marginCallCvl: formValues.marginCallCvl,
             initialCvl: formValues.initialCvl,
             oneTimeFeeRate: formValues.oneTimeFeeRate,
+            disburseAllAtActivation: formValues.disburseAllAtActivation,
           },
         },
       })
       if (data?.termsTemplateUpdate.termsTemplate) {
         toast.success(t("success.updated"))
         setOpenUpdateTermsTemplateDialog(false)
       } else {
         throw new Error(t("errors.updateFailed"))
       }
     } catch (err) {
       console.error("Error updating Terms Template:", err)
       if (err instanceof Error) {
         setError(err.message)
       } else if (updateTermsTemplateError?.message) {
         setError(updateTermsTemplateError.message)
       } else {
         setError(t("errors.general"))
       }
       toast.error(t("errors.updateFailed"))
     }
   }
 
   const resetForm = () => {
     setFormValues({
       name: termsTemplate.name,
       annualRate: termsTemplate.values.annualRate.toString(),
       durationUnits: termsTemplate.values.duration.units.toString(),
       liquidationCvl: termsTemplate.values.liquidationCvl.toString(),
       marginCallCvl: termsTemplate.values.marginCallCvl.toString(),
       initialCvl: termsTemplate.values.initialCvl.toString(),
       oneTimeFeeRate: termsTemplate.values.oneTimeFeeRate.toString(),
+      disburseAllAtActivation: termsTemplate.values.disburseAllAtActivation,
     })
     setError(null)
   }
 
   return (
     <Dialog
       open={openUpdateTermsTemplateDialog}
       onOpenChange={(isOpen) => {
         setOpenUpdateTermsTemplateDialog(isOpen)
         if (!isOpen) {
           resetForm()
         }
       }}
     >
       <DialogContent className="max-w-[38rem]">
         <DialogHeader>
           <DialogTitle>{t("title", { name: formValues.name })}</DialogTitle>
           <DialogDescription>{t("description")}</DialogDescription>
         </DialogHeader>
         <form className="flex flex-col gap-4" onSubmit={handleSubmit}>
           <div className="grid auto-rows-fr sm:grid-cols-2 gap-4">
             <div className="space-y-4">
               <div>
                 <Label htmlFor="annualRate">{t("fields.annualRate")}</Label>
                 <Input
@@ -190,50 +203,61 @@ export const UpdateTermsTemplateDialog: React.FC<UpdateTermsTemplateDialogProps>
                     type="number"
                     name="durationUnits"
                     value={formValues.durationUnits}
                     onChange={handleChange}
                     placeholder={t("placeholders.durationUnits")}
                     min={0}
                     required
                   />
                   <div className="p-1.5 bg-input-text rounded-md px-4">
                     {t("fields.months")}
                   </div>
                 </div>
               </div>
               <div>
                 <Label htmlFor="oneTimeFeeRate">{t("fields.oneTimeFeeRate")}</Label>
                 <Input
                   id="oneTimeFeeRate"
                   name="oneTimeFeeRate"
                   type="number"
                   required
                   placeholder={t("placeholders.oneTimeFeeRate")}
                   value={formValues.oneTimeFeeRate}
                   onChange={handleChange}
                 />
               </div>
+              <div className="flex items-center space-x-2">
+                <Checkbox
+                  id="disburseAllAtActivation"
+                  checked={formValues.disburseAllAtActivation}
+                  onCheckedChange={handleCheckboxChange}
+                  data-testid="terms-template-update-disburse-all-checkbox"
+                />
+                <Label htmlFor="disburseAllAtActivation">
+                  {t("fields.disburseAllAtActivation")}
+                </Label>
+              </div>
             </div>
             <div className="space-y-4">
               <div>
                 <Label htmlFor="initialCvl">{t("fields.initialCvl")}</Label>
                 <Input
                   id="initialCvl"
                   name="initialCvl"
                   type="number"
                   required
                   placeholder={t("placeholders.initialCvl")}
                   value={formValues.initialCvl}
                   onChange={handleChange}
                 />
               </div>
               <div>
                 <Label htmlFor="marginCallCvl">{t("fields.marginCallCvl")}</Label>
                 <Input
                   id="marginCallCvl"
                   name="marginCallCvl"
                   type="number"
                   required
                   placeholder={t("placeholders.marginCallCvl")}
                   value={formValues.marginCallCvl}
                   onChange={handleChange}
                 />
diff --git a/apps/admin-panel/app/terms-templates/create.tsx b/apps/admin-panel/app/terms-templates/create.tsx
index a9f90a5ab9ded919dfc7bd4d6a17f65df9c7f1cc..b8c38ce5e7a972cf1f47d0f737c0761f9cc16778 100644
--- a/apps/admin-panel/app/terms-templates/create.tsx
+++ b/apps/admin-panel/app/terms-templates/create.tsx
@@ -1,44 +1,45 @@
 "use client"
 
 import { useTranslations } from "next-intl"
 import React, { useState, useEffect } from "react"
 import { gql } from "@apollo/client"
 import { toast } from "sonner"
 
 import {
   Dialog,
   DialogContent,
   DialogDescription,
   DialogFooter,
   DialogHeader,
   DialogTitle,
 } from "@lana/web/ui/dialog"
 
 import { Input } from "@lana/web/ui/input"
 import { Button } from "@lana/web/ui/button"
 import { Label } from "@lana/web/ui/label"
+import { Checkbox } from "@lana/web/ui/check-box"
 
 import {
   useCreateTermsTemplateMutation,
   TermsTemplateFieldsFragment,
 } from "@/lib/graphql/generated"
 import { DEFAULT_TERMS } from "@/lib/constants/terms"
 import { useModalNavigation } from "@/hooks/use-modal-navigation"
 import { getCvlValue } from "@/lib/utils"
 
 gql`
   mutation CreateTermsTemplate($input: TermsTemplateCreateInput!) {
     termsTemplateCreate(input: $input) {
       termsTemplate {
         ...TermsTemplateFields
       }
     }
   }
 `
 
 type CreateTermsTemplateDialogProps = {
   setOpenCreateTermsTemplateDialog: (isOpen: boolean) => void
   openCreateTermsTemplateDialog: boolean
   templateToDuplicate?: TermsTemplateFieldsFragment | null
 }
 
@@ -55,136 +56,148 @@ export const CreateTermsTemplateDialog: React.FC<CreateTermsTemplateDialogProps>
     },
   })
 
   const [createTermsTemplate, { loading, error: createTermsTemplateError }] =
     useCreateTermsTemplateMutation({
       update: (cache) => {
         cache.modify({
           fields: {
             termsTemplates: (_, { DELETE }) => DELETE,
           },
         })
         cache.gc()
       },
     })
 
   const isLoading = loading || isNavigating
 
   const [formValues, setFormValues] = useState({
     name: "",
     annualRate: "",
     liquidationCvl: "",
     marginCallCvl: "",
     initialCvl: "",
     durationUnits: "",
     oneTimeFeeRate: "",
+    disburseAllAtActivation: false,
   })
   const [error, setError] = useState<string | null>(null)
 
   useEffect(() => {
     if (templateToDuplicate && openCreateTermsTemplateDialog) {
       setFormValues({
         name: `${templateToDuplicate.name} (Copy)`,
         annualRate: templateToDuplicate.values.annualRate.toString(),
         liquidationCvl: getCvlValue(templateToDuplicate.values.liquidationCvl).toString(),
         marginCallCvl: getCvlValue(templateToDuplicate.values.marginCallCvl).toString(),
         initialCvl: getCvlValue(templateToDuplicate.values.initialCvl).toString(),
         durationUnits: templateToDuplicate.values.duration.units.toString(),
         oneTimeFeeRate: templateToDuplicate.values.oneTimeFeeRate.toString(),
+        disburseAllAtActivation:
+          templateToDuplicate.values.disburseAllAtActivation,
       })
     }
   }, [templateToDuplicate, openCreateTermsTemplateDialog])
 
   const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
     const { name, value } = e.target
     setFormValues((prevValues) => ({
       ...prevValues,
       [name]: value,
     }))
   }
 
+  const handleCheckboxChange = (checked: boolean) => {
+    setFormValues((prevValues) => ({
+      ...prevValues,
+      disburseAllAtActivation: checked,
+    }))
+  }
+
   const handleSubmit = async (e: React.FormEvent) => {
     e.preventDefault()
     setError(null)
 
     try {
       await createTermsTemplate({
         variables: {
           input: {
             name: formValues.name,
             annualRate: formValues.annualRate,
             accrualCycleInterval: DEFAULT_TERMS.ACCRUAL_CYCLE_INTERVAL,
             accrualInterval: DEFAULT_TERMS.ACCRUAL_INTERVAL,
             duration: {
               period: DEFAULT_TERMS.DURATION_PERIOD,
               units: parseInt(formValues.durationUnits),
             },
             interestDueDurationFromAccrual: {
               period: DEFAULT_TERMS.INTEREST_DUE_DURATION_FROM_ACCRUAL.PERIOD,
               units: DEFAULT_TERMS.INTEREST_DUE_DURATION_FROM_ACCRUAL.UNITS,
             },
             obligationOverdueDurationFromDue: {
               period: DEFAULT_TERMS.OBLIGATION_OVERDUE_DURATION_FROM_DUE.PERIOD,
               units: DEFAULT_TERMS.OBLIGATION_OVERDUE_DURATION_FROM_DUE.UNITS,
             },
             obligationLiquidationDurationFromDue: {
               period: DEFAULT_TERMS.OBLIGATION_LIQUIDATION_DURATION_FROM_DUE.PERIOD,
               units: DEFAULT_TERMS.OBLIGATION_LIQUIDATION_DURATION_FROM_DUE.UNITS,
             },
             liquidationCvl: formValues.liquidationCvl,
             marginCallCvl: formValues.marginCallCvl,
             initialCvl: formValues.initialCvl,
             oneTimeFeeRate: formValues.oneTimeFeeRate,
+            disburseAllAtActivation: formValues.disburseAllAtActivation,
           },
         },
         onCompleted: (data) => {
           toast.success(t("success.created"))
           navigate(`/terms-templates/${data.termsTemplateCreate.termsTemplate.termsId}`)
         },
       })
     } catch (error) {
       console.error("Error creating Terms Template:", error)
       if (error instanceof Error) {
         setError(error.message)
       } else if (createTermsTemplateError?.message) {
         setError(createTermsTemplateError.message)
       } else {
         setError(t("errors.general"))
       }
       toast.error(t("errors.creationFailed"))
     }
   }
 
   const resetForm = () => {
     setFormValues({
       name: "",
       annualRate: "",
       liquidationCvl: "",
       marginCallCvl: "",
       initialCvl: "",
       durationUnits: "",
       oneTimeFeeRate: "",
+      disburseAllAtActivation: false,
     })
     setError(null)
   }
 
   return (
     <Dialog
       open={openCreateTermsTemplateDialog}
       onOpenChange={(isOpen) => {
         setOpenCreateTermsTemplateDialog(isOpen)
         if (!isOpen) {
           resetForm()
         }
       }}
     >
       <DialogContent className="max-w-[38rem]">
         <DialogHeader>
           <DialogTitle>
             {templateToDuplicate
               ? t("titleDuplicate", { name: templateToDuplicate.name })
               : t("title")}
           </DialogTitle>
           <DialogDescription>
             {templateToDuplicate ? t("descriptionDuplicate") : t("description")}
           </DialogDescription>
         </DialogHeader>
@@ -230,50 +243,62 @@ export const CreateTermsTemplateDialog: React.FC<CreateTermsTemplateDialogProps>
                     placeholder={t("placeholders.durationUnits")}
                     min={0}
                     required
                     disabled={isLoading}
                     data-testid="terms-template-duration-units-input"
                   />
                   <div className="p-1.5 bg-input-text rounded-md px-4">
                     {t("fields.months")}
                   </div>
                 </div>
               </div>
               <div>
                 <Label htmlFor="oneTimeFeeRate">{t("fields.oneTimeFeeRate")}</Label>
                 <Input
                   id="oneTimeFeeRate"
                   name="oneTimeFeeRate"
                   type="number"
                   required
                   placeholder={t("placeholders.oneTimeFeeRate")}
                   value={formValues.oneTimeFeeRate}
                   onChange={handleChange}
                   disabled={isLoading}
                   data-testid="terms-template-one-time-fee-rate-input"
                 />
               </div>
+              <div className="flex items-center space-x-2">
+                <Checkbox
+                  id="disburseAllAtActivation"
+                  checked={formValues.disburseAllAtActivation}
+                  onCheckedChange={handleCheckboxChange}
+                  disabled={isLoading}
+                  data-testid="terms-template-disburse-all-checkbox"
+                />
+                <Label htmlFor="disburseAllAtActivation">
+                  {t("fields.disburseAllAtActivation")}
+                </Label>
+              </div>
             </div>
             <div className="space-y-4">
               <div>
                 <Label htmlFor="initialCvl">{t("fields.initialCvl")}</Label>
                 <Input
                   id="initialCvl"
                   name="initialCvl"
                   type="number"
                   required
                   placeholder={t("placeholders.initialCvl")}
                   value={formValues.initialCvl}
                   onChange={handleChange}
                   disabled={isLoading}
                   data-testid="terms-template-initial-cvl-input"
                 />
               </div>
               <div>
                 <Label htmlFor="marginCallCvl">{t("fields.marginCallCvl")}</Label>
                 <Input
                   id="marginCallCvl"
                   name="marginCallCvl"
                   type="number"
                   required
                   placeholder={t("placeholders.marginCallCvl")}
                   value={formValues.marginCallCvl}
diff --git a/apps/admin-panel/app/terms-templates/page.tsx b/apps/admin-panel/app/terms-templates/page.tsx
index b35bb6369a1c6ab52afcf3321b6f00b1d06c2a81..d849c0775dc60937fd74b5c86c9726e3211d2c1c 100644
--- a/apps/admin-panel/app/terms-templates/page.tsx
+++ b/apps/admin-panel/app/terms-templates/page.tsx
@@ -38,50 +38,51 @@ gql`
           value
         }
         ... on InfiniteCVLPct {
           isInfinite
         }
       }
       marginCallCvl {
         __typename
         ... on FiniteCVLPct {
           value
         }
         ... on InfiniteCVLPct {
           isInfinite
         }
       }
       initialCvl {
         __typename
         ... on FiniteCVLPct {
           value
         }
         ... on InfiniteCVLPct {
           isInfinite
         }
       }
       oneTimeFeeRate
+      disburseAllAtActivation
       duration {
         period
         units
       }
     }
   }
 
   query TermsTemplates {
     termsTemplates {
       ...TermsTemplateFields
     }
   }
 `
 
 const columns = (
   t: ReturnType<typeof useTranslations>,
 ): Column<NonNullable<TermsTemplatesQuery["termsTemplates"]>[number]>[] => [
   {
     key: "name",
     header: t("table.headers.name"),
   },
   {
     key: "values",
     header: t("table.headers.duration"),
     render: (values) => (
diff --git a/apps/admin-panel/lib/graphql/generated/index.ts b/apps/admin-panel/lib/graphql/generated/index.ts
index 2d685e59ea6505046d42d15212902cb2cbeddadf..d6b54eb36a215e18480cb4c624a2c6cd379af2f0 100644
--- a/apps/admin-panel/lib/graphql/generated/index.ts
+++ b/apps/admin-panel/lib/graphql/generated/index.ts
@@ -2462,109 +2462,113 @@ export type SumsubPermalinkCreateInput = {
 export type SumsubPermalinkCreatePayload = {
   __typename?: 'SumsubPermalinkCreatePayload';
   url: Scalars['String']['output'];
 };
 
 export type System = {
   __typename?: 'System';
   name: Scalars['String']['output'];
 };
 
 export type SystemApproval = {
   __typename?: 'SystemApproval';
   autoApprove: Scalars['Boolean']['output'];
 };
 
 export type TermValues = {
   __typename?: 'TermValues';
   accrualCycleInterval: InterestInterval;
   accrualInterval: InterestInterval;
   annualRate: Scalars['AnnualRatePct']['output'];
   duration: Duration;
   initialCvl: Cvlpct;
   liquidationCvl: Cvlpct;
   marginCallCvl: Cvlpct;
   oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['output'];
+  disburseAllAtActivation: Scalars['Boolean']['output'];
 };
 
 export type TermsInput = {
   accrualCycleInterval: InterestInterval;
   accrualInterval: InterestInterval;
   annualRate: Scalars['AnnualRatePct']['input'];
   duration: DurationInput;
   initialCvl: Scalars['CVLPctValue']['input'];
   interestDueDurationFromAccrual: DurationInput;
   liquidationCvl: Scalars['CVLPctValue']['input'];
   marginCallCvl: Scalars['CVLPctValue']['input'];
   obligationLiquidationDurationFromDue: DurationInput;
   obligationOverdueDurationFromDue: DurationInput;
   oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['input'];
+  disburseAllAtActivation: Scalars['Boolean']['input'];
 };
 
 export type TermsTemplate = {
   __typename?: 'TermsTemplate';
   createdAt: Scalars['Timestamp']['output'];
   id: Scalars['ID']['output'];
   name: Scalars['String']['output'];
   termsId: Scalars['UUID']['output'];
   userCanUpdateTermsTemplate: Scalars['Boolean']['output'];
   values: TermValues;
 };
 
 export type TermsTemplateCreateInput = {
   accrualCycleInterval: InterestInterval;
   accrualInterval: InterestInterval;
   annualRate: Scalars['AnnualRatePct']['input'];
   duration: DurationInput;
   initialCvl: Scalars['CVLPctValue']['input'];
   interestDueDurationFromAccrual: DurationInput;
   liquidationCvl: Scalars['CVLPctValue']['input'];
   marginCallCvl: Scalars['CVLPctValue']['input'];
   name: Scalars['String']['input'];
   obligationLiquidationDurationFromDue: DurationInput;
   obligationOverdueDurationFromDue: DurationInput;
   oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['input'];
+  disburseAllAtActivation: Scalars['Boolean']['input'];
 };
 
 export type TermsTemplateCreatePayload = {
   __typename?: 'TermsTemplateCreatePayload';
   termsTemplate: TermsTemplate;
 };
 
 export type TermsTemplateUpdateInput = {
   accrualCycleInterval: InterestInterval;
   accrualInterval: InterestInterval;
   annualRate: Scalars['AnnualRatePct']['input'];
   duration: DurationInput;
   id: Scalars['UUID']['input'];
   initialCvl: Scalars['CVLPctValue']['input'];
   interestDueDurationFromAccrual: DurationInput;
   liquidationCvl: Scalars['CVLPctValue']['input'];
   marginCallCvl: Scalars['CVLPctValue']['input'];
   obligationLiquidationDurationFromDue: DurationInput;
   obligationOverdueDurationFromDue: DurationInput;
   oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['input'];
+  disburseAllAtActivation: Scalars['Boolean']['input'];
 };
 
 export type TermsTemplateUpdatePayload = {
   __typename?: 'TermsTemplateUpdatePayload';
   termsTemplate: TermsTemplate;
 };
 
 export type Total = {
   __typename?: 'Total';
   usdBalance: Scalars['UsdCents']['output'];
 };
 
 export type Transaction = Deposit | Withdrawal;
 
 export type TransactionTemplate = {
   __typename?: 'TransactionTemplate';
   code: Scalars['String']['output'];
   id: Scalars['UUID']['output'];
 };
 
 export type TransactionTemplateConnection = {
   __typename?: 'TransactionTemplateConnection';
   /** A list of edges. */
   edges: Array<TransactionTemplateEdge>;
   /** A list of nodes. */
@@ -2901,70 +2905,70 @@ export type CommitteesQueryVariables = Exact<{
   after?: InputMaybe<Scalars['String']['input']>;
 }>;
 
 
 export type CommitteesQuery = { __typename?: 'Query', committees: { __typename?: 'CommitteeConnection', edges: Array<{ __typename?: 'CommitteeEdge', cursor: string, node: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };
 
 export type CommitteeRemoveUserMutationVariables = Exact<{
   input: CommitteeRemoveUserInput;
 }>;
 
 
 export type CommitteeRemoveUserMutation = { __typename?: 'Mutation', committeeRemoveUser: { __typename?: 'CommitteeRemoveUserPayload', committee: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } } };
 
 export type DisbursalOnFacilityPageFragment = { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, status: DisbursalStatus, createdAt: any };
 
 export type GetCreditFacilityDisbursalsQueryVariables = Exact<{
   publicId: Scalars['PublicId']['input'];
 }>;
 
 
 export type GetCreditFacilityDisbursalsQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, status: DisbursalStatus, createdAt: any }> } | null };
 
 export type CreditFacilityLayoutFragmentFragment = { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, currentCvl:
     | { __typename: 'FiniteCVLPct', value: any }
     | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
-  , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+  , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     , marginCallCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     , initialCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null };
 
 export type GetCreditFacilityLayoutDetailsQueryVariables = Exact<{
   publicId: Scalars['PublicId']['input'];
 }>;
 
 
 export type GetCreditFacilityLayoutDetailsQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, currentCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
-    , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+    , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , marginCallCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , initialCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } | null };
 
 export type LedgerAccountInfoFragment = { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
     | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
     | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
    };
 
 export type CreditFacilityLedgerAccountsQueryVariables = Exact<{
   publicId: Scalars['PublicId']['input'];
 }>;
 
 
 export type CreditFacilityLedgerAccountsQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, ledgerAccounts: { __typename?: 'CreditFacilityLedgerAccounts', facilityAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
           | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
           | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
          }, inLiquidationAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
           | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
@@ -3032,183 +3036,183 @@ export type GetCreditFacilityHistoryQuery = { __typename?: 'Query', creditFacili
 export type RepaymentOnFacilityPageFragment = { __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any };
 
 export type GetCreditFacilityRepaymentPlanQueryVariables = Exact<{
   publicId: Scalars['PublicId']['input'];
 }>;
 
 
 export type GetCreditFacilityRepaymentPlanQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }> } | null };
 
 export type CreditFacilityCollateralUpdateMutationVariables = Exact<{
   input: CreditFacilityCollateralUpdateInput;
 }>;
 
 
 export type CreditFacilityCollateralUpdateMutation = { __typename?: 'Mutation', creditFacilityCollateralUpdate: { __typename?: 'CreditFacilityCollateralUpdatePayload', creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, balance: { __typename?: 'CreditFacilityBalance', collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, history: Array<
         | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
         | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
         | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
         | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
       >, currentCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
-      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , marginCallCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , initialCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } } };
 
 type CvlPctData_FiniteCvlPct_Fragment = { __typename: 'FiniteCVLPct', value: any };
 
 type CvlPctData_InfiniteCvlPct_Fragment = { __typename: 'InfiniteCVLPct', isInfinite: boolean };
 
 export type CvlPctDataFragment =
   | CvlPctData_FiniteCvlPct_Fragment
   | CvlPctData_InfiniteCvlPct_Fragment
 ;
 
 export type CreditFacilitiesQueryVariables = Exact<{
   first: Scalars['Int']['input'];
   after?: InputMaybe<Scalars['String']['input']>;
   sort?: InputMaybe<CreditFacilitiesSort>;
   filter?: InputMaybe<CreditFacilitiesFilter>;
 }>;
 
 
 export type CreditFacilitiesQuery = { __typename?: 'Query', creditFacilities: { __typename?: 'CreditFacilityConnection', edges: Array<{ __typename?: 'CreditFacilityEdge', cursor: string, node: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, publicId: any, collateralizationState: CollateralizationState, activatedAt: any, status: CreditFacilityStatus, facilityAmount: UsdCents, currentCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , balance: { __typename?: 'CreditFacilityBalance', collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, customer: { __typename?: 'Customer', customerId: string, email: string } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, hasNextPage: boolean } } };
 
 export type CreditFacilityPartialPaymentRecordMutationVariables = Exact<{
   input: CreditFacilityPartialPaymentRecordInput;
 }>;
 
 
 export type CreditFacilityPartialPaymentRecordMutation = { __typename?: 'Mutation', creditFacilityPartialPaymentRecord: { __typename?: 'CreditFacilityPartialPaymentRecordPayload', creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, history: Array<
         | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
         | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
         | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
         | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
       >, currentCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
-      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , marginCallCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , initialCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } } };
 
 export type CreditFacilityPartialPaymentWithDateRecordMutationVariables = Exact<{
   input: CreditFacilityPartialPaymentWithDateRecordInput;
 }>;
 
 
 export type CreditFacilityPartialPaymentWithDateRecordMutation = { __typename?: 'Mutation', creditFacilityPartialPaymentWithDateRecord: { __typename?: 'CreditFacilityPartialPaymentRecordPayload', creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, history: Array<
         | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
         | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
         | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
         | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
         | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
       >, currentCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
-      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , marginCallCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , initialCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } } };
 
-export type CreditFacilityProposalLayoutFragmentFragment = { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
+export type CreditFacilityProposalLayoutFragmentFragment = { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, disburseAllAtActivation: boolean, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     , marginCallCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     , initialCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
       | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
       | { __typename?: 'SystemApproval', autoApprove: boolean }
     , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } };
 
 export type GetCreditFacilityProposalLayoutDetailsQueryVariables = Exact<{
   creditFacilityProposalId: Scalars['UUID']['input'];
 }>;
 
 
-export type GetCreditFacilityProposalLayoutDetailsQuery = { __typename?: 'Query', creditFacilityProposal?: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
+export type GetCreditFacilityProposalLayoutDetailsQuery = { __typename?: 'Query', creditFacilityProposal?: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, disburseAllAtActivation: boolean, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , marginCallCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , initialCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
         | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
         | { __typename?: 'SystemApproval', autoApprove: boolean }
       , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } | null };
 
 export type GetCreditFacilityProposalRepaymentPlanQueryVariables = Exact<{
   id: Scalars['UUID']['input'];
 }>;
 
 
 export type GetCreditFacilityProposalRepaymentPlanQuery = { __typename?: 'Query', creditFacilityProposal?: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }> } | null };
 
 export type CreditFacilityProposalCollateralUpdateMutationVariables = Exact<{
   input: CreditFacilityProposalCollateralUpdateInput;
 }>;
 
 
-export type CreditFacilityProposalCollateralUpdateMutation = { __typename?: 'Mutation', creditFacilityProposalCollateralUpdate: { __typename?: 'CreditFacilityProposalCollateralUpdatePayload', creditFacilityProposal: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
+export type CreditFacilityProposalCollateralUpdateMutation = { __typename?: 'Mutation', creditFacilityProposalCollateralUpdate: { __typename?: 'CreditFacilityProposalCollateralUpdatePayload', creditFacilityProposal: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, disburseAllAtActivation: boolean, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , marginCallCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , initialCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
          }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
           | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
           | { __typename?: 'SystemApproval', autoApprove: boolean }
         , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } } };
 
 export type CreditFacilityProposalCreateMutationVariables = Exact<{
   input: CreditFacilityProposalCreateInput;
 }>;
 
 
 export type CreditFacilityProposalCreateMutation = { __typename?: 'Mutation', creditFacilityProposalCreate: { __typename?: 'CreditFacilityProposalCreatePayload', creditFacilityProposal: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, customer: { __typename?: 'Customer', id: string, email: string, creditFacilityProposals: Array<{ __typename?: 'CreditFacilityProposal', id: string }> } } } };
 
 export type CreditFacilityProposalsQueryVariables = Exact<{
   first: Scalars['Int']['input'];
   after?: InputMaybe<Scalars['String']['input']>;
 }>;
 
@@ -3392,51 +3396,51 @@ export type GetDisbursalDetailsQueryVariables = Exact<{
   publicId: Scalars['PublicId']['input'];
 }>;
 
 
 export type GetDisbursalDetailsQuery = { __typename?: 'Query', disbursalByPublicId?: { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, amount: UsdCents, createdAt: any, status: DisbursalStatus, publicId: any, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, facilityAmount: UsdCents, status: CreditFacilityStatus, publicId: any, customer: { __typename?: 'Customer', id: string, email: string, customerId: string, publicId: any, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } }, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
         | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
         | { __typename?: 'SystemApproval', autoApprove: boolean }
       , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } | null };
 
 export type CreditFacilityDisbursalInitiateMutationVariables = Exact<{
   input: CreditFacilityDisbursalInitiateInput;
 }>;
 
 
 export type CreditFacilityDisbursalInitiateMutation = { __typename?: 'Mutation', creditFacilityDisbursalInitiate: { __typename?: 'CreditFacilityDisbursalInitiatePayload', disbursal: { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, status: DisbursalStatus, createdAt: any, creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus, id: string, disbursalId: string, publicId: any, amount: UsdCents, createdAt: any }>, history: Array<
           | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
           | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
           | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
           | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
           | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
           | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
           | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
         >, currentCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
-        , balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+        , balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
             | { __typename: 'FiniteCVLPct', value: any }
             | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
           , marginCallCvl:
             | { __typename: 'FiniteCVLPct', value: any }
             | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
           , initialCvl:
             | { __typename: 'FiniteCVLPct', value: any }
             | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
           , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } } } };
 
 export type DisbursalsQueryVariables = Exact<{
   first: Scalars['Int']['input'];
   after?: InputMaybe<Scalars['String']['input']>;
 }>;
 
 
 export type DisbursalsQuery = { __typename?: 'Query', disbursals: { __typename?: 'CreditFacilityDisbursalConnection', edges: Array<{ __typename?: 'CreditFacilityDisbursalEdge', cursor: string, node: { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, createdAt: any, status: DisbursalStatus } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };
 
 export type ExecuteManualTransactionMutationVariables = Exact<{
   input: ManualTransactionExecuteInput;
 }>;
 
 
 export type ExecuteManualTransactionMutation = { __typename?: 'Mutation', manualTransactionExecute: { __typename?: 'ManualTransactionExecutePayload', transaction: { __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, description?: string | null } } };
 
@@ -3701,108 +3705,108 @@ export type RoleCreateMutation = { __typename?: 'Mutation', roleCreate: { __type
 export type PermissionSetsQueryVariables = Exact<{
   first: Scalars['Int']['input'];
   after?: InputMaybe<Scalars['String']['input']>;
 }>;
 
 
 export type PermissionSetsQuery = { __typename?: 'Query', permissionSets: { __typename?: 'PermissionSetConnection', edges: Array<{ __typename?: 'PermissionSetEdge', node: { __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName } }> } };
 
 export type PermissionSetFieldsFragment = { __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName };
 
 export type RoleFieldsFragment = { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> };
 
 export type RolesQueryVariables = Exact<{
   first: Scalars['Int']['input'];
   after?: InputMaybe<Scalars['String']['input']>;
 }>;
 
 
 export type RolesQuery = { __typename?: 'Query', roles: { __typename?: 'RoleConnection', edges: Array<{ __typename?: 'RoleEdge', node: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } };
 
 export type TermsTemplateQueryVariables = Exact<{
   id: Scalars['UUID']['input'];
 }>;
 
 
-export type TermsTemplateQuery = { __typename?: 'Query', termsTemplate?: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+export type TermsTemplateQuery = { __typename?: 'Query', termsTemplate?: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , marginCallCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , initialCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , duration: { __typename?: 'Duration', period: Period, units: number } } } | null };
 
 export type UpdateTermsTemplateMutationVariables = Exact<{
   input: TermsTemplateUpdateInput;
 }>;
 
 
-export type UpdateTermsTemplateMutation = { __typename?: 'Mutation', termsTemplateUpdate: { __typename?: 'TermsTemplateUpdatePayload', termsTemplate: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+export type UpdateTermsTemplateMutation = { __typename?: 'Mutation', termsTemplateUpdate: { __typename?: 'TermsTemplateUpdatePayload', termsTemplate: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , marginCallCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , initialCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , duration: { __typename?: 'Duration', period: Period, units: number } } } } };
 
 export type CreateTermsTemplateMutationVariables = Exact<{
   input: TermsTemplateCreateInput;
 }>;
 
 
-export type CreateTermsTemplateMutation = { __typename?: 'Mutation', termsTemplateCreate: { __typename?: 'TermsTemplateCreatePayload', termsTemplate: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+export type CreateTermsTemplateMutation = { __typename?: 'Mutation', termsTemplateCreate: { __typename?: 'TermsTemplateCreatePayload', termsTemplate: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , marginCallCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , initialCvl:
           | { __typename: 'FiniteCVLPct', value: any }
           | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         , duration: { __typename?: 'Duration', period: Period, units: number } } } } };
 
-export type TermsTemplateFieldsFragment = { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+export type TermsTemplateFieldsFragment = { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     , marginCallCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     , initialCvl:
       | { __typename: 'FiniteCVLPct', value: any }
       | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     , duration: { __typename?: 'Duration', period: Period, units: number } } };
 
 export type TermsTemplatesQueryVariables = Exact<{ [key: string]: never; }>;
 
 
-export type TermsTemplatesQuery = { __typename?: 'Query', termsTemplates: Array<{ __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, liquidationCvl:
+export type TermsTemplatesQuery = { __typename?: 'Query', termsTemplates: Array<{ __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , marginCallCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , initialCvl:
         | { __typename: 'FiniteCVLPct', value: any }
         | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       , duration: { __typename?: 'Duration', period: Period, units: number } } }> };
 
 export type LedgerTransactionsForTemplateCodeQueryVariables = Exact<{
   templateCode: Scalars['String']['input'];
   first: Scalars['Int']['input'];
   after?: InputMaybe<Scalars['String']['input']>;
 }>;
 
 
 export type LedgerTransactionsForTemplateCodeQuery = { __typename?: 'Query', ledgerTransactionsForTemplateCode: { __typename?: 'LedgerTransactionConnection', edges: Array<{ __typename?: 'LedgerTransactionEdge', cursor: string, node: { __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, description?: string | null } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };
 
 export type TransactionTemplatesQueryVariables = Exact<{
   first: Scalars['Int']['input'];
   after?: InputMaybe<Scalars['String']['input']>;
 }>;
 
 
diff --git a/apps/admin-panel/lib/graphql/generated/mocks.ts b/apps/admin-panel/lib/graphql/generated/mocks.ts
index 1c98acc3b9424dfde3543d6b56f35120b093d523..8daede8f39d0ffb9a4f0fd696de72cf1e9a81647 100644
--- a/apps/admin-panel/lib/graphql/generated/mocks.ts
+++ b/apps/admin-panel/lib/graphql/generated/mocks.ts
@@ -2445,68 +2445,76 @@ export const mockSystem = (overrides?: Partial<System>, _relationshipsToOmit: Se
     };
 };
 
 export const mockSystemApproval = (overrides?: Partial<SystemApproval>, _relationshipsToOmit: Set<string> = new Set()): { __typename: 'SystemApproval' } & SystemApproval => {
     const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
     relationshipsToOmit.add('SystemApproval');
     return {
         __typename: 'SystemApproval',
         autoApprove: overrides && overrides.hasOwnProperty('autoApprove') ? overrides.autoApprove! : faker.datatype.boolean(),
     };
 };
 
 export const mockTermValues = (overrides?: Partial<TermValues>, _relationshipsToOmit: Set<string> = new Set()): { __typename: 'TermValues' } & TermValues => {
     const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
     relationshipsToOmit.add('TermValues');
     return {
         __typename: 'TermValues',
         accrualCycleInterval: overrides && overrides.hasOwnProperty('accrualCycleInterval') ? overrides.accrualCycleInterval! : mockEnums.interestInterval(),
         accrualInterval: overrides && overrides.hasOwnProperty('accrualInterval') ? overrides.accrualInterval! : mockEnums.interestInterval(),
         annualRate: overrides && overrides.hasOwnProperty('annualRate') ? overrides.annualRate! : faker.number.int({ min: 5, max: 20 }),
         duration: overrides && overrides.hasOwnProperty('duration') ? overrides.duration! : relationshipsToOmit.has('Duration') ? {} as Duration : mockDuration({}, relationshipsToOmit),
         initialCvl: overrides && overrides.hasOwnProperty('initialCvl') ? overrides.initialCvl! : faker.number.int({ min: 95, max: 98 }),
         liquidationCvl: overrides && overrides.hasOwnProperty('liquidationCvl') ? overrides.liquidationCvl! : faker.number.int({ min: 85, max: 88 }),
         marginCallCvl: overrides && overrides.hasOwnProperty('marginCallCvl') ? overrides.marginCallCvl! : faker.number.int({ min: 90, max: 92 }),
         oneTimeFeeRate: overrides && overrides.hasOwnProperty('oneTimeFeeRate') ? overrides.oneTimeFeeRate! : generateMockValue.oneTimeFeeRate(),
+        disburseAllAtActivation:
+            overrides && overrides.hasOwnProperty('disburseAllAtActivation')
+                ? overrides.disburseAllAtActivation!
+                : faker.datatype.boolean(),
     };
 };
 
 export const mockTermsInput = (overrides?: Partial<TermsInput>, _relationshipsToOmit: Set<string> = new Set()): TermsInput => {
     const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
     relationshipsToOmit.add('TermsInput');
     return {
         accrualCycleInterval: overrides && overrides.hasOwnProperty('accrualCycleInterval') ? overrides.accrualCycleInterval! : InterestInterval.EndOfDay,
         accrualInterval: overrides && overrides.hasOwnProperty('accrualInterval') ? overrides.accrualInterval! : InterestInterval.EndOfDay,
         annualRate: overrides && overrides.hasOwnProperty('annualRate') ? overrides.annualRate! : generateMockValue.int(),
         duration: overrides && overrides.hasOwnProperty('duration') ? overrides.duration! : relationshipsToOmit.has('DurationInput') ? {} as DurationInput : mockDurationInput({}, relationshipsToOmit),
         initialCvl: overrides && overrides.hasOwnProperty('initialCvl') ? overrides.initialCvl! : faker.lorem.word(),
         interestDueDurationFromAccrual: overrides && overrides.hasOwnProperty('interestDueDurationFromAccrual') ? overrides.interestDueDurationFromAccrual! : relationshipsToOmit.has('DurationInput') ? {} as DurationInput : mockDurationInput({}, relationshipsToOmit),
         liquidationCvl: overrides && overrides.hasOwnProperty('liquidationCvl') ? overrides.liquidationCvl! : faker.lorem.word(),
         marginCallCvl: overrides && overrides.hasOwnProperty('marginCallCvl') ? overrides.marginCallCvl! : faker.lorem.word(),
         obligationLiquidationDurationFromDue: overrides && overrides.hasOwnProperty('obligationLiquidationDurationFromDue') ? overrides.obligationLiquidationDurationFromDue! : relationshipsToOmit.has('DurationInput') ? {} as DurationInput : mockDurationInput({}, relationshipsToOmit),
         obligationOverdueDurationFromDue: overrides && overrides.hasOwnProperty('obligationOverdueDurationFromDue') ? overrides.obligationOverdueDurationFromDue! : relationshipsToOmit.has('DurationInput') ? {} as DurationInput : mockDurationInput({}, relationshipsToOmit),
         oneTimeFeeRate: overrides && overrides.hasOwnProperty('oneTimeFeeRate') ? overrides.oneTimeFeeRate! : faker.lorem.word(),
+        disburseAllAtActivation:
+            overrides && overrides.hasOwnProperty('disburseAllAtActivation')
+                ? overrides.disburseAllAtActivation!
+                : faker.datatype.boolean(),
     };
 };
 
 export const mockTermsTemplate = (overrides?: Partial<TermsTemplate>, _relationshipsToOmit: Set<string> = new Set()): { __typename: 'TermsTemplate' } & TermsTemplate => {
     const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
     relationshipsToOmit.add('TermsTemplate');
     return {
         __typename: 'TermsTemplate',
         createdAt: overrides && overrides.hasOwnProperty('createdAt') ? overrides.createdAt! : generateMockValue.timestamp(),
         id: overrides && overrides.hasOwnProperty('id') ? overrides.id! : faker.string.uuid(),
         name: overrides && overrides.hasOwnProperty('name') ? overrides.name! : generateMockValue.name(),
         termsId: overrides && overrides.hasOwnProperty('termsId') ? overrides.termsId! : generateMockValue.uuid(),
         userCanUpdateTermsTemplate: overrides && overrides.hasOwnProperty('userCanUpdateTermsTemplate') ? overrides.userCanUpdateTermsTemplate! : faker.datatype.boolean(),
         values: overrides && overrides.hasOwnProperty('values') ? overrides.values! : relationshipsToOmit.has('TermValues') ? {} as TermValues : mockTermValues({}, relationshipsToOmit),
     };
 };
 
 export const mockTermsTemplateCreateInput = (overrides?: Partial<TermsTemplateCreateInput>, _relationshipsToOmit: Set<string> = new Set()): TermsTemplateCreateInput => {
     const relationshipsToOmit: Set<string> = new Set(_relationshipsToOmit);
     relationshipsToOmit.add('TermsTemplateCreateInput');
     return {
         accrualCycleInterval: overrides && overrides.hasOwnProperty('accrualCycleInterval') ? overrides.accrualCycleInterval! : InterestInterval.EndOfDay,
         accrualInterval: overrides && overrides.hasOwnProperty('accrualInterval') ? overrides.accrualInterval! : InterestInterval.EndOfDay,
         annualRate: overrides && overrides.hasOwnProperty('annualRate') ? overrides.annualRate! : generateMockValue.int(),
         duration: overrides && overrides.hasOwnProperty('duration') ? overrides.duration! : relationshipsToOmit.has('DurationInput') ? {} as DurationInput : mockDurationInput({}, relationshipsToOmit),
diff --git a/apps/admin-panel/messages/en.json b/apps/admin-panel/messages/en.json
index 8f2f2456c8e2258c9844d99bd4ea12c0f0aa8edb..54cecfe6245e2ca5ed2d9ad43c5bf254e2e4104c 100644
--- a/apps/admin-panel/messages/en.json
+++ b/apps/admin-panel/messages/en.json
@@ -724,50 +724,53 @@
         },
         "entryTypes": {
           "collateralUpdated": "Collateral Updated",
           "collateralizationUpdated": "Collateralization Updated",
           "approved": "Facility Approved",
           "incrementalPayment": "Payment",
           "disbursalExecuted": "Disbursal",
           "interestAccrued": "Interest Accrued",
           "liquidationAmountReserved": "Liquidation Amount Reserved"
         },
         "messages": {
           "unknownType": "Unknown Entry Type",
           "emptyTable": "No history found"
         }
       },
       "TermsDialog": {
         "title": "Terms",
         "details": {
           "duration": "Duration",
           "interestRate": "Nominal Interest Rate",
           "targetCvl": "Target/initial CVL %",
           "marginCallCvl": "Margin call CVL %",
           "liquidationCvl": "Liquidation CVL %",
           "dateCreated": "Date created",
           "structuringFeeRate": "Structuring Fee Rate",
+          "disburseAllAtActivation": "Disburse Full Facility at Activation",
+          "enabled": "Enabled",
+          "disabled": "Disabled",
           "effectiveRate": "Effective Rate"
         }
       },
       "CollateralCard": {
         "title": "Collateral",
         "details": {
           "collateralBalance": "Collateral balance (BTC)",
           "currentPrice": "Current BTC/USD Price",
           "collateralValue": "Collateral value (USD)",
           "marginCallPrice": "Margin Call Price BTC/USD ({percentage})",
           "liquidationPrice": "Liquidation Price BTC/USD ({percentage})",
           "collateralToReachTarget": "Collateral to reach target ({percentage})",
           "currentCvl": "Current CVL"
         },
         "status": {
           "moderate": "Moderate",
           "high": "High",
           "critical": "Critical"
         }
       },
       "FacilityCard": {
         "title": "Facility",
         "details": {
           "facilityAmount": "Facility Amount",
           "facilityRemaining": "Facility Remaining",
@@ -955,102 +958,111 @@
     "description": "Terms templates that can be used with loans and credit facilities",
     "table": {
       "headers": {
         "name": "Name",
         "duration": "Duration",
         "annualRate": "Annual Rate",
         "initialCvl": "Initial CVL",
         "marginCallCvl": "Margin Call CVL",
         "liquidationCvl": "Liquidation CVL"
       }
     },
     "errors": {
       "general": "An error occurred"
     },
     "TermsTemplateDetails": {
       "DetailsCard": {
         "title": "Terms Template",
         "fields": {
           "name": "Name",
           "createdAt": "Created At",
           "duration": "Duration",
           "annualRate": "Annual Rate",
           "initialCvl": "Initial CVL (%)",
           "marginCallCvl": "Margin Call CVL (%)",
           "liquidationCvl": "Liquidation CVL (%)",
-          "oneTimeFeeRate": "Structuring Fee Rate (%)"
+          "oneTimeFeeRate": "Structuring Fee Rate (%)",
+          "disburseAllAtActivation": "Disburse Full Facility at Activation"
+        },
+        "values": {
+          "disburseAllAtActivation": {
+            "enabled": "Enabled",
+            "disabled": "Disabled"
+          }
         },
         "buttons": {
           "update": "Update",
           "duplicate": "Duplicate"
         }
       },
       "UpdateTermsTemplate": {
         "title": "Update {name}",
         "description": "Update the Terms Template by modifying the required information.",
         "fields": {
           "annualRate": "Interest Rate (APR)",
           "duration": "Duration",
           "months": "months",
           "initialCvl": "Initial CVL (%)",
           "marginCallCvl": "Margin Call CVL (%)",
           "liquidationCvl": "Liquidation CVL (%)",
-          "oneTimeFeeRate": "Structuring Fee Rate (%)"
+          "oneTimeFeeRate": "Structuring Fee Rate (%)",
+          "disburseAllAtActivation": "Disburse Full Facility at Activation"
         },
         "placeholders": {
           "annualRate": "Enter the annual rate",
           "durationUnits": "Enter duration in months",
           "initialCvl": "Enter the initial CVL",
           "marginCallCvl": "Enter the margin call CVL",
           "liquidationCvl": "Enter the liquidation CVL",
           "oneTimeFeeRate": "Enter the Structuring Fee Rate"
         },
         "buttons": {
           "submit": "Update Terms Template"
         },
         "errors": {
           "general": "An unexpected error occurred. Please try again.",
           "updateFailed": "Failed to update Terms Template"
         },
         "success": {
           "updated": "Terms Template updated successfully"
         }
       },
       "CreateTermsTemplate": {
         "title": "Create Terms Template",
         "titleDuplicate": "Duplicate Terms Template: {name}",
         "description": "Create a new Terms Template by providing the required information.",
         "descriptionDuplicate": "Create a new Terms Template based on the existing template. You can modify the values as needed.",
         "fields": {
           "name": "Template Name",
           "annualRate": "Interest Rate (APR)",
           "duration": "Duration",
           "months": "months",
           "initialCvl": "Initial CVL (%)",
           "marginCallCvl": "Margin Call CVL (%)",
           "liquidationCvl": "Liquidation CVL (%)",
-          "oneTimeFeeRate": "Structuring Fee Rate (%)"
+          "oneTimeFeeRate": "Structuring Fee Rate (%)",
+          "disburseAllAtActivation": "Disburse Full Facility at Activation"
         },
         "placeholders": {
           "name": "Enter the template name",
           "annualRate": "Enter the annual rate",
           "durationUnits": "Enter duration in months",
           "initialCvl": "Enter the initial CVL",
           "marginCallCvl": "Enter the margin call CVL",
           "liquidationCvl": "Enter the liquidation CVL",
           "oneTimeFeeRate": "Enter the Structuring Fee Rate"
         },
         "buttons": {
           "submit": "Create Terms Template"
         },
         "errors": {
           "general": "An unexpected error occurred. Please try again.",
           "creationFailed": "Failed to create Terms Template"
         },
         "success": {
           "created": "Terms Template created successfully"
         }
       }
     }
   },
   "Policies": {
     "title": "Policies",
diff --git a/apps/admin-panel/messages/es.json b/apps/admin-panel/messages/es.json
index 16b2e075eae65f3a701ac70b0a27ffcdeaed18e4..84b8209fbfc252718e2e639ee2603bfd2b7543ac 100644
--- a/apps/admin-panel/messages/es.json
+++ b/apps/admin-panel/messages/es.json
@@ -723,51 +723,54 @@
           "amount": "Monto"
         },
         "entryTypes": {
           "collateralUpdated": "Garantía actualizada",
           "collateralizationUpdated": "Colateralización actualizada",
           "approved": "Línea aprobada",
           "incrementalPayment": "Pago",
           "disbursalExecuted": "Desembolso",
           "interestAccrued": "Interés acumulado",
           "liquidationAmountReserved": "Importe de liquidación reservado"
         },
         "messages": {
           "unknownType": "Tipo de entrada desconocido",
           "emptyTable": "No se encontró historial"
         }
       },
       "TermsDialog": {
         "title": "Términos",
         "details": {
           "duration": "Duración",
           "interestRate": "Tasa de interés nominal",
           "targetCvl": "CVL objetivo/inicial %",
           "marginCallCvl": "CVL de llamada de margen %",
           "liquidationCvl": "CVL de liquidación %",
           "dateCreated": "Fecha de creación",
-          "structuringFeeRate": "Tasa de Comisión de Estructuración",
+          "structuringFeeRate": "Tasa de comisión de estructuración",
+          "disburseAllAtActivation": "Desembolsar todo el crédito en la activación",
+          "enabled": "Habilitado",
+          "disabled": "Deshabilitado",
           "effectiveRate": "Tasa efectiva"
         }
       },
       "CollateralCard": {
         "title": "Garantía",
         "details": {
           "collateralBalance": "Saldo de garantía (BTC)",
           "currentPrice": "Precio actual BTC/USD",
           "collateralValue": "Valor de garantía (USD)",
           "marginCallPrice": "Precio de llamada de margen BTC/USD ({percentage})",
           "liquidationPrice": "Precio de liquidación BTC/USD ({percentage})",
           "collateralToReachTarget": "Garantía para alcanzar el objetivo ({percentage})",
           "currentCvl": "CVL Actual"
         },
         "status": {
           "moderate": "Moderado",
           "high": "Alto",
           "critical": "Crítico"
         }
       },
       "FacilityCard": {
         "title": "Línea",
         "details": {
           "facilityAmount": "Monto de Línea",
           "facilityRemaining": "Línea Restante",
@@ -955,102 +958,111 @@
     "description": "Plantillas de términos que se pueden utilizar con préstamos y líneas de crédito",
     "table": {
       "headers": {
         "name": "Nombre",
         "duration": "Duración",
         "annualRate": "Tasa Anual",
         "initialCvl": "CVL Inicial",
         "marginCallCvl": "CVL de Llamada de Margen",
         "liquidationCvl": "CVL de Liquidación"
       }
     },
     "errors": {
       "general": "Ocurrió un error"
     },
     "TermsTemplateDetails": {
       "DetailsCard": {
         "title": "Plantilla de Términos",
         "fields": {
           "name": "Nombre",
           "createdAt": "Fecha de registro",
           "duration": "Duración",
           "annualRate": "Tasa Anual",
           "initialCvl": "CVL Inicial (%)",
           "marginCallCvl": "CVL de Llamada de Margen (%)",
           "liquidationCvl": "CVL de Liquidación (%)",
-          "oneTimeFeeRate": "Tasa de Comisión de Estructuración (%)"
+          "oneTimeFeeRate": "Tasa de Comisión de Estructuración (%)",
+          "disburseAllAtActivation": "Desembolsar todo el crédito en la activación"
+        },
+        "values": {
+          "disburseAllAtActivation": {
+            "enabled": "Habilitado",
+            "disabled": "Deshabilitado"
+          }
         },
         "buttons": {
           "update": "Actualizar",
           "duplicate": "Duplicar"
         }
       },
       "UpdateTermsTemplate": {
         "title": "Actualizar {name}",
         "description": "Actualice la Plantilla de Términos modificando la información requerida.",
         "fields": {
           "annualRate": "Tasa de Interés (APR)",
           "duration": "Duración",
           "months": "meses",
           "initialCvl": "CVL Inicial (%)",
           "marginCallCvl": "CVL de Llamada de Margen (%)",
           "liquidationCvl": "CVL de Liquidación (%)",
-          "oneTimeFeeRate": "Tasa de Comisión de Estructuración (%)"
+          "oneTimeFeeRate": "Tasa de Comisión de Estructuración (%)",
+          "disburseAllAtActivation": "Desembolsar todo el crédito en la activación"
         },
         "placeholders": {
           "annualRate": "Ingrese la tasa anual",
           "durationUnits": "Introduce la duración en meses",
           "initialCvl": "Ingrese el CVL inicial",
           "marginCallCvl": "Ingrese el CVL de llamada de margen",
           "liquidationCvl": "Ingrese el CVL de liquidación",
           "oneTimeFeeRate": "Ingrese la Tasa de Comisión de Estructuración"
         },
         "buttons": {
           "submit": "Actualizar Plantilla de Términos"
         },
         "errors": {
           "general": "Ocurrió un error inesperado. Por favor intente de nuevo.",
           "updateFailed": "Error al actualizar la Plantilla de Términos"
         },
         "success": {
           "updated": "Plantilla de Términos actualizada exitosamente"
         }
       },
       "CreateTermsTemplate": {
         "title": "Crear Plantilla de Términos",
         "titleDuplicate": "Duplicar Plantilla de Términos: {name}",
         "description": "Cree una nueva Plantilla de Términos proporcionando la información requerida.",
         "descriptionDuplicate": "Cree una nueva Plantilla de Términos basada en la plantilla existente. Puede modificar los valores según sea necesario.",
         "fields": {
           "name": "Nombre de la Plantilla",
           "annualRate": "Tasa de Interés (APR)",
           "duration": "Duración",
           "months": "meses",
           "initialCvl": "CVL Inicial (%)",
           "marginCallCvl": "CVL de Llamada de Margen (%)",
           "liquidationCvl": "CVL de Liquidación (%)",
-          "oneTimeFeeRate": "Tasa de Comisión de Estructuración (%)"
+          "oneTimeFeeRate": "Tasa de Comisión de Estructuración (%)",
+          "disburseAllAtActivation": "Desembolsar todo el crédito en la activación"
         },
         "placeholders": {
           "name": "Ingrese el nombre de la plantilla",
           "annualRate": "Ingrese la tasa anual",
           "durationUnits": "Introduce la duración en meses",
           "initialCvl": "Ingrese el CVL inicial",
           "marginCallCvl": "Ingrese el CVL de llamada de margen",
           "liquidationCvl": "Ingrese el CVL de liquidación",
           "oneTimeFeeRate": "Ingrese la Tasa de Comisión de Estructuración"
         },
         "buttons": {
           "submit": "Crear Plantilla de Términos"
         },
         "errors": {
           "general": "Ocurrió un error inesperado. Por favor intente de nuevo.",
           "creationFailed": "Error al crear la Plantilla de Términos"
         },
         "success": {
           "created": "Plantilla de Términos creada exitosamente"
         }
       }
     }
   },
   "Policies": {
     "title": "Políticas",
diff --git a/apps/customer-portal/app/credit-facilities/[credit-facility-id]/page.tsx b/apps/customer-portal/app/credit-facilities/[credit-facility-id]/page.tsx
index 0ddc99aa267650f7e13360418ad8187c25bff9c5..050e3d77be9619b7a220e66b2998f99d6cac62fe 100644
--- a/apps/customer-portal/app/credit-facilities/[credit-facility-id]/page.tsx
+++ b/apps/customer-portal/app/credit-facilities/[credit-facility-id]/page.tsx
@@ -27,50 +27,51 @@ import { LoanAndCreditFacilityStatusBadge } from "@/app/credit-facility"
 import { getCreditFacility } from "@/lib/graphql/query/get-cf"
 import { removeUnderscore } from "@/lib/utils"
 
 gql`
   query GetCreditFacility($id: UUID!) {
     creditFacility(id: $id) {
       id
       creditFacilityId
       facilityAmount
       collateralizationState
       status
       activatedAt
       maturesAt
       disbursals {
         id
         disbursalId
         amount
         status
         createdAt
       }
       creditFacilityTerms {
         annualRate
         accrualCycleInterval
         accrualInterval
         oneTimeFeeRate
+        disburseAllAtActivation
         duration {
           period
           units
         }
         liquidationCvl
         marginCallCvl
         initialCvl
       }
       balance {
         facilityRemaining {
           usdBalance
         }
         disbursed {
           total {
             usdBalance
           }
           outstanding {
             usdBalance
           }
           dueOutstanding {
             usdBalance
           }
         }
         interest {
           total {
diff --git a/apps/customer-portal/lib/graphql/generated/index.ts b/apps/customer-portal/lib/graphql/generated/index.ts
index caa14c21f0784bb8c6d0f72bdfb0ad047dc3b754..131b88b45c91f990da6cf747ccef2ab8218cac53 100644
--- a/apps/customer-portal/lib/graphql/generated/index.ts
+++ b/apps/customer-portal/lib/graphql/generated/index.ts
@@ -373,95 +373,96 @@ export type Query = {
   creditFacility?: Maybe<CreditFacility>;
   me: Me;
   realtimePrice: RealtimePrice;
 };
 
 
 export type QueryCreditFacilityArgs = {
   id: Scalars['UUID']['input'];
 };
 
 export type RealtimePrice = {
   __typename?: 'RealtimePrice';
   usdCentsPerBtc: Scalars['UsdCents']['output'];
 };
 
 export type TermValues = {
   __typename?: 'TermValues';
   accrualCycleInterval: InterestInterval;
   accrualInterval: InterestInterval;
   annualRate: Scalars['AnnualRatePct']['output'];
   duration: Duration;
   initialCvl: Scalars['CVLPct']['output'];
   liquidationCvl: Scalars['CVLPct']['output'];
   marginCallCvl: Scalars['CVLPct']['output'];
   oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['output'];
+  disburseAllAtActivation: Scalars['Boolean']['output'];
 };
 
 export type Total = {
   __typename?: 'Total';
   usdBalance: Scalars['UsdCents']['output'];
 };
 
 export type UnknownEntry = {
   __typename?: 'UnknownEntry';
   recordedAt: Scalars['Timestamp']['output'];
   txId: Scalars['UUID']['output'];
 };
 
 export type Withdrawal = {
   __typename?: 'Withdrawal';
   accountId: Scalars['UUID']['output'];
   amount: Scalars['UsdCents']['output'];
   createdAt: Scalars['Timestamp']['output'];
   id: Scalars['ID']['output'];
   reference: Scalars['String']['output'];
   status: WithdrawalStatus;
   withdrawalId: Scalars['UUID']['output'];
 };
 
 export type WithdrawalEntry = {
   __typename?: 'WithdrawalEntry';
   recordedAt: Scalars['Timestamp']['output'];
   withdrawal: Withdrawal;
 };
 
 export enum WithdrawalStatus {
   Cancelled = 'CANCELLED',
   Confirmed = 'CONFIRMED',
   Denied = 'DENIED',
   PendingApproval = 'PENDING_APPROVAL',
   PendingConfirmation = 'PENDING_CONFIRMATION',
   Reverted = 'REVERTED'
 }
 
 export type GetCreditFacilityQueryVariables = Exact<{
   id: Scalars['UUID']['input'];
 }>;
 
 
-export type GetCreditFacilityQuery = { __typename?: 'Query', creditFacility?: { __typename?: 'CreditFacility', id: string, creditFacilityId: any, facilityAmount: any, collateralizationState: CollateralizationState, status: CreditFacilityStatus, activatedAt: any, maturesAt: any, currentCvl: any, disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: any, amount: any, status: DisbursalStatus, createdAt: any }>, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualCycleInterval: InterestInterval, accrualInterval: InterestInterval, oneTimeFeeRate: any, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } }, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: any }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: any }, outstanding: { __typename?: 'Outstanding', usdBalance: any }, dueOutstanding: { __typename?: 'Outstanding', usdBalance: any } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: any }, outstanding: { __typename?: 'Outstanding', usdBalance: any }, dueOutstanding: { __typename?: 'Outstanding', usdBalance: any } }, collateral: { __typename?: 'Collateral', btcBalance: any }, dueOutstanding: { __typename?: 'Outstanding', usdBalance: any }, outstanding: { __typename?: 'Outstanding', usdBalance: any } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: any, outstanding: any, accrualAt: any, dueAt: any }>, history: Array<
+export type GetCreditFacilityQuery = { __typename?: 'Query', creditFacility?: { __typename?: 'CreditFacility', id: string, creditFacilityId: any, facilityAmount: any, collateralizationState: CollateralizationState, status: CreditFacilityStatus, activatedAt: any, maturesAt: any, currentCvl: any, disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: any, amount: any, status: DisbursalStatus, createdAt: any }>, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualCycleInterval: InterestInterval, accrualInterval: InterestInterval, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } }, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: any }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: any }, outstanding: { __typename?: 'Outstanding', usdBalance: any }, dueOutstanding: { __typename?: 'Outstanding', usdBalance: any } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: any }, outstanding: { __typename?: 'Outstanding', usdBalance: any }, dueOutstanding: { __typename?: 'Outstanding', usdBalance: any } }, collateral: { __typename?: 'Collateral', btcBalance: any }, dueOutstanding: { __typename?: 'Outstanding', usdBalance: any }, outstanding: { __typename?: 'Outstanding', usdBalance: any } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: any, outstanding: any, accrualAt: any, dueAt: any }>, history: Array<
       | { __typename?: 'CreditFacilityApproved', cents: any, recordedAt: any, txId: any, effective: any }
       | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: any, recordedAt: any, action: CollateralAction, txId: any, effective: any }
       | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: any, outstandingInterest: any, outstandingDisbursal: any, recordedAt: any, price: any, effective: any }
       | { __typename?: 'CreditFacilityDisbursalExecuted', cents: any, recordedAt: any, txId: any, effective: any }
       | { __typename?: 'CreditFacilityIncrementalPayment', cents: any, recordedAt: any, txId: any, effective: any }
       | { __typename?: 'CreditFacilityInterestAccrued', cents: any, recordedAt: any, txId: any, days: number, effective: any }
       | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: any, recordedAt: any, txId: any, effective: any }
     > } | null };
 
 export type MeQueryVariables = Exact<{ [key: string]: never; }>;
 
 
 export type MeQuery = { __typename?: 'Query', me: { __typename?: 'Me', customer: { __typename?: 'Customer', id: string, customerId: any, kycVerification: KycVerification, level: KycLevel, createdAt: any, email: string, telegramId: string, depositAccount: { __typename?: 'DepositAccount', id: string, depositAccountId: any, customerId: any, createdAt: any, balance: { __typename?: 'DepositAccountBalance', settled: any, pending: any }, deposits: Array<{ __typename?: 'Deposit', id: string, depositId: any, accountId: any, amount: any, createdAt: any, reference: string }>, withdrawals: Array<{ __typename?: 'Withdrawal', id: string, withdrawalId: any, accountId: any, amount: any, createdAt: any, reference: string, status: WithdrawalStatus }> }, creditFacilities: Array<{ __typename?: 'CreditFacility', id: string, creditFacilityId: any, collateralizationState: CollateralizationState, status: CreditFacilityStatus, activatedAt: any, balance: { __typename?: 'CreditFacilityBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'Outstanding', usdBalance: any } } }> } } };
 
 export type GetRealtimePriceUpdatesQueryVariables = Exact<{ [key: string]: never; }>;
 
 
 export type GetRealtimePriceUpdatesQuery = { __typename?: 'Query', realtimePrice: { __typename?: 'RealtimePrice', usdCentsPerBtc: any } };
 
 export type GetTransactionHistoryQueryVariables = Exact<{
   first: Scalars['Int']['input'];
   after?: InputMaybe<Scalars['String']['input']>;
 }>;
 
 
diff --git a/core/credit/src/credit_facility/entity.rs b/core/credit/src/credit_facility/entity.rs
index efbbea20197d8a7b1cb453fd8ef8bc370c8d082b..d086805c2d975ff3a321333491237005896cd137 100644
--- a/core/credit/src/credit_facility/entity.rs
+++ b/core/credit/src/credit_facility/entity.rs
@@ -191,50 +191,64 @@ impl CreditFacility {
                     debit_account_id: *disbursal_credit_account_id,
                     facility_amount: *amount,
                     structuring_fee_amount: self.structuring_fee(),
                     customer_type: *customer_type,
                     duration_type: terms.duration.duration_type(),
                 }),
                 _ => None,
             })
             .expect("Initialized event should exist")
     }
 
     pub fn created_at(&self) -> DateTime<Utc> {
         self.events
             .entity_first_persisted_at()
             .expect("entity_first_persisted_at not found")
     }
 
     pub fn matures_at(&self) -> DateTime<Utc> {
         self.maturity_date.start_of_day()
     }
 
     pub(crate) fn structuring_fee(&self) -> UsdCents {
         self.terms.one_time_fee_rate.apply(self.amount)
     }
 
+    pub(crate) fn disburse_all_at_activation(&self) -> bool {
+        self.terms.disburse_all_at_activation()
+    }
+
+    pub(crate) fn activation_disbursal_amount(&self) -> UsdCents {
+        let structuring_fee = self.structuring_fee();
+
+        if structuring_fee >= self.amount {
+            UsdCents::ZERO
+        } else {
+            self.amount - structuring_fee
+        }
+    }
+
     fn is_matured(&self) -> bool {
         self.events
             .iter_all()
             .rev()
             .any(|event| matches!(event, CreditFacilityEvent::Matured { .. }))
     }
 
     pub fn status(&self) -> CreditFacilityStatus {
         if self.is_completed() {
             CreditFacilityStatus::Closed
         } else if self.is_matured() {
             CreditFacilityStatus::Matured
         } else {
             CreditFacilityStatus::Active
         }
     }
 
     pub(crate) fn mature(&mut self) -> Idempotent<()> {
         idempotency_guard!(self.events.iter_all(), CreditFacilityEvent::Matured { .. });
 
         if self.status() == CreditFacilityStatus::Closed {
             return Idempotent::Ignored;
         }
 
         self.events.push(CreditFacilityEvent::Matured {});
@@ -865,50 +879,61 @@ mod test {
                 assert!(
                     credit_facility
                         .start_interest_accrual_cycle()
                         .unwrap()
                         .is_some(),
                 );
                 hydrate_accruals_in_facility(&mut credit_facility);
                 iterate_in_progress_accrual_cycle_to_completion(&mut credit_facility);
             }
             assert!(
                 credit_facility
                     .start_interest_accrual_cycle()
                     .unwrap()
                     .is_none()
             );
         }
     }
 
     #[test]
     fn structuring_fee() {
         let credit_facility = facility_from(initial_events());
         let expected_fee = default_terms().one_time_fee_rate.apply(default_facility());
         assert_eq!(credit_facility.structuring_fee(), expected_fee);
     }
 
+    #[test]
+    fn activation_disbursal_amount_accounts_for_structuring_fee() {
+        let credit_facility = facility_from(initial_events());
+        let expected_amount = credit_facility.amount - credit_facility.structuring_fee();
+
+        assert_eq!(
+            credit_facility.activation_disbursal_amount(),
+            expected_amount
+        );
+    }
+
     mod completion {
         use super::*;
 
         impl From<CreditFacilityReceivable> for ObligationsAmounts {
             fn from(receivable: CreditFacilityReceivable) -> Self {
                 Self {
                     disbursed: receivable.disbursed,
                     interest: receivable.interest,
                 }
             }
         }
 
         #[test]
         fn can_complete() {
             let mut credit_facility = facility_from(initial_events());
 
             let _ = credit_facility
                 .complete(
                     default_price(),
                     default_upgrade_buffer_cvl_pct(),
                     CreditFacilityBalanceSummary {
                         collateral: Satoshis::ZERO,
                         not_yet_due_disbursed_outstanding: UsdCents::ZERO,
                         due_disbursed_outstanding: UsdCents::ZERO,
                         overdue_disbursed_outstanding: UsdCents::ZERO,
diff --git a/core/credit/src/disbursal/mod.rs b/core/credit/src/disbursal/mod.rs
index a4ea0d452e02150af08647d18f492fca7f0840a7..fd01ddfe01e5fd76279f706c865ca2d45efa8b1b 100644
--- a/core/credit/src/disbursal/mod.rs
+++ b/core/credit/src/disbursal/mod.rs
@@ -94,79 +94,80 @@ where
     }
 
     pub async fn begin_op(&self) -> Result<es_entity::DbOp<'_>, DisbursalError> {
         Ok(self.repo.begin_op().await?)
     }
 
     pub(super) async fn create_in_op(
         &self,
         db: &mut es_entity::DbOp<'_>,
         new_disbursal: NewDisbursal,
     ) -> Result<Disbursal, DisbursalError> {
         self.governance
             .start_process(
                 db,
                 new_disbursal.approval_process_id,
                 new_disbursal.approval_process_id.to_string(),
                 crate::APPROVE_DISBURSAL_PROCESS,
             )
             .await?;
         let disbursal = self.repo.create_in_op(db, new_disbursal).await?;
 
         Ok(disbursal)
     }
 
     #[instrument(
-        name = "disbursals.create_first_disbursal_in_op",
+        name = "disbursals.create_activation_disbursal_in_op",
         skip(self, db, credit_facility)
     )]
-    pub(super) async fn create_first_disbursal_in_op(
+    pub(super) async fn create_activation_disbursal_in_op(
         &self,
         db: &mut es_entity::DbOpWithTime<'_>,
         credit_facility: &CreditFacility,
+        amount: UsdCents,
     ) -> Result<(), DisbursalError> {
         let disbursal_id = DisbursalId::new();
         let public_id = self
             .public_ids
             .create_in_op(db, DISBURSAL_REF_TARGET, disbursal_id)
             .await?;
 
         let due_date = credit_facility.maturity_date;
         let overdue_date = credit_facility
             .terms
             .obligation_overdue_duration_from_due
             .map(|d| d.end_date(due_date));
         let liquidation_date = credit_facility
             .terms
             .obligation_liquidation_duration_from_due
             .map(|d| d.end_date(due_date));
 
         let new_disbursal = NewDisbursal::builder()
             .id(disbursal_id)
             .credit_facility_id(credit_facility.id)
             .approval_process_id(credit_facility.id)
-            .amount(credit_facility.structuring_fee())
+            .amount(amount)
             .account_ids(credit_facility.account_ids)
             .disbursal_credit_account_id(credit_facility.disbursal_credit_account_id)
             .due_date(due_date)
             .overdue_date(overdue_date)
             .liquidation_date(liquidation_date)
             .public_id(public_id.id)
             .build()
             .expect("could not build new disbursal");
 
         let mut disbursal = self.repo.create_in_op(db, new_disbursal).await?;
 
         let new_obligation = disbursal
             .approval_process_concluded(LedgerTxId::new(), true, db.now().date_naive())
             .expect("First instance of idempotent action ignored")
             .expect("First disbursal obligation was already created");
 
         self.obligations
             .create_with_jobs_in_op(db, new_obligation)
             .await?;
 
         self.repo.update_in_op(db, &mut disbursal).await?;
 
         Ok(())
     }
 
diff --git a/core/credit/src/processes/activate_credit_facility/mod.rs b/core/credit/src/processes/activate_credit_facility/mod.rs
index 2665b8006f9e75764b572a56c5589d69d80df9d9..86a2b1968923b1ed640a37387ba0611f072756b6 100644
--- a/core/credit/src/processes/activate_credit_facility/mod.rs
+++ b/core/credit/src/processes/activate_credit_facility/mod.rs
@@ -86,53 +86,67 @@ where
     #[instrument(name = "credit.credit_facility.activation.execute", skip(self))]
     pub async fn execute(
         &self,
         id: impl es_entity::RetryableInto<CreditFacilityId>,
     ) -> Result<(), CoreCreditError> {
         let id = id.into();
         let mut op = self
             .credit_facilities
             .begin_op()
             .await?
             .with_db_time()
             .await?;
 
         let ActivationData {
             credit_facility,
             next_accrual_period,
         } = match self.credit_facilities.activate_in_op(&mut op, id).await? {
             ActivationOutcome::Activated(data) => data,
             ActivationOutcome::Ignored => {
                 return Ok(());
             }
         };
 
         if !credit_facility.structuring_fee().is_zero() {
             self.disbursals
-                .create_first_disbursal_in_op(&mut op, &credit_facility)
+                .create_activation_disbursal_in_op(
+                    &mut op,
+                    &credit_facility,
+                    credit_facility.structuring_fee(),
+                )
                 .await?;
         }
 
+        if credit_facility.disburse_all_at_activation() {
+            let activation_amount = credit_facility.activation_disbursal_amount();
+
+            if !activation_amount.is_zero() {
+                self.disbursals
+                    .create_activation_disbursal_in_op(&mut op, &credit_facility, activation_amount)
+                    .await?;
+            }
+        }
+
         let accrual_id = credit_facility
             .interest_accrual_cycle_in_progress()
             .expect("First accrual not found")
             .id;
 
         self.jobs
             .create_and_spawn_at_in_op(
                 &mut op,
                 accrual_id,
                 interest_accruals::InterestAccrualJobConfig::<Perms, E> {
                     credit_facility_id: id,
                     _phantom: std::marker::PhantomData,
                 },
                 next_accrual_period.end,
             )
             .await?;
 
         self.ledger
             .handle_facility_activation(op, credit_facility.activation_data())
             .await?;
 
         Ok(())
     }
 }
diff --git a/core/credit/src/terms/value.rs b/core/credit/src/terms/value.rs
index b5bb3473fa3ae445c5e58e49a64fffcab6251c60..f70a32a9d72a7ecf833e367eb3d6ccd92f1d4a8a 100644
--- a/core/credit/src/terms/value.rs
+++ b/core/credit/src/terms/value.rs
@@ -220,75 +220,85 @@ impl InterestInterval {
                 .expect("should return a valid date time"),
         }
     }
 }
 
 #[derive(Builder, Debug, Serialize, Deserialize, Clone, Copy)]
 #[cfg_attr(feature = "json-schema", derive(JsonSchema))]
 #[builder(build_fn(validate = "Self::validate", error = "TermsError"))]
 pub struct TermValues {
     #[builder(setter(into))]
     pub annual_rate: AnnualRatePct,
     #[builder(setter(into))]
     pub duration: FacilityDuration,
     #[builder(setter(into))]
     pub interest_due_duration_from_accrual: ObligationDuration,
     #[builder(setter(into))]
     pub obligation_overdue_duration_from_due: Option<ObligationDuration>,
     #[builder(setter(into))]
     pub obligation_liquidation_duration_from_due: Option<ObligationDuration>,
     #[builder(setter(into))]
     pub accrual_cycle_interval: InterestInterval,
     #[builder(setter(into))]
     pub accrual_interval: InterestInterval,
     #[builder(setter(into))]
     pub one_time_fee_rate: OneTimeFeeRatePct,
+    #[builder(default)]
+    pub disburse_all_at_activation: bool,
     #[builder(setter(into))]
     pub liquidation_cvl: CVLPct,
     #[builder(setter(into))]
     pub margin_call_cvl: CVLPct,
     #[builder(setter(into))]
     pub initial_cvl: CVLPct,
 }
 
 impl TermValues {
     pub fn maturity_date(&self, start_date: DateTime<Utc>) -> EffectiveDate {
         self.duration.maturity_date(start_date)
     }
 
     pub fn is_disbursal_allowed(
         &self,
         balance: CreditFacilityBalanceSummary,
         amount: UsdCents,
         price: PriceOfOneBTC,
     ) -> bool {
+        if self.disburse_all_at_activation && balance.any_disbursed() {
+            return false;
+        }
+
         let cvl = balance
             .with_added_disbursal(amount)
             .outstanding_amount_cvl(price);
         cvl >= self.margin_call_cvl
     }
 
+    pub fn disburse_all_at_activation(&self) -> bool {
+        self.disburse_all_at_activation
+    }
+
     pub fn is_proposal_completion_allowed(
         &self,
         balance: CreditFacilityProposalBalanceSummary,
         price: PriceOfOneBTC,
     ) -> bool {
         let total = balance.facility_amount_cvl(price);
         total >= self.margin_call_cvl
     }
 
     pub fn builder() -> TermValuesBuilder {
         TermValuesBuilder::default()
     }
 
     pub fn required_collateral(
         &self,
         desired_principal: UsdCents,
         price: PriceOfOneBTC,
     ) -> Satoshis {
         let collateral_value = self.initial_cvl.scale(desired_principal);
         price.cents_to_sats_round_up(collateral_value)
     }
 
     pub fn collateralization(&self, cvl: CVLPct) -> CollateralizationState {
         let margin_call_cvl = self.margin_call_cvl;
         let liquidation_cvl = self.liquidation_cvl;
@@ -864,26 +874,56 @@ mod test {
             principal,
             required_collateral - Satoshis::from(1),
         );
 
         assert!(!terms.is_proposal_completion_allowed(balance, price));
 
         let balance = CreditFacilityProposalBalanceSummary::new(principal, required_collateral);
 
         assert!(terms.is_proposal_completion_allowed(balance, price));
     }
 
     #[test]
     fn check_disbursal_allowed() {
         let terms = default_terms();
         let price = PriceOfOneBTC::new(UsdCents::try_from_usd(dec!(100_000)).unwrap());
         let principal = UsdCents::try_from_usd(dec!(100_000)).unwrap();
         let mut balance = default_balances(principal);
         balance.collateral = Satoshis::try_from_btc(dec!(1)).unwrap();
 
         let amount = UsdCents::try_from_usd(dec!(80_001)).unwrap();
         assert!(!terms.is_disbursal_allowed(balance, amount, price));
 
         let amount = UsdCents::try_from_usd(dec!(80_000)).unwrap();
         assert!(terms.is_disbursal_allowed(balance, amount, price));
     }
+
+    #[test]
+    fn activation_only_disbursal_blocks_additional_draws() {
+        let terms = TermValues::builder()
+            .annual_rate(dec!(12))
+            .initial_cvl(dec!(140))
+            .margin_call_cvl(dec!(125))
+            .liquidation_cvl(dec!(105))
+            .duration(FacilityDuration::Months(3))
+            .interest_due_duration_from_accrual(ObligationDuration::Days(0))
+            .obligation_overdue_duration_from_due(ObligationDuration::Days(50))
+            .obligation_liquidation_duration_from_due(None)
+            .accrual_interval(InterestInterval::EndOfDay)
+            .accrual_cycle_interval(InterestInterval::EndOfMonth)
+            .one_time_fee_rate(dec!(0.01))
+            .disburse_all_at_activation(true)
+            .build()
+            .unwrap();
+
+        let price = PriceOfOneBTC::new(UsdCents::try_from_usd(dec!(100_000)).unwrap());
+        let principal = UsdCents::try_from_usd(dec!(100_000)).unwrap();
+        let mut balance = default_balances(principal);
+        balance.collateral = Satoshis::try_from_btc(dec!(1)).unwrap();
+
+        let amount = UsdCents::try_from_usd(dec!(20_000)).unwrap();
+        balance.disbursed = amount;
+        balance.facility_remaining = principal - amount;
+
+        assert!(!terms.is_disbursal_allowed(balance, amount, price));
+    }
 }
diff --git a/dev/entity-rollups/Cargo.lock b/dev/entity-rollups/Cargo.lock
index 496cdc2b3905161c3ce12b8e34dc5b35d54700dc..275a3163f5f37578179a03af7b7ea649c34b8da9 100644
--- a/dev/entity-rollups/Cargo.lock
+++ b/dev/entity-rollups/Cargo.lock
@@ -127,53 +127,53 @@ dependencies = [
  "utf8parse",
 ]
 
 [[package]]
 name = "anstyle-query"
 version = "1.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9e231f6134f61b71076a3eab506c379d4f36122f2af15a9ff04415ea4c3339e2"
 dependencies = [
  "windows-sys 0.60.2",
 ]
 
 [[package]]
 name = "anstyle-wincon"
 version = "3.0.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "3e0633414522a32ffaac8ac6cc8f748e090c5717661fddeea04219e2344f5f2a"
 dependencies = [
  "anstyle",
  "once_cell_polyfill",
  "windows-sys 0.60.2",
 ]
 
 [[package]]
 name = "anyhow"
-version = "1.0.99"
+version = "1.0.100"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b0674a1ddeecb70197781e945de4b3b8ffb61fa939a5597bcf48503737663100"
+checksum = "a23eb6b1614318a8071c9b2521f36b424b2c83db5eb3a0fead4a6c0809af6e61"
 
 [[package]]
 name = "arrayvec"
 version = "0.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50"
 
 [[package]]
 name = "ascii-canvas"
 version = "3.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8824ecca2e851cec16968d54a01dd372ef8f95b244fb84b84e70128be347c3c6"
 dependencies = [
  "term",
 ]
 
 [[package]]
 name = "async-graphql"
 version = "7.0.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "036618f842229ba0b89652ffe425f96c7c16a49f7e3cb23b56fca7f61fd74980"
 dependencies = [
  "async-graphql-derive",
  "async-graphql-parser",
  "async-graphql-value",
@@ -275,222 +275,220 @@ dependencies = [
 [[package]]
 name = "atoi"
 version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f28d99ec8bfea296261ca1af174f24225171fea9664ba9003cbebee704810528"
 dependencies = [
  "num-traits",
 ]
 
 [[package]]
 name = "atomic-waker"
 version = "1.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0"
 
 [[package]]
 name = "audit"
 version = "0.0.0"
 dependencies = [
  "async-trait",
  "chrono",
  "es-entity",
  "schemars 1.0.4",
  "serde",
  "sqlx",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
 ]
 
 [[package]]
 name = "authz"
 version = "0.0.0"
 dependencies = [
  "async-trait",
  "audit",
  "es-entity",
  "schemars 1.0.4",
  "sqlx",
  "sqlx-adapter",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tracing",
 ]
 
 [[package]]
 name = "autocfg"
 version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c08606f8c3cbf4ce6ec8e28fb0014a2c086708fe954eaa885384a6165172e7e8"
 
 [[package]]
 name = "autotools"
 version = "0.2.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ef941527c41b0fc0dd48511a8154cd5fc7e29200a0ff8b7203c5d777dbc795cf"
 dependencies = [
  "cc",
 ]
 
 [[package]]
 name = "axum"
 version = "0.7.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "edca88bc138befd0323b20752846e6587272d3b03b0343c8ea28a6f819e6e71f"
 dependencies = [
  "async-trait",
  "axum-core 0.4.5",
  "bytes",
  "futures-util",
  "http",
  "http-body",
  "http-body-util",
  "itoa",
  "matchit 0.7.3",
  "memchr",
  "mime",
  "percent-encoding",
  "pin-project-lite",
  "rustversion",
  "serde",
  "sync_wrapper",
  "tower",
  "tower-layer",
  "tower-service",
  "tracing",
 ]
 
 [[package]]
 name = "axum"
-version = "0.8.4"
+version = "0.8.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "021e862c184ae977658b36c4500f7feac3221ca5da43e3f25bd04ab6c79a29b5"
+checksum = "8a18ed336352031311f4e0b4dd2ff392d4fbb370777c9d18d7fc9d7359f73871"
 dependencies = [
- "axum-core 0.5.2",
+ "axum-core 0.5.5",
  "bytes",
  "futures-util",
  "http",
  "http-body",
  "http-body-util",
  "itoa",
  "matchit 0.8.4",
  "memchr",
  "mime",
  "percent-encoding",
  "pin-project-lite",
- "rustversion",
- "serde",
+ "serde_core",
  "sync_wrapper",
  "tower",
  "tower-layer",
  "tower-service",
  "tracing",
 ]
 
 [[package]]
 name = "axum-core"
 version = "0.4.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "09f2bd6146b97ae3359fa0cc6d6b376d9539582c7b4220f041a33ec24c226199"
 dependencies = [
  "async-trait",
  "bytes",
  "futures-util",
  "http",
  "http-body",
  "http-body-util",
  "mime",
  "pin-project-lite",
  "rustversion",
  "sync_wrapper",
  "tower-layer",
  "tower-service",
  "tracing",
 ]
 
 [[package]]
 name = "axum-core"
-version = "0.5.2"
+version = "0.5.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "68464cd0412f486726fb3373129ef5d2993f90c34bc2bc1c1e9943b2f4fc7ca6"
+checksum = "59446ce19cd142f8833f856eb31f3eb097812d1479ab224f54d72428ca21ea22"
 dependencies = [
  "bytes",
  "futures-core",
  "http",
  "http-body",
  "http-body-util",
  "mime",
  "pin-project-lite",
- "rustversion",
  "sync_wrapper",
  "tower-layer",
  "tower-service",
  "tracing",
 ]
 
 [[package]]
 name = "axum-extra"
 version = "0.9.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c794b30c904f0a1c2fb7740f7df7f7972dfaa14ef6f57cb6178dc63e5dca2f04"
 dependencies = [
  "axum 0.7.9",
  "axum-core 0.4.5",
  "bytes",
  "futures-util",
  "headers",
  "http",
  "http-body",
  "http-body-util",
  "mime",
  "pin-project-lite",
  "serde",
  "tower",
  "tower-layer",
  "tower-service",
 ]
 
 [[package]]
 name = "axum-extra"
-version = "0.10.1"
+version = "0.10.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "45bf463831f5131b7d3c756525b305d40f1185b688565648a92e1392ca35713d"
+checksum = "9963ff19f40c6102c76756ef0a46004c0d58957d87259fc9208ff8441c12ab96"
 dependencies = [
- "axum 0.8.4",
- "axum-core 0.5.2",
+ "axum 0.8.6",
+ "axum-core 0.5.5",
  "bytes",
  "futures-util",
  "headers",
  "http",
  "http-body",
  "http-body-util",
  "mime",
  "pin-project-lite",
  "rustversion",
- "serde",
- "tower",
+ "serde_core",
  "tower-layer",
  "tower-service",
+ "tracing",
 ]
 
 [[package]]
 name = "backtrace"
 version = "0.3.75"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6806a6321ec58106fea15becdad98371e28d92ccbc7c8f1b3b6dd724fe8f1002"
 dependencies = [
  "addr2line",
  "cfg-if",
  "libc",
  "miniz_oxide",
  "object",
  "rustc-demangle",
  "windows-targets 0.52.6",
 ]
 
 [[package]]
 name = "base16ct"
 version = "0.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4c7f02d4ea65f2c1853089ffd8d2787bdbc63de2f0d29dedbcf8ccdfa0ccd4cf"
 
 [[package]]
 name = "base64"
@@ -548,51 +546,51 @@ checksum = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"
 name = "bitflags"
 version = "2.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2261d10cca569e4643e526d8dc2e62e433cc8aba21ab764233731f8d369bf394"
 dependencies = [
  "serde",
 ]
 
 [[package]]
 name = "bitgo"
 version = "0.0.0"
 dependencies = [
  "aes",
  "base64 0.22.1",
  "bip32",
  "ccm",
  "chrono",
  "hex",
  "hmac",
  "pbkdf2",
  "rand 0.9.2",
  "reqwest",
  "serde",
  "serde_json",
  "sha2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "url",
 ]
 
 [[package]]
 name = "bitmaps"
 version = "2.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "031043d04099746d8db04daf1fa424b2bc8bd69d92b25962dcde24da39ab64a2"
 dependencies = [
  "typenum",
 ]
 
 [[package]]
 name = "bitvec"
 version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c"
 dependencies = [
  "funty",
  "radium",
  "tap",
  "wyz",
 ]
 
@@ -680,160 +678,160 @@ version = "1.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b"
 
 [[package]]
 name = "bytes"
 version = "1.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a"
 dependencies = [
  "serde",
 ]
 
 [[package]]
 name = "cached"
 version = "0.55.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b0839c297f8783316fcca9d90344424e968395413f0662a5481f79c6648bbc14"
 dependencies = [
  "ahash 0.8.12",
  "async-trait",
  "cached_proc_macro",
  "cached_proc_macro_types",
  "futures",
  "hashbrown 0.14.5",
  "once_cell",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "web-time",
 ]
 
 [[package]]
 name = "cached_proc_macro"
 version = "0.24.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "673992d934f0711b68ebb3e1b79cdc4be31634b37c98f26867ced0438ca5c603"
 dependencies = [
  "darling 0.20.11",
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "cached_proc_macro_types"
 version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ade8366b8bd5ba243f0a58f036cc0ca8a2f069cff1a2351ef1cac6b083e16fc0"
 
 [[package]]
 name = "cala-cel-interpreter"
-version = "0.11.4"
+version = "0.11.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "da1e323297bb61ea6f51eb2701bae54b6324ca3a07a88a13fedf7cf29c114448"
+checksum = "322f0afde60de9d7c3290293863487db93e86e06402b79ce2692e9abb35cb3ba"
 dependencies = [
  "cala-cel-parser",
  "chrono",
  "lazy_static",
  "rust_decimal",
  "serde",
  "serde_json",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "uuid",
 ]
 
 [[package]]
 name = "cala-cel-parser"
-version = "0.11.4"
+version = "0.11.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "550a1cbc23eabab6f1638aaedbda9e17e966a2da1372f4de9bf197aaa6d560a5"
+checksum = "d6bc1066c3abd2a1862bec1d62094e574a1ac1569977a36030f3b34dcb996988"
 dependencies = [
  "lalrpop",
  "lalrpop-util",
 ]
 
 [[package]]
 name = "cala-ledger"
-version = "0.11.4"
+version = "0.11.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e319d9670d8740a58e0bcc6a0d405467026d253ed31e42ef6afcf0095a42baa3"
+checksum = "6a8ecff9b3fe6530a62aa89c6acb33d19a6be4ee9d1455eb4e132e8b0d563c1d"
 dependencies = [
  "cached",
  "cala-cel-interpreter",
  "cala-ledger-core-types",
  "cala-tracing",
  "chrono",
  "derive_builder",
  "es-entity",
  "futures",
  "job 0.1.12",
  "opentelemetry",
  "prost",
  "prost-wkt-types",
  "protobuf-src",
  "regex",
  "rust_decimal",
  "serde",
  "serde_json",
  "sqlx",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tokio-stream",
  "tonic",
  "tonic-build",
  "tonic-health",
  "tracing",
  "tracing-opentelemetry",
  "uuid",
 ]
 
 [[package]]
 name = "cala-ledger-core-types"
-version = "0.11.4"
+version = "0.11.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "70c4fad1837909a56ee1d5caaed3c399a0e056cbb55d02bc231bfc00f342a8e7"
+checksum = "6e84f07581702194e079671d0778743132ea4b246d4313501e5d4effabad945e"
 dependencies = [
  "cala-cel-interpreter",
  "chrono",
  "derive_builder",
  "es-entity",
  "rust_decimal",
  "rusty-money",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "sqlx",
  "strum 0.26.3",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "uuid",
 ]
 
 [[package]]
 name = "cala-tracing"
-version = "0.11.4"
+version = "0.11.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f889d41ee2a36bf2b75737c0bd26a9a8f9789f26a4f527b42efbd1d76ead8be2"
+checksum = "971f0f0d0871ebdd5f7b004bdc9cf005005d5d8c9d2d921a589f954cd8a1e295"
 dependencies = [
  "anyhow",
  "axum-extra 0.9.6",
  "opentelemetry",
  "opentelemetry-otlp",
  "opentelemetry-semantic-conventions",
  "opentelemetry_sdk",
  "serde",
  "serde_json",
  "tonic",
  "tracing",
  "tracing-opentelemetry",
  "tracing-subscriber",
 ]
 
 [[package]]
 name = "casbin"
 version = "2.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a100183440478aa2b64e6f432295fa90c052d53011c9799b655b7283b6e6707c"
 dependencies = [
  "async-trait",
  "fixedbitset 0.4.2",
  "getrandom 0.2.16",
  "hashlink 0.9.1",
@@ -966,51 +964,51 @@ name = "clap_derive"
 version = "4.5.47"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bbfd7eae0b0f1a6e63d4b13c9c478de77c2eb546fba158ad50b4203dc24b9f9c"
 dependencies = [
  "heck",
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "clap_lex"
 version = "0.7.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b94f61472cee1439c0b966b47e3aca9ae07e45d070759512cd390ea2bebc6675"
 
 [[package]]
 name = "cloud-storage"
 version = "0.0.0"
 dependencies = [
  "anyhow",
  "async-trait",
  "google-cloud-storage",
  "reqwest",
  "serde",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
 ]
 
 [[package]]
 name = "colorchoice"
 version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b05b61dc5112cbb17e4b6cd61790d9845d13888356391624cbe7e41efeac1e75"
 
 [[package]]
 name = "colored"
 version = "3.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e"
 dependencies = [
  "windows-sys 0.59.0",
 ]
 
 [[package]]
 name = "concurrent-queue"
 version = "2.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4ca0197aee26d1ae37445ee532fefce43251d24cc7c166799f4d46817f1d3973"
 dependencies = [
  "crossbeam-utils",
@@ -1044,243 +1042,243 @@ dependencies = [
 
 [[package]]
 name = "convert_case"
 version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "baaaa0ecca5b51987b9423ccdc971514dd8b0bb7b4060b983d3664dad3f1f89f"
 dependencies = [
  "unicode-segmentation",
 ]
 
 [[package]]
 name = "core-access"
 version = "0.0.0"
 dependencies = [
  "audit",
  "authz",
  "chrono",
  "derive_builder",
  "es-entity",
  "governance",
  "outbox",
  "schemars 1.0.4",
  "serde",
  "sqlx",
  "strum 0.27.2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
 ]
 
 [[package]]
 name = "core-accounting"
 version = "0.0.0"
 dependencies = [
  "anyhow",
  "async-trait",
  "audit",
  "authz",
  "base64 0.22.1",
  "cala-ledger",
  "chrono",
  "cloud-storage",
  "core-money",
  "csv",
  "derive_builder",
  "document-storage",
  "es-entity",
  "job 0.0.0",
  "rust_decimal",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "sqlx",
  "strum 0.27.2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tracing",
  "uuid",
 ]
 
 [[package]]
 name = "core-credit"
 version = "0.0.0"
 dependencies = [
  "async-trait",
  "audit",
  "authz",
  "cala-ledger",
  "chrono",
  "cloud-storage",
  "core-accounting",
  "core-custody",
  "core-customer",
  "core-money",
  "core-price",
  "derive_builder",
  "es-entity",
  "futures",
  "governance",
  "job 0.0.0",
  "outbox",
  "public-id",
  "rust_decimal",
  "rust_decimal_macros",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "serde_with",
  "sqlx",
  "strum 0.27.2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "uuid",
 ]
 
 [[package]]
 name = "core-custody"
 version = "0.0.0"
 dependencies = [
  "async-trait",
  "audit",
  "authz",
  "bitgo",
  "bytes",
  "chacha20poly1305",
  "chrono",
  "core-money",
  "derive_builder",
  "es-entity",
  "hex",
  "hmac",
  "http",
  "komainu",
  "outbox",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "sha2",
  "sqlx",
  "strum 0.27.2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "uuid",
 ]
 
 [[package]]
 name = "core-customer"
 version = "0.0.0"
 dependencies = [
  "audit",
  "authz",
  "chrono",
  "derive_builder",
  "document-storage",
  "es-entity",
  "governance",
  "outbox",
  "public-id",
  "schemars 1.0.4",
  "serde",
  "sqlx",
  "strum 0.27.2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
 ]
 
 [[package]]
 name = "core-deposit"
 version = "0.0.0"
 dependencies = [
  "async-trait",
  "audit",
  "authz",
  "base64 0.22.1",
  "cala-ledger",
  "chrono",
  "cloud-storage",
  "core-accounting",
  "core-customer",
  "core-money",
  "derive_builder",
  "es-entity",
  "futures",
  "governance",
  "job 0.0.0",
  "outbox",
  "public-id",
  "rust_decimal",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "sqlx",
  "strum 0.27.2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "uuid",
 ]
 
 [[package]]
 name = "core-foundation"
 version = "0.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f"
 dependencies = [
  "core-foundation-sys",
  "libc",
 ]
 
 [[package]]
 name = "core-foundation-sys"
 version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
 
 [[package]]
 name = "core-money"
 version = "0.0.0"
 dependencies = [
  "rust_decimal",
  "rust_decimal_macros",
  "schemars 1.0.4",
  "serde",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
 ]
 
 [[package]]
 name = "core-price"
 version = "0.0.0"
 dependencies = [
  "anyhow",
  "cached",
  "core-money",
  "reqwest",
  "rust_decimal",
  "rust_decimal_macros",
  "schemars 1.0.4",
  "serde",
  "serde_json",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
 ]
 
 [[package]]
 name = "cpufeatures"
 version = "0.2.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "59ed5838eebb26a2bb2e58f6d5b5316989ae9d08bab10e0e6d103e656d1b0280"
 dependencies = [
  "libc",
 ]
 
 [[package]]
 name = "crc"
 version = "3.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9710d3b3739c2e349eb44fe848ad0b7c8cb1e42bd87ee49371df2f7acaf3e675"
 dependencies = [
  "crc-catalog",
 ]
 
 [[package]]
 name = "crc-catalog"
 version = "2.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -1515,51 +1513,51 @@ dependencies = [
  "winapi",
 ]
 
 [[package]]
 name = "displaydoc"
 version = "0.2.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0"
 dependencies = [
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "document-storage"
 version = "0.0.0"
 dependencies = [
  "chrono",
  "cloud-storage",
  "derive_builder",
  "es-entity",
  "schemars 1.0.4",
  "serde",
  "sqlx",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
 ]
 
 [[package]]
 name = "dotenvy"
 version = "0.15.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1aaf95b3e5c8f23aa320147307562d361db0ae0d51242340f558153b4eb2439b"
 
 [[package]]
 name = "dyn-clone"
 version = "1.0.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d0881ea181b1df73ff77ffaaf9c7544ecc11e82fba9b5f27b262a3c73a332555"
 
 [[package]]
 name = "ecdsa"
 version = "0.16.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ee27f32b5c5292967d2d4a9d7f1e0b0aed2c15daded5a60300e4abb9d8020bca"
 dependencies = [
  "der",
  "digest",
  "elliptic-curve",
  "rfc6979",
@@ -1645,77 +1643,77 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f"
 
 [[package]]
 name = "erased-serde"
 version = "0.4.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "259d404d09818dec19332e31d94558aeb442fea04c817006456c24b5460bbd4b"
 dependencies = [
  "serde",
  "serde_core",
  "typeid",
 ]
 
 [[package]]
 name = "errno"
 version = "0.3.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "39cab71617ae0d63f51a36d69f866391735b51691dbda63cf6f96d042b63efeb"
 dependencies = [
  "libc",
  "windows-sys 0.61.0",
 ]
 
 [[package]]
 name = "es-entity"
-version = "0.9.2"
+version = "0.9.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d942257b6b33f609759a619d7dd28b6443924f825913624be8acbecfa257965a"
+checksum = "c8d0ce604e9ee0adb5559712228881fed7287b0d30fc6d3933cb3afef4e4d952"
 dependencies = [
  "async-graphql",
  "base64 0.22.1",
  "chrono",
  "derive_builder",
  "es-entity-macros",
  "im",
  "opentelemetry",
  "pin-project",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "sqlx",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "tracing-opentelemetry",
  "uuid",
 ]
 
 [[package]]
 name = "es-entity-macros"
-version = "0.9.2"
+version = "0.9.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "79572b902d034646a67c418254479ca53db80b066d718d4fbd2d9e414e54a728"
+checksum = "5ef6ff2a108b3fb36081d739a2bd4a2e014d66d771162ca8243746759626a136"
 dependencies = [
  "convert_case",
  "darling 0.21.3",
  "pluralizer",
  "proc-macro2",
  "quote",
  "regex",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "etcetera"
 version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "136d1b5283a1ab77bd9257427ffd09d8667ced0570b6f938942bc7568ed5b943"
 dependencies = [
  "cfg-if",
  "home",
  "windows-sys 0.48.0",
 ]
 
 [[package]]
 name = "event-listener"
 version = "5.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -2015,99 +2013,99 @@ dependencies = [
 ]
 
 [[package]]
 name = "google-cloud-token"
 version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8f49c12ba8b21d128a2ce8585955246977fbce4415f680ebf9199b6f9d6d725f"
 dependencies = [
  "async-trait",
 ]
 
 [[package]]
 name = "governance"
 version = "0.0.0"
 dependencies = [
  "audit",
  "authz",
  "chrono",
  "derive_builder",
  "es-entity",
  "outbox",
  "schemars 1.0.4",
  "serde",
  "sqlx",
  "strum 0.27.2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "uuid",
 ]
 
 [[package]]
 name = "group"
 version = "0.13.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f0f9ef7462f7c099f518d754361858f86d8a07af53ba9af0fe635bbccb151a63"
 dependencies = [
  "ff",
  "rand_core 0.6.4",
  "subtle",
 ]
 
 [[package]]
 name = "h2"
 version = "0.4.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f3c0b69cfcb4e1b9f1bf2f53f95f766e4661169728ec61cd3fe5a0166f2d1386"
 dependencies = [
  "atomic-waker",
  "bytes",
  "fnv",
  "futures-core",
  "futures-sink",
  "http",
  "indexmap 2.11.1",
  "slab",
  "tokio",
  "tokio-util",
  "tracing",
 ]
 
 [[package]]
 name = "handlebars"
 version = "6.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "759e2d5aea3287cb1190c8ec394f42866cb5bf74fcbf213f354e3c856ea26098"
 dependencies = [
  "derive_builder",
  "log",
  "num-order",
  "pest",
  "pest_derive",
  "serde",
  "serde_json",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
 ]
 
 [[package]]
 name = "hashbrown"
 version = "0.12.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888"
 dependencies = [
  "ahash 0.7.8",
 ]
 
 [[package]]
 name = "hashbrown"
 version = "0.14.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1"
 dependencies = [
  "ahash 0.8.12",
  "allocator-api2",
 ]
 
 [[package]]
 name = "hashbrown"
 version = "0.15.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -2576,74 +2574,74 @@ checksum = "2b192c782037fadd9cfa75548310488aabdbf3d2da73885b31bd0abd03351285"
 dependencies = [
  "either",
 ]
 
 [[package]]
 name = "itoa"
 version = "1.0.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c"
 
 [[package]]
 name = "job"
 version = "0.0.0"
 dependencies = [
  "async-trait",
  "chrono",
  "derive_builder",
  "es-entity",
  "futures",
  "rand 0.9.2",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "serde_with",
  "sqlx",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tracing",
  "uuid",
 ]
 
 [[package]]
 name = "job"
 version = "0.1.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fbc97547bab9416fb9e5490474afef9f452611dbff8a478cf9dc3cf5bb093bdb"
 dependencies = [
  "async-trait",
  "chrono",
  "derive_builder",
  "es-entity",
  "futures",
  "rand 0.9.2",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "serde_with",
  "sqlx",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tracing",
  "uuid",
 ]
 
 [[package]]
 name = "js-sys"
 version = "0.3.78"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0c0b063578492ceec17683ef2f8c5e89121fbd0b172cbc280635ab7567db2738"
 dependencies = [
  "once_cell",
  "wasm-bindgen",
 ]
 
 [[package]]
 name = "jsonwebtoken"
 version = "9.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5a87cc7a48537badeae96744432de36f4be2b4a34a05a5ef32e9dd8a1c169dde"
 dependencies = [
  "base64 0.22.1",
  "js-sys",
  "pem",
  "ring",
@@ -2657,51 +2655,51 @@ name = "k256"
 version = "0.13.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f6e3919bbaa2945715f0bb6d3934a173d1e9a59ac23767fbaaef277265a7411b"
 dependencies = [
  "cfg-if",
  "ecdsa",
  "elliptic-curve",
  "sha2",
 ]
 
 [[package]]
 name = "komainu"
 version = "0.0.0"
 dependencies = [
  "base64 0.22.1",
  "chrono",
  "hex",
  "hmac",
  "p256",
  "pkcs8",
  "reqwest",
  "rust_decimal",
  "serde",
  "serde_json",
  "sha2",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tracing",
  "url",
 ]
 
 [[package]]
 name = "lalrpop"
 version = "0.20.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "55cb077ad656299f160924eb2912aa147d7339ea7d69e1b5517326fdcec3c1ca"
 dependencies = [
  "ascii-canvas",
  "bit-set",
  "ena",
  "itertools 0.11.0",
  "lalrpop-util",
  "petgraph 0.6.5",
  "pico-args",
  "regex",
  "regex-syntax",
  "string_cache",
  "term",
  "tiny-keccak",
  "unicode-xid",
  "walkdir",
@@ -3018,117 +3016,117 @@ dependencies = [
  "portable-atomic",
 ]
 
 [[package]]
 name = "once_cell_polyfill"
 version = "1.70.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a4895175b425cb1f87721b59f0f286c2092bd4af812243672510e1ac53e2e0ad"
 
 [[package]]
 name = "opaque-debug"
 version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381"
 
 [[package]]
 name = "opentelemetry"
 version = "0.30.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "aaf416e4cb72756655126f7dd7bb0af49c674f4c1b9903e80c009e0c37e552e6"
 dependencies = [
  "futures-core",
  "futures-sink",
  "js-sys",
  "pin-project-lite",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
 ]
 
 [[package]]
 name = "opentelemetry-http"
 version = "0.30.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "50f6639e842a97dbea8886e3439710ae463120091e2e064518ba8e716e6ac36d"
 dependencies = [
  "async-trait",
  "bytes",
  "http",
  "opentelemetry",
  "reqwest",
 ]
 
 [[package]]
 name = "opentelemetry-otlp"
 version = "0.30.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "dbee664a43e07615731afc539ca60c6d9f1a9425e25ca09c57bc36c87c55852b"
 dependencies = [
  "http",
  "opentelemetry",
  "opentelemetry-http",
  "opentelemetry-proto",
  "opentelemetry_sdk",
  "prost",
  "reqwest",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tonic",
 ]
 
 [[package]]
 name = "opentelemetry-proto"
 version = "0.30.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2e046fd7660710fe5a05e8748e70d9058dc15c94ba914e7c4faa7c728f0e8ddc"
 dependencies = [
  "opentelemetry",
  "opentelemetry_sdk",
  "prost",
  "tonic",
 ]
 
 [[package]]
 name = "opentelemetry-semantic-conventions"
 version = "0.30.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "83d059a296a47436748557a353c5e6c5705b9470ef6c95cfc52c21a8814ddac2"
 
 [[package]]
 name = "opentelemetry_sdk"
 version = "0.30.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "11f644aa9e5e31d11896e024305d7e3c98a88884d9f8919dbf37a9991bc47a4b"
 dependencies = [
  "futures-channel",
  "futures-executor",
  "futures-util",
  "opentelemetry",
  "percent-encoding",
  "rand 0.9.2",
  "serde_json",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tokio-stream",
 ]
 
 [[package]]
 name = "outbox"
 version = "0.0.0"
 dependencies = [
  "chrono",
  "es-entity",
  "futures",
  "schemars 1.0.4",
  "serde",
  "serde_json",
  "sqlx",
  "tokio",
  "tokio-stream",
  "tracing-utils",
 ]
 
 [[package]]
 name = "p256"
 version = "0.13.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c9863ad85fa8f4460f9c48cb909d38a0d689dba1f6f6988a5e3e0d31071bcd4b"
@@ -3188,51 +3186,51 @@ dependencies = [
  "serde",
 ]
 
 [[package]]
 name = "pem-rfc7468"
 version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "88b39c9bfcfc231068454382784bb460aae594343fb030d46e9f50a645418412"
 dependencies = [
  "base64ct",
 ]
 
 [[package]]
 name = "percent-encoding"
 version = "2.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9b4f627cb1b25917193a259e49bdad08f671f8d9708acfd5fe0a8c1455d87220"
 
 [[package]]
 name = "pest"
 version = "2.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "21e0a3a33733faeaf8651dfee72dd0f388f0c8e5ad496a3478fa5a922f49cfa8"
 dependencies = [
  "memchr",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "ucd-trie",
 ]
 
 [[package]]
 name = "pest_derive"
 version = "2.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bc58706f770acb1dbd0973e6530a3cff4746fb721207feb3a8a6064cd0b6c663"
 dependencies = [
  "pest",
  "pest_generator",
 ]
 
 [[package]]
 name = "pest_generator"
 version = "2.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6d4f36811dfe07f7b8573462465d5cb8965fffc2e71ae377a33aecf14c2c9a2f"
 dependencies = [
  "pest",
  "pest_meta",
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
@@ -3567,90 +3565,90 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0738ccf7ea06b608c10564b31debd4f5bc5e197fc8bfe088f68ae5ce81e7a4f1"
 dependencies = [
  "ptr_meta_derive",
 ]
 
 [[package]]
 name = "ptr_meta_derive"
 version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "16b845dbfca988fa33db069c0e230574d15a3088f147a87b64c7589eb662c9ac"
 dependencies = [
  "proc-macro2",
  "quote",
  "syn 1.0.109",
 ]
 
 [[package]]
 name = "public-id"
 version = "0.0.0"
 dependencies = [
  "derive_builder",
  "es-entity",
  "schemars 1.0.4",
  "serde",
  "sqlx",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
 ]
 
 [[package]]
 name = "quinn"
 version = "0.11.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b9e20a958963c291dc322d98411f541009df2ced7b5a4f2bd52337638cfccf20"
 dependencies = [
  "bytes",
  "cfg_aliases",
  "pin-project-lite",
  "quinn-proto",
  "quinn-udp",
  "rustc-hash",
  "rustls",
  "socket2 0.6.0",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tracing",
  "web-time",
 ]
 
 [[package]]
 name = "quinn-proto"
 version = "0.11.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f1906b49b0c3bc04b5fe5d86a77925ae6524a19b816ae38ce1e426255f1d8a31"
 dependencies = [
  "bytes",
  "getrandom 0.3.3",
  "lru-slab",
  "rand 0.9.2",
  "ring",
  "rustc-hash",
  "rustls",
  "rustls-pki-types",
  "slab",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tinyvec",
  "tracing",
  "web-time",
 ]
 
 [[package]]
 name = "quinn-udp"
 version = "0.5.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "addec6a0dcad8a8d96a771f815f0eaf55f9d1805756410b39f5fa81332574cbd"
 dependencies = [
  "cfg_aliases",
  "libc",
  "once_cell",
  "socket2 0.6.0",
  "tracing",
  "windows-sys 0.60.2",
 ]
 
 [[package]]
 name = "quote"
 version = "1.0.40"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
 dependencies = [
@@ -4189,141 +4187,140 @@ dependencies = [
  "pkcs8",
  "subtle",
  "zeroize",
 ]
 
 [[package]]
 name = "secp256k1"
 version = "0.27.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "25996b82292a7a57ed3508f052cfff8640d38d32018784acd714758b43da9c8f"
 dependencies = [
  "secp256k1-sys",
 ]
 
 [[package]]
 name = "secp256k1-sys"
 version = "0.8.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4473013577ec77b4ee3668179ef1186df3146e2cf2d927bd200974c6fe60fd99"
 dependencies = [
  "cc",
 ]
 
 [[package]]
 name = "serde"
-version = "1.0.225"
+version = "1.0.228"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fd6c24dee235d0da097043389623fb913daddf92c76e9f5a1db88607a0bcbd1d"
+checksum = "9a8e94ea7f378bd32cbbd37198a4a91436180c5bb472411e48b5ec2e2124ae9e"
 dependencies = [
  "serde_core",
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_core"
-version = "1.0.225"
+version = "1.0.228"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "659356f9a0cb1e529b24c01e43ad2bdf520ec4ceaf83047b83ddcc2251f96383"
+checksum = "41d385c7d4ca58e59fc732af25c3983b67ac852c1a25000afe1175de458b67ad"
 dependencies = [
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.225"
+version = "1.0.228"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0ea936adf78b1f766949a4977b91d2f5595825bd6ec079aa9543ad2685fc4516"
+checksum = "d540f220d3187173da220f885ab66608367b6574e925011a9353e4badda91d79"
 dependencies = [
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "serde_derive_internals"
 version = "0.29.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "18d26a20a969b9e3fdf2fc2d9f21eda6c40e2de84c9408bb5d3b05d499aae711"
 dependencies = [
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "serde_json"
 version = "1.0.145"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "402a6f66d8c709116cf22f558eab210f5a50187f702eb4d7e5ef38d9a7f1c79c"
 dependencies = [
  "itoa",
  "memchr",
  "ryu",
  "serde",
  "serde_core",
 ]
 
 [[package]]
 name = "serde_urlencoded"
 version = "0.7.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd"
 dependencies = [
  "form_urlencoded",
  "itoa",
  "ryu",
  "serde",
 ]
 
 [[package]]
 name = "serde_with"
-version = "3.14.0"
+version = "3.15.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f2c45cd61fefa9db6f254525d46e392b852e0e61d9a1fd36e5bd183450a556d5"
+checksum = "6093cd8c01b25262b84927e0f7151692158fab02d961e04c979d3903eba7ecc5"
 dependencies = [
  "base64 0.22.1",
  "chrono",
  "hex",
  "indexmap 1.9.3",
  "indexmap 2.11.1",
  "schemars 0.9.0",
  "schemars 1.0.4",
- "serde",
- "serde_derive",
+ "serde_core",
  "serde_json",
  "serde_with_macros",
  "time",
 ]
 
 [[package]]
 name = "serde_with_macros"
-version = "3.14.0"
+version = "3.15.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "de90945e6565ce0d9a25098082ed4ee4002e047cb59892c318d66821e14bb30f"
+checksum = "a7e6c180db0816026a61afa1cff5344fb7ebded7e4d3062772179f2501481c27"
 dependencies = [
- "darling 0.20.11",
+ "darling 0.21.3",
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "sha1"
 version = "0.10.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba"
 dependencies = [
  "cfg-if",
  "cpufeatures",
  "digest",
 ]
 
 [[package]]
 name = "sha2"
 version = "0.10.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a7507d819769d01a365ab707794a4084392c824f54a7a6a7862f8c3d0892b283"
 dependencies = [
  "cfg-if",
  "cpufeatures",
  "digest",
@@ -4352,51 +4349,51 @@ checksum = "77549399552de45a898a580c1b41d445bf730df867cc44e6c0233bbc4b8329de"
 dependencies = [
  "digest",
  "rand_core 0.6.4",
 ]
 
 [[package]]
 name = "simdutf8"
 version = "0.1.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e3a9fe34e3e7a50316060351f37187a3f546bce95496156754b601a5fa71b76e"
 
 [[package]]
 name = "similar"
 version = "2.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bbbb5d9659141646ae647b42fe094daf6c6192d1620870b449d9557f748b2daa"
 
 [[package]]
 name = "simple_asn1"
 version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "297f631f50729c8c99b84667867963997ec0b50f32b2a7dbcab828ef0541e8bb"
 dependencies = [
  "num-bigint",
  "num-traits",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "time",
 ]
 
 [[package]]
 name = "siphasher"
 version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "56199f7ddabf13fe5074ce809e7d3f42b42ae711800501b5b16ea82ad029c39d"
 
 [[package]]
 name = "sized-chunks"
 version = "0.6.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "16d69225bde7a69b235da73377861095455d298f2b970996eec25ddbb42b3d1e"
 dependencies = [
  "bitmaps",
  "typenum",
 ]
 
 [[package]]
 name = "slab"
 version = "0.4.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7a2ae44ef20feb57a68b23d846850f861394c2e02dc425a50098ae8c90267589"
 
@@ -4499,51 +4496,51 @@ checksum = "ee6798b1838b6a0f69c007c133b8df5866302197e404e8b6ee8ed3e3a5e68dc6"
 dependencies = [
  "base64 0.22.1",
  "bytes",
  "chrono",
  "crc",
  "crossbeam-queue",
  "either",
  "event-listener",
  "futures-core",
  "futures-intrusive",
  "futures-io",
  "futures-util",
  "hashbrown 0.15.5",
  "hashlink 0.10.0",
  "indexmap 2.11.1",
  "log",
  "memchr",
  "once_cell",
  "percent-encoding",
  "rust_decimal",
  "rustls",
  "serde",
  "serde_json",
  "sha2",
  "smallvec",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tokio",
  "tokio-stream",
  "tracing",
  "url",
  "uuid",
  "webpki-roots 0.26.11",
 ]
 
 [[package]]
 name = "sqlx-macros"
 version = "0.8.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a2d452988ccaacfbf5e0bdbc348fb91d7c8af5bee192173ac3636b5fb6e6715d"
 dependencies = [
  "proc-macro2",
  "quote",
  "sqlx-core",
  "sqlx-macros-core",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "sqlx-macros-core"
 version = "0.8.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -4585,117 +4582,117 @@ dependencies = [
  "dotenvy",
  "either",
  "futures-channel",
  "futures-core",
  "futures-io",
  "futures-util",
  "generic-array",
  "hex",
  "hkdf",
  "hmac",
  "itoa",
  "log",
  "md-5",
  "memchr",
  "once_cell",
  "percent-encoding",
  "rand 0.8.5",
  "rsa",
  "rust_decimal",
  "serde",
  "sha1",
  "sha2",
  "smallvec",
  "sqlx-core",
  "stringprep",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "uuid",
  "whoami",
 ]
 
 [[package]]
 name = "sqlx-postgres"
 version = "0.8.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "db58fcd5a53cf07c184b154801ff91347e4c30d17a3562a635ff028ad5deda46"
 dependencies = [
  "atoi",
  "base64 0.22.1",
  "bitflags",
  "byteorder",
  "chrono",
  "crc",
  "dotenvy",
  "etcetera",
  "futures-channel",
  "futures-core",
  "futures-util",
  "hex",
  "hkdf",
  "hmac",
  "home",
  "itoa",
  "log",
  "md-5",
  "memchr",
  "once_cell",
  "rand 0.8.5",
  "rust_decimal",
  "serde",
  "serde_json",
  "sha2",
  "smallvec",
  "sqlx-core",
  "stringprep",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "uuid",
  "whoami",
 ]
 
 [[package]]
 name = "sqlx-sqlite"
 version = "0.8.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c2d12fe70b2c1b4401038055f90f151b78208de1f9f89a7dbfd41587a10c3eea"
 dependencies = [
  "atoi",
  "chrono",
  "flume",
  "futures-channel",
  "futures-core",
  "futures-executor",
  "futures-intrusive",
  "futures-util",
  "libsqlite3-sys",
  "log",
  "percent-encoding",
  "serde",
  "serde_urlencoded",
  "sqlx-core",
- "thiserror 2.0.16",
+ "thiserror 2.0.17",
  "tracing",
  "url",
  "uuid",
 ]
 
 [[package]]
 name = "stable_deref_trait"
 version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"
 
 [[package]]
 name = "static_assertions"
 version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"
 
 [[package]]
 name = "static_assertions_next"
 version = "1.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "d7beae5182595e9a8b683fa98c4317f956c9a2dec3b9716990d20023cc60c766"
 
 [[package]]
 name = "string_cache"
@@ -4866,73 +4863,73 @@ dependencies = [
  "dirs-next",
  "rustversion",
  "winapi",
 ]
 
 [[package]]
 name = "thin-vec"
 version = "0.2.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "144f754d318415ac792f9d69fc87abbbfc043ce2ef041c60f16ad828f638717d"
 dependencies = [
  "serde",
 ]
 
 [[package]]
 name = "thiserror"
 version = "1.0.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52"
 dependencies = [
  "thiserror-impl 1.0.69",
 ]
 
 [[package]]
 name = "thiserror"
-version = "2.0.16"
+version = "2.0.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3467d614147380f2e4e374161426ff399c91084acd2363eaf549172b3d5e60c0"
+checksum = "f63587ca0f12b72a0600bcba1d40081f830876000bb46dd2337a3051618f4fc8"
 dependencies = [
- "thiserror-impl 2.0.16",
+ "thiserror-impl 2.0.17",
 ]
 
 [[package]]
 name = "thiserror-impl"
 version = "1.0.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1"
 dependencies = [
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "2.0.16"
+version = "2.0.17"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6c5e1be1c48b9172ee610da68fd9cd2770e7a4056cb3fc98710ee6906f0c7960"
+checksum = "3ff15c8ecd7de3849db632e14d18d2571fa09dfc5ed93479bc4485c7a517c913"
 dependencies = [
  "proc-macro2",
  "quote",
  "syn 2.0.106",
 ]
 
 [[package]]
 name = "thread_local"
 version = "1.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f60246a4944f24f6e018aa17cdeffb7818b76356965d03b07d6a9886e8962185"
 dependencies = [
  "cfg-if",
 ]
 
 [[package]]
 name = "time"
 version = "0.3.43"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "83bde6f1ec10e72d583d91623c939f623002284ef622b87de38cfd546cbf2031"
 dependencies = [
  "deranged",
  "num-conv",
  "powerfmt",
  "serde",
@@ -5057,51 +5054,51 @@ dependencies = [
 
 [[package]]
 name = "toml_datetime"
 version = "0.6.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "22cddaf88f4fbc13c51aebbf5f8eceb5c7c5a9da2ac40a13519eb5b0a0e8f11c"
 
 [[package]]
 name = "toml_edit"
 version = "0.22.27"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "41fe8c660ae4257887cf66394862d21dbca4a6ddd26f04a3560410406a2f819a"
 dependencies = [
  "indexmap 2.11.1",
  "toml_datetime",
  "winnow",
 ]
 
 [[package]]
 name = "tonic"
 version = "0.13.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7e581ba15a835f4d9ea06c55ab1bd4dce26fc53752c69a04aac00703bfb49ba9"
 dependencies = [
  "async-trait",
- "axum 0.8.4",
+ "axum 0.8.6",
  "base64 0.22.1",
  "bytes",
  "h2",
  "http",
  "http-body",
  "http-body-util",
  "hyper",
  "hyper-timeout",
  "hyper-util",
  "percent-encoding",
  "pin-project",
  "prost",
  "socket2 0.5.10",
  "tokio",
  "tokio-stream",
  "tower",
  "tower-layer",
  "tower-service",
  "tracing",
 ]
 
 [[package]]
 name = "tonic-build"
 version = "0.13.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
@@ -5252,51 +5249,51 @@ dependencies = [
 name = "tracing-subscriber"
 version = "0.3.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2054a14f5307d601f88daf0553e1cbf472acc4f2c51afab632431cdcd72124d5"
 dependencies = [
  "matchers",
  "nu-ansi-term",
  "once_cell",
  "regex-automata",
  "serde",
  "serde_json",
  "sharded-slab",
  "smallvec",
  "thread_local",
  "tracing",
  "tracing-core",
  "tracing-log",
  "tracing-serde",
 ]
 
 [[package]]
 name = "tracing-utils"
 version = "0.0.0"
 dependencies = [
  "anyhow",
- "axum-extra 0.10.1",
+ "axum-extra 0.10.3",
  "opentelemetry",
  "opentelemetry-otlp",
  "opentelemetry-semantic-conventions",
  "opentelemetry_sdk",
  "serde",
  "tracing",
  "tracing-opentelemetry",
  "tracing-subscriber",
 ]
 
 [[package]]
 name = "try-lock"
 version = "0.2.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b"
 
 [[package]]
 name = "typeid"
 version = "1.0.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bc7d623258602320d5c55d1bc22793b57daff0ec7efc270ea7d55ce1d5f5471c"
 
 [[package]]
 name = "typenum"
 version = "1.18.0"
diff --git a/dev/entity-rollups/schemas/credit_facility_event_schema.json b/dev/entity-rollups/schemas/credit_facility_event_schema.json
index 4dbf2e3e97f7607f91d462917d7a89e9984ac52b..dfd8314bb1c9270a3a9e71189f01a072d579f05f 100644
--- a/dev/entity-rollups/schemas/credit_facility_event_schema.json
+++ b/dev/entity-rollups/schemas/credit_facility_event_schema.json
@@ -300,50 +300,53 @@
           "anyOf": [
             {
               "$ref": "#/$defs/ObligationDuration"
             },
             {
               "type": "null"
             }
           ]
         },
         "obligation_overdue_duration_from_due": {
           "anyOf": [
             {
               "$ref": "#/$defs/ObligationDuration"
             },
             {
               "type": "null"
             }
           ]
         },
         "one_time_fee_rate": {
           "pattern": "^-?\\d+(\\.\\d+)?([eE]\\d+)?$",
           "type": [
             "string",
             "number"
           ]
+        },
+        "disburse_all_at_activation": {
+          "type": "boolean"
         }
       },
       "required": [
         "annual_rate",
         "duration",
         "interest_due_duration_from_accrual",
         "accrual_cycle_interval",
         "accrual_interval",
         "one_time_fee_rate",
         "liquidation_cvl",
         "margin_call_cvl",
         "initial_cvl"
       ],
       "type": "object"
     },
     "UsdCents": {
       "format": "uint64",
       "minimum": 0,
       "type": "integer"
     }
   },
   "$schema": "https://json-schema.org/draft/2020-12/schema",
   "oneOf": [
     {
       "properties": {
diff --git a/dev/entity-rollups/schemas/credit_facility_proposal_event_schema.json b/dev/entity-rollups/schemas/credit_facility_proposal_event_schema.json
index edb7e165c205ad0f61bddb8cf1a15b03de257f22..a6ba7c030e21773ba08b634a1617f2ce7fa1a56d 100644
--- a/dev/entity-rollups/schemas/credit_facility_proposal_event_schema.json
+++ b/dev/entity-rollups/schemas/credit_facility_proposal_event_schema.json
@@ -202,50 +202,53 @@
           "anyOf": [
             {
               "$ref": "#/$defs/ObligationDuration"
             },
             {
               "type": "null"
             }
           ]
         },
         "obligation_overdue_duration_from_due": {
           "anyOf": [
             {
               "$ref": "#/$defs/ObligationDuration"
             },
             {
               "type": "null"
             }
           ]
         },
         "one_time_fee_rate": {
           "pattern": "^-?\\d+(\\.\\d+)?([eE]\\d+)?$",
           "type": [
             "string",
             "number"
           ]
+        },
+        "disburse_all_at_activation": {
+          "type": "boolean"
         }
       },
       "required": [
         "annual_rate",
         "duration",
         "interest_due_duration_from_accrual",
         "accrual_cycle_interval",
         "accrual_interval",
         "one_time_fee_rate",
         "liquidation_cvl",
         "margin_call_cvl",
         "initial_cvl"
       ],
       "type": "object"
     },
     "UsdCents": {
       "format": "uint64",
       "minimum": 0,
       "type": "integer"
     }
   },
   "$schema": "https://json-schema.org/draft/2020-12/schema",
   "oneOf": [
     {
       "properties": {
diff --git a/dev/entity-rollups/schemas/interest_accrual_cycle_event_schema.json b/dev/entity-rollups/schemas/interest_accrual_cycle_event_schema.json
index cf068f05805309d3cb30a86326f078105573c84a..cf327b4f3e5015e31ef30fb074c0542c85aeed6f 100644
--- a/dev/entity-rollups/schemas/interest_accrual_cycle_event_schema.json
+++ b/dev/entity-rollups/schemas/interest_accrual_cycle_event_schema.json
@@ -194,50 +194,53 @@
           "anyOf": [
             {
               "$ref": "#/$defs/ObligationDuration"
             },
             {
               "type": "null"
             }
           ]
         },
         "obligation_overdue_duration_from_due": {
           "anyOf": [
             {
               "$ref": "#/$defs/ObligationDuration"
             },
             {
               "type": "null"
             }
           ]
         },
         "one_time_fee_rate": {
           "pattern": "^-?\\d+(\\.\\d+)?([eE]\\d+)?$",
           "type": [
             "string",
             "number"
           ]
+        },
+        "disburse_all_at_activation": {
+          "type": "boolean"
         }
       },
       "required": [
         "annual_rate",
         "duration",
         "interest_due_duration_from_accrual",
         "accrual_cycle_interval",
         "accrual_interval",
         "one_time_fee_rate",
         "liquidation_cvl",
         "margin_call_cvl",
         "initial_cvl"
       ],
       "type": "object"
     },
     "UsdCents": {
       "format": "uint64",
       "minimum": 0,
       "type": "integer"
     }
   },
   "$schema": "https://json-schema.org/draft/2020-12/schema",
   "oneOf": [
     {
       "properties": {
diff --git a/dev/entity-rollups/schemas/terms_template_event_schema.json b/dev/entity-rollups/schemas/terms_template_event_schema.json
index 6822a64d7a145ff298c1f028eae6e3f264ead498..badf4c746c1e9d63bfbcf9e16a924ece5110120a 100644
--- a/dev/entity-rollups/schemas/terms_template_event_schema.json
+++ b/dev/entity-rollups/schemas/terms_template_event_schema.json
@@ -132,50 +132,53 @@
           "anyOf": [
             {
               "$ref": "#/$defs/ObligationDuration"
             },
             {
               "type": "null"
             }
           ]
         },
         "obligation_overdue_duration_from_due": {
           "anyOf": [
             {
               "$ref": "#/$defs/ObligationDuration"
             },
             {
               "type": "null"
             }
           ]
         },
         "one_time_fee_rate": {
           "pattern": "^-?\\d+(\\.\\d+)?([eE]\\d+)?$",
           "type": [
             "string",
             "number"
           ]
+        },
+        "disburse_all_at_activation": {
+          "type": "boolean"
         }
       },
       "required": [
         "annual_rate",
         "duration",
         "interest_due_duration_from_accrual",
         "accrual_cycle_interval",
         "accrual_interval",
         "one_time_fee_rate",
         "liquidation_cvl",
         "margin_call_cvl",
         "initial_cvl"
       ],
       "type": "object"
     }
   },
   "$schema": "https://json-schema.org/draft/2020-12/schema",
   "oneOf": [
     {
       "properties": {
         "id": {
           "format": "uuid",
           "type": "string"
         },
         "name": {
diff --git a/docs/src/credit/terms/README.md b/docs/src/credit/terms/README.md
index 20bdf007c0bc793a1748ed275319438ccf7adda4..1e055ec5d3340c5e022f311b3666cda7ed0f0922 100644
--- a/docs/src/credit/terms/README.md
+++ b/docs/src/credit/terms/README.md
@@ -1,26 +1,27 @@
 ## Terms
 
 Terms is a **value object** that captures the parameters under which a credit facility operates.
 It is copied into a facility when the facility is created and does not change thereafter.
 
 ### Fields
 
 The `TermValues` structure contains the following fields:
 
 - `annual_rate` – interest rate charged on outstanding principal.
 - `duration` – total length of the facility.
 - `interest_due_duration_from_accrual` – time from interest accrual to when that interest becomes due.
 - `obligation_overdue_duration_from_due` – optional grace period before a due obligation becomes overdue.
 - `obligation_liquidation_duration_from_due` – optional buffer before an overdue obligation is eligible for liquidation.
 - `accrual_cycle_interval` – cadence at which new interest obligations are generated.
 - `accrual_interval` – frequency used to calculate accrued interest within a cycle.
 - `one_time_fee_rate` – percentage fee taken at disbursal.
+- `disburse_all_at_activation` – when enabled the facility is fully drawn during activation and no further disbursals are allowed.
 - `liquidation_cvl` – collateral value limit that triggers liquidation.
 - `margin_call_cvl` – collateral value limit that triggers a margin call.
 - `initial_cvl` – collateral value limit required at facility creation.
 
 ### Terms Templates
 
 `TermsTemplate` is an entity used to persist a reusable set of term values.
 Credit facilities are **not** linked to templates; instead, a template’s values are
 copied into the facility at creation time.
diff --git a/lana/admin-server/src/graphql/schema.graphql b/lana/admin-server/src/graphql/schema.graphql
index 4cd97eed526a7359c61688565f6d939126ca7e83..8ebb9c5c167187f3fcf97f68b2b2716179d4f43c 100644
--- a/lana/admin-server/src/graphql/schema.graphql
+++ b/lana/admin-server/src/graphql/schema.graphql
@@ -1954,115 +1954,119 @@ scalar SignedSatoshis
 
 scalar SignedUsdCents
 
 enum SortDirection {
 	ASC
 	DESC
 }
 
 input SumsubPermalinkCreateInput {
 	customerId: UUID!
 }
 
 type SumsubPermalinkCreatePayload {
 	url: String!
 }
 
 type System {
 	name: String!
 }
 
 type SystemApproval {
 	autoApprove: Boolean!
 }
 
 type TermValues {
-	annualRate: AnnualRatePct!
-	accrualInterval: InterestInterval!
-	accrualCycleInterval: InterestInterval!
-	oneTimeFeeRate: OneTimeFeeRatePct!
-	duration: Duration!
-	liquidationCvl: Cvlpct!
-	marginCallCvl: Cvlpct!
-	initialCvl: Cvlpct!
+        annualRate: AnnualRatePct!
+        accrualInterval: InterestInterval!
+        accrualCycleInterval: InterestInterval!
+        oneTimeFeeRate: OneTimeFeeRatePct!
+        duration: Duration!
+        liquidationCvl: Cvlpct!
+        marginCallCvl: Cvlpct!
+        initialCvl: Cvlpct!
+        disburseAllAtActivation: Boolean!
 }
 
 input TermsInput {
-	annualRate: AnnualRatePct!
-	accrualInterval: InterestInterval!
-	accrualCycleInterval: InterestInterval!
-	oneTimeFeeRate: OneTimeFeeRatePct!
-	duration: DurationInput!
-	interestDueDurationFromAccrual: DurationInput!
-	obligationOverdueDurationFromDue: DurationInput!
-	obligationLiquidationDurationFromDue: DurationInput!
-	marginCallCvl: CVLPctValue!
-	initialCvl: CVLPctValue!
-	liquidationCvl: CVLPctValue!
+        annualRate: AnnualRatePct!
+        accrualInterval: InterestInterval!
+        accrualCycleInterval: InterestInterval!
+        oneTimeFeeRate: OneTimeFeeRatePct!
+        duration: DurationInput!
+        interestDueDurationFromAccrual: DurationInput!
+        obligationOverdueDurationFromDue: DurationInput!
+        obligationLiquidationDurationFromDue: DurationInput!
+        marginCallCvl: CVLPctValue!
+        initialCvl: CVLPctValue!
+        liquidationCvl: CVLPctValue!
+        disburseAllAtActivation: Boolean!
 }
 
 type TermsTemplate {
 	id: ID!
 	termsId: UUID!
 	values: TermValues!
 	createdAt: Timestamp!
 	name: String!
 	userCanUpdateTermsTemplate: Boolean!
 }
 
 input TermsTemplateCreateInput {
-	name: String!
-	annualRate: AnnualRatePct!
-	accrualInterval: InterestInterval!
-	accrualCycleInterval: InterestInterval!
-	oneTimeFeeRate: OneTimeFeeRatePct!
-	duration: DurationInput!
-	interestDueDurationFromAccrual: DurationInput!
-	obligationOverdueDurationFromDue: DurationInput!
-	obligationLiquidationDurationFromDue: DurationInput!
-	liquidationCvl: CVLPctValue!
-	marginCallCvl: CVLPctValue!
-	initialCvl: CVLPctValue!
+        name: String!
+        annualRate: AnnualRatePct!
+        accrualInterval: InterestInterval!
+        accrualCycleInterval: InterestInterval!
+        oneTimeFeeRate: OneTimeFeeRatePct!
+        duration: DurationInput!
+        interestDueDurationFromAccrual: DurationInput!
+        obligationOverdueDurationFromDue: DurationInput!
+        obligationLiquidationDurationFromDue: DurationInput!
+        liquidationCvl: CVLPctValue!
+        marginCallCvl: CVLPctValue!
+        initialCvl: CVLPctValue!
+        disburseAllAtActivation: Boolean!
 }
 
 type TermsTemplateCreatePayload {
 	termsTemplate: TermsTemplate!
 }
 
 input TermsTemplateUpdateInput {
-	id: UUID!
-	annualRate: AnnualRatePct!
-	accrualInterval: InterestInterval!
-	accrualCycleInterval: InterestInterval!
-	oneTimeFeeRate: OneTimeFeeRatePct!
-	liquidationCvl: CVLPctValue!
-	duration: DurationInput!
-	interestDueDurationFromAccrual: DurationInput!
-	obligationOverdueDurationFromDue: DurationInput!
-	obligationLiquidationDurationFromDue: DurationInput!
-	marginCallCvl: CVLPctValue!
-	initialCvl: CVLPctValue!
+        id: UUID!
+        annualRate: AnnualRatePct!
+        accrualInterval: InterestInterval!
+        accrualCycleInterval: InterestInterval!
+        oneTimeFeeRate: OneTimeFeeRatePct!
+        liquidationCvl: CVLPctValue!
+        duration: DurationInput!
+        interestDueDurationFromAccrual: DurationInput!
+        obligationOverdueDurationFromDue: DurationInput!
+        obligationLiquidationDurationFromDue: DurationInput!
+        marginCallCvl: CVLPctValue!
+        initialCvl: CVLPctValue!
+        disburseAllAtActivation: Boolean!
 }
 
 type TermsTemplateUpdatePayload {
 	termsTemplate: TermsTemplate!
 }
 
 scalar Timestamp
 
 type Total {
 	usdBalance: UsdCents!
 }
 
 type TransactionTemplate {
 	id: UUID!
 	code: String!
 }
 
 type TransactionTemplateConnection {
 	"""
 	Information to aid in pagination.
 	"""
 	pageInfo: PageInfo!
 	"""
 	A list of edges.
 	"""
diff --git a/lana/admin-server/src/graphql/schema.rs b/lana/admin-server/src/graphql/schema.rs
index 6b0d68f54213e5ed9f9c15ac7e71d1cc95f662cd..a4ce046123986ff3e080090997c57c993ab5679c 100644
--- a/lana/admin-server/src/graphql/schema.rs
+++ b/lana/admin-server/src/graphql/schema.rs
@@ -1334,83 +1334,85 @@ impl Mutation {
     pub async fn deposit_account_freeze(
         &self,
         ctx: &Context<'_>,
         input: DepositAccountFreezeInput,
     ) -> async_graphql::Result<DepositAccountFreezePayload> {
         let (app, sub) = app_and_sub_from_ctx!(ctx);
         exec_mutation!(
             DepositAccountFreezePayload,
             DepositAccount,
             ctx,
             app.deposits().freeze_account(sub, input.deposit_account_id)
         )
     }
 
     async fn terms_template_create(
         &self,
         ctx: &Context<'_>,
         input: TermsTemplateCreateInput,
     ) -> async_graphql::Result<TermsTemplateCreatePayload> {
         let (app, sub) = app_and_sub_from_ctx!(ctx);
         let term_values = lana_app::terms::TermValues::builder()
             .annual_rate(input.annual_rate)
             .accrual_interval(input.accrual_interval)
             .accrual_cycle_interval(input.accrual_cycle_interval)
             .one_time_fee_rate(input.one_time_fee_rate)
+            .disburse_all_at_activation(input.disburse_all_at_activation)
             .duration(input.duration)
             .interest_due_duration_from_accrual(input.interest_due_duration_from_accrual)
             .obligation_overdue_duration_from_due(input.obligation_overdue_duration_from_due)
             .obligation_liquidation_duration_from_due(
                 input.obligation_liquidation_duration_from_due,
             )
             .liquidation_cvl(input.liquidation_cvl)
             .margin_call_cvl(input.margin_call_cvl)
             .initial_cvl(input.initial_cvl)
             .build()?;
 
         exec_mutation!(
             TermsTemplateCreatePayload,
             TermsTemplate,
             ctx,
             app.credit()
                 .terms_templates()
                 .create_terms_template(sub, input.name, term_values)
         )
     }
 
     async fn terms_template_update(
         &self,
         ctx: &Context<'_>,
         input: TermsTemplateUpdateInput,
     ) -> async_graphql::Result<TermsTemplateUpdatePayload> {
         let (app, sub) = app_and_sub_from_ctx!(ctx);
 
         let term_values = lana_app::terms::TermValues::builder()
             .annual_rate(input.annual_rate)
             .accrual_interval(input.accrual_interval)
             .accrual_cycle_interval(input.accrual_cycle_interval)
             .one_time_fee_rate(input.one_time_fee_rate)
+            .disburse_all_at_activation(input.disburse_all_at_activation)
             .duration(input.duration)
             .interest_due_duration_from_accrual(input.interest_due_duration_from_accrual)
             .obligation_overdue_duration_from_due(input.obligation_overdue_duration_from_due)
             .obligation_liquidation_duration_from_due(
                 input.obligation_liquidation_duration_from_due,
             )
             .liquidation_cvl(input.liquidation_cvl)
             .margin_call_cvl(input.margin_call_cvl)
             .initial_cvl(input.initial_cvl)
             .build()?;
         exec_mutation!(
             TermsTemplateUpdatePayload,
             TermsTemplate,
             ctx,
             app.credit().terms_templates().update_term_values(
                 sub,
                 TermsTemplateId::from(input.id),
                 term_values
             )
         )
     }
 
     async fn credit_module_configure(
         &self,
         ctx: &Context<'_>,
diff --git a/lana/admin-server/src/graphql/terms.rs b/lana/admin-server/src/graphql/terms.rs
index dbf0cd080d0e8f8b02b3a339e65c8262c29d6f92..6ceee9c22ee29a27b228fadbb72922831e5ddcb9 100644
--- a/lana/admin-server/src/graphql/terms.rs
+++ b/lana/admin-server/src/graphql/terms.rs
@@ -1,73 +1,76 @@
 use async_graphql::*;
 use serde::{Deserialize, Serialize};
 
 pub use lana_app::terms::{
     AnnualRatePct, CVLPct as DomainCVLPct, FacilityDuration as DomainDuration, InterestInterval,
     ObligationDuration as DomainObligationDuration, OneTimeFeeRatePct,
     TermValues as DomainTermValues,
 };
 
 #[derive(SimpleObject, Clone)]
 pub struct TermValues {
     annual_rate: AnnualRatePct,
     accrual_interval: InterestInterval,
     accrual_cycle_interval: InterestInterval,
     one_time_fee_rate: OneTimeFeeRatePct,
     duration: Duration,
     liquidation_cvl: CVLPct,
     margin_call_cvl: CVLPct,
     initial_cvl: CVLPct,
+    disburse_all_at_activation: bool,
 }
 
 impl From<DomainTermValues> for TermValues {
     fn from(values: DomainTermValues) -> Self {
         Self {
             annual_rate: values.annual_rate,
             accrual_interval: values.accrual_interval,
             accrual_cycle_interval: values.accrual_cycle_interval,
             one_time_fee_rate: values.one_time_fee_rate,
             duration: values.duration.into(),
             liquidation_cvl: values.liquidation_cvl.into(),
             margin_call_cvl: values.margin_call_cvl.into(),
             initial_cvl: values.initial_cvl.into(),
+            disburse_all_at_activation: values.disburse_all_at_activation(),
         }
     }
 }
 #[derive(InputObject)]
 pub struct TermsInput {
     pub annual_rate: AnnualRatePct,
     pub accrual_interval: InterestInterval,
     pub accrual_cycle_interval: InterestInterval,
     pub one_time_fee_rate: OneTimeFeeRatePct,
     pub duration: DurationInput,
     pub interest_due_duration_from_accrual: DurationInput,
     pub obligation_overdue_duration_from_due: DurationInput,
     pub obligation_liquidation_duration_from_due: DurationInput,
     pub margin_call_cvl: CVLPctValue,
     pub initial_cvl: CVLPctValue,
     pub liquidation_cvl: CVLPctValue,
+    pub disburse_all_at_activation: bool,
 }
 
 #[derive(Enum, Copy, Clone, Eq, PartialEq)]
 pub enum Period {
     Months,
     Days,
 }
 
 #[derive(SimpleObject, Clone)]
 pub(super) struct Duration {
     period: Period,
     units: u32,
 }
 
 #[derive(InputObject)]
 pub struct DurationInput {
     pub period: Period,
     pub units: u32,
 }
 
 impl From<DomainDuration> for Duration {
     fn from(duration: DomainDuration) -> Self {
         match duration {
             DomainDuration::Months(months) => Self {
                 period: Period::Months,
diff --git a/lana/admin-server/src/graphql/terms_template.rs b/lana/admin-server/src/graphql/terms_template.rs
index ed5f7e4d90abe215786fabb41e6e4f725b9ce8ca..e5d138cd5e984b766174fc0319216f1ed90dd32a 100644
--- a/lana/admin-server/src/graphql/terms_template.rs
+++ b/lana/admin-server/src/graphql/terms_template.rs
@@ -42,44 +42,46 @@ impl TermsTemplate {
     ) -> async_graphql::Result<bool> {
         let (app, sub) = crate::app_and_sub_from_ctx!(ctx);
         Ok(app
             .credit()
             .terms_templates()
             .subject_can_update_terms_template(sub, false)
             .await
             .is_ok())
     }
 }
 
 #[derive(InputObject)]
 pub(super) struct TermsTemplateCreateInput {
     pub name: String,
     pub annual_rate: AnnualRatePct,
     pub accrual_interval: InterestInterval,
     pub accrual_cycle_interval: InterestInterval,
     pub one_time_fee_rate: OneTimeFeeRatePct,
     pub duration: DurationInput,
     pub interest_due_duration_from_accrual: DurationInput,
     pub obligation_overdue_duration_from_due: DurationInput,
     pub obligation_liquidation_duration_from_due: DurationInput,
     pub liquidation_cvl: CVLPctValue,
     pub margin_call_cvl: CVLPctValue,
     pub initial_cvl: CVLPctValue,
+    pub disburse_all_at_activation: bool,
 }
 crate::mutation_payload! { TermsTemplateCreatePayload, terms_template: TermsTemplate }
 
 #[derive(InputObject)]
 pub(super) struct TermsTemplateUpdateInput {
     pub id: UUID,
     pub annual_rate: AnnualRatePct,
     pub accrual_interval: InterestInterval,
     pub accrual_cycle_interval: InterestInterval,
     pub one_time_fee_rate: OneTimeFeeRatePct,
     pub liquidation_cvl: CVLPctValue,
     pub duration: DurationInput,
     pub interest_due_duration_from_accrual: DurationInput,
     pub obligation_overdue_duration_from_due: DurationInput,
     pub obligation_liquidation_duration_from_due: DurationInput,
     pub margin_call_cvl: CVLPctValue,
     pub initial_cvl: CVLPctValue,
+    pub disburse_all_at_activation: bool,
 }
 crate::mutation_payload! { TermsTemplateUpdatePayload, terms_template: TermsTemplate }
diff --git a/lana/customer-server/src/graphql/schema.graphql b/lana/customer-server/src/graphql/schema.graphql
index f8b226780dab4f77ff15b3c45ed23fec860cd0f7..5067c66b0fd0428e7d62b122c1b29d9a8d12cf45 100644
--- a/lana/customer-server/src/graphql/schema.graphql
+++ b/lana/customer-server/src/graphql/schema.graphql
@@ -324,58 +324,59 @@ type PageInfo {
 	endCursor: String
 }
 
 type PaymentEntry {
 	recordedAt: Timestamp!
 	payment: CreditFacilityPaymentAllocation!
 }
 
 enum Period {
 	MONTHS
 }
 
 type Query {
 	me: Me!
 	creditFacility(id: UUID!): CreditFacility
 	realtimePrice: RealtimePrice!
 }
 
 type RealtimePrice {
 	usdCentsPerBtc: UsdCents!
 }
 
 scalar Satoshis
 
 type TermValues {
-	annualRate: AnnualRatePct!
-	accrualInterval: InterestInterval!
-	accrualCycleInterval: InterestInterval!
-	oneTimeFeeRate: OneTimeFeeRatePct!
-	duration: Duration!
-	liquidationCvl: CVLPct!
-	marginCallCvl: CVLPct!
-	initialCvl: CVLPct!
+        annualRate: AnnualRatePct!
+        accrualInterval: InterestInterval!
+        accrualCycleInterval: InterestInterval!
+        oneTimeFeeRate: OneTimeFeeRatePct!
+        duration: Duration!
+        liquidationCvl: CVLPct!
+        marginCallCvl: CVLPct!
+        initialCvl: CVLPct!
+        disburseAllAtActivation: Boolean!
 }
 
 scalar Timestamp
 
 type Total {
 	usdBalance: UsdCents!
 }
 
 scalar UUID
 
 type UnknownEntry {
 	txId: UUID!
 	recordedAt: Timestamp!
 }
 
 scalar UsdCents
 
 type Withdrawal {
 	id: ID!
 	withdrawalId: UUID!
 	accountId: UUID!
 	amount: UsdCents!
 	createdAt: Timestamp!
 	reference: String!
 	status: WithdrawalStatus!
diff --git a/lana/customer-server/src/graphql/terms.rs b/lana/customer-server/src/graphql/terms.rs
index a4a80e376a016b45c6bed28e0af53fcd4e067d0b..2816f3b16ed83bc688b52e6ea689227f9190562e 100644
--- a/lana/customer-server/src/graphql/terms.rs
+++ b/lana/customer-server/src/graphql/terms.rs
@@ -1,55 +1,57 @@
 use async_graphql::*;
 
 pub use lana_app::terms::{
     AnnualRatePct, CVLPct, FacilityDuration as DomainDuration, InterestInterval, OneTimeFeeRatePct,
     TermValues as DomainTermValues,
 };
 
 #[derive(SimpleObject, Clone)]
 pub struct TermValues {
     annual_rate: AnnualRatePct,
     accrual_interval: InterestInterval,
     accrual_cycle_interval: InterestInterval,
     one_time_fee_rate: OneTimeFeeRatePct,
     duration: Duration,
     liquidation_cvl: CVLPct,
     margin_call_cvl: CVLPct,
     initial_cvl: CVLPct,
+    disburse_all_at_activation: bool,
 }
 
 impl From<DomainTermValues> for TermValues {
     fn from(values: DomainTermValues) -> Self {
         Self {
             annual_rate: values.annual_rate,
             accrual_interval: values.accrual_interval,
             accrual_cycle_interval: values.accrual_cycle_interval,
             one_time_fee_rate: values.one_time_fee_rate,
             duration: values.duration.into(),
             liquidation_cvl: values.liquidation_cvl,
             margin_call_cvl: values.margin_call_cvl,
             initial_cvl: values.initial_cvl,
+            disburse_all_at_activation: values.disburse_all_at_activation(),
         }
     }
 }
 
 #[derive(Enum, Copy, Clone, Eq, PartialEq)]
 pub enum Period {
     Months,
 }
 
 #[derive(SimpleObject, Clone)]
 pub(super) struct Duration {
     period: Period,
     units: u32,
 }
 
 impl From<DomainDuration> for Duration {
     fn from(duration: DomainDuration) -> Self {
         match duration {
             DomainDuration::Months(months) => Self {
                 period: Period::Months,
                 units: months,
             },
         }
     }
 }

