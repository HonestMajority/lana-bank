// this file is autogenerated by codegen
/* eslint-disable */
import { Satoshis } from 'types';
import { SignedSatoshis } from 'types';
import { SignedUsdCents } from 'types';
import { UsdCents } from 'types';
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  AccountCode: { input: any; output: any; }
  AnnualRatePct: { input: any; output: any; }
  AuditEntryId: { input: any; output: any; }
  CVLPctValue: { input: any; output: any; }
  Date: { input: any; output: any; }
  Decimal: { input: any; output: any; }
  OneTimeFeeRatePct: { input: any; output: any; }
  PublicId: { input: any; output: any; }
  Satoshis: { input: Satoshis; output: Satoshis; }
  SignedSatoshis: { input: SignedSatoshis; output: SignedSatoshis; }
  SignedUsdCents: { input: SignedUsdCents; output: SignedUsdCents; }
  Timestamp: { input: any; output: any; }
  UUID: { input: string; output: string; }
  Upload: { input: any; output: any; }
  UsdCents: { input: UsdCents; output: UsdCents; }
};

export type AccountingClosing = {
  __typename?: 'AccountingClosing';
  closedAsOf: Scalars['Date']['output'];
  closedAt: Scalars['Timestamp']['output'];
};

export type AccountingCsvDocument = {
  __typename?: 'AccountingCsvDocument';
  createdAt: Scalars['Timestamp']['output'];
  documentId: Scalars['UUID']['output'];
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  ledgerAccountId: Scalars['UUID']['output'];
  status: DocumentStatus;
};

export type AccountingCsvDownloadLink = {
  __typename?: 'AccountingCsvDownloadLink';
  csvId: Scalars['UUID']['output'];
  url: Scalars['String']['output'];
};

export type AccountingCsvDownloadLinkGenerateInput = {
  documentId: Scalars['UUID']['input'];
};

export type AccountingCsvDownloadLinkGeneratePayload = {
  __typename?: 'AccountingCsvDownloadLinkGeneratePayload';
  link: AccountingCsvDownloadLink;
};

export enum Activity {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE',
  Suspended = 'SUSPENDED'
}

export type ApprovalProcess = {
  __typename?: 'ApprovalProcess';
  approvalProcessId: Scalars['UUID']['output'];
  approvalProcessType: ApprovalProcessType;
  createdAt: Scalars['Timestamp']['output'];
  deniedReason?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  policy: Policy;
  rules: ApprovalRules;
  status: ApprovalProcessStatus;
  target: ApprovalProcessTarget;
  userCanSubmitDecision: Scalars['Boolean']['output'];
  voters: Array<ApprovalProcessVoter>;
};

export type ApprovalProcessApproveInput = {
  processId: Scalars['UUID']['input'];
};

export type ApprovalProcessApprovePayload = {
  __typename?: 'ApprovalProcessApprovePayload';
  approvalProcess: ApprovalProcess;
};

export type ApprovalProcessConnection = {
  __typename?: 'ApprovalProcessConnection';
  /** A list of edges. */
  edges: Array<ApprovalProcessEdge>;
  /** A list of nodes. */
  nodes: Array<ApprovalProcess>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ApprovalProcessDenyInput = {
  processId: Scalars['UUID']['input'];
};

export type ApprovalProcessDenyPayload = {
  __typename?: 'ApprovalProcessDenyPayload';
  approvalProcess: ApprovalProcess;
};

/** An edge in a connection. */
export type ApprovalProcessEdge = {
  __typename?: 'ApprovalProcessEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: ApprovalProcess;
};

export enum ApprovalProcessStatus {
  Approved = 'APPROVED',
  Denied = 'DENIED',
  InProgress = 'IN_PROGRESS'
}

export type ApprovalProcessTarget = CreditFacilityDisbursal | CreditFacilityProposal | Withdrawal;

export enum ApprovalProcessType {
  CreditFacilityProposalApproval = 'CREDIT_FACILITY_PROPOSAL_APPROVAL',
  DisbursalApproval = 'DISBURSAL_APPROVAL',
  WithdrawalApproval = 'WITHDRAWAL_APPROVAL'
}

export type ApprovalProcessVoter = {
  __typename?: 'ApprovalProcessVoter';
  didApprove: Scalars['Boolean']['output'];
  didDeny: Scalars['Boolean']['output'];
  didVote: Scalars['Boolean']['output'];
  stillEligible: Scalars['Boolean']['output'];
  user: User;
  votedAt?: Maybe<Scalars['Timestamp']['output']>;
};

export type ApprovalRules = CommitteeThreshold | SystemApproval;

export type AuditEntry = {
  __typename?: 'AuditEntry';
  action: Scalars['String']['output'];
  auditEntryId: Scalars['AuditEntryId']['output'];
  authorized: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  object: Scalars['String']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  subject: AuditSubject;
};

export type AuditEntryConnection = {
  __typename?: 'AuditEntryConnection';
  /** A list of edges. */
  edges: Array<AuditEntryEdge>;
  /** A list of nodes. */
  nodes: Array<AuditEntry>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AuditEntryEdge = {
  __typename?: 'AuditEntryEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: AuditEntry;
};

export type AuditSubject = System | User;

export type BalanceSheet = {
  __typename?: 'BalanceSheet';
  balance: LedgerAccountBalanceRange;
  categories: Array<LedgerAccount>;
  name: Scalars['String']['output'];
};

export type BalanceSheetModuleConfig = {
  __typename?: 'BalanceSheetModuleConfig';
  chartOfAccountsAssetsCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsCostOfRevenueCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsEquityCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsExpensesCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsId?: Maybe<Scalars['UUID']['output']>;
  chartOfAccountsLiabilitiesCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsRevenueCode?: Maybe<Scalars['String']['output']>;
};

export type BalanceSheetModuleConfigureInput = {
  chartOfAccountsAssetsCode: Scalars['String']['input'];
  chartOfAccountsCostOfRevenueCode: Scalars['String']['input'];
  chartOfAccountsEquityCode: Scalars['String']['input'];
  chartOfAccountsExpensesCode: Scalars['String']['input'];
  chartOfAccountsLiabilitiesCode: Scalars['String']['input'];
  chartOfAccountsRevenueCode: Scalars['String']['input'];
};

export type BalanceSheetModuleConfigurePayload = {
  __typename?: 'BalanceSheetModuleConfigurePayload';
  balanceSheetConfig: BalanceSheetModuleConfig;
};

export type BitgoConfig = {
  enterpriseId: Scalars['String']['input'];
  longLivedToken: Scalars['String']['input'];
  name: Scalars['String']['input'];
  passphrase: Scalars['String']['input'];
  testingInstance: Scalars['Boolean']['input'];
  webhookSecret: Scalars['String']['input'];
  webhookUrl: Scalars['String']['input'];
};

export type BtcAmount = {
  __typename?: 'BtcAmount';
  btc: Scalars['Satoshis']['output'];
};

export type BtcBalanceDetails = {
  __typename?: 'BtcBalanceDetails';
  credit: Scalars['Satoshis']['output'];
  debit: Scalars['Satoshis']['output'];
  net: Scalars['SignedSatoshis']['output'];
};

export type BtcLedgerAccountBalance = {
  __typename?: 'BtcLedgerAccountBalance';
  encumbrance: BtcBalanceDetails;
  pending: BtcBalanceDetails;
  settled: BtcBalanceDetails;
};

export type BtcLedgerAccountBalanceRange = {
  __typename?: 'BtcLedgerAccountBalanceRange';
  close: BtcLedgerAccountBalance;
  open: BtcLedgerAccountBalance;
  periodActivity: BtcLedgerAccountBalance;
};

export type CancelledWithdrawalEntry = {
  __typename?: 'CancelledWithdrawalEntry';
  recordedAt: Scalars['Timestamp']['output'];
  withdrawal: Withdrawal;
};

export type ChartNode = {
  __typename?: 'ChartNode';
  accountCode: Scalars['AccountCode']['output'];
  children: Array<ChartNode>;
  name: Scalars['String']['output'];
};

export type ChartOfAccounts = {
  __typename?: 'ChartOfAccounts';
  chartId: Scalars['UUID']['output'];
  children: Array<ChartNode>;
  id: Scalars['ID']['output'];
  monthlyClosing: AccountingClosing;
  name: Scalars['String']['output'];
};

export type ChartOfAccountsAddChildNodeInput = {
  chartId: Scalars['UUID']['input'];
  code: Scalars['AccountCode']['input'];
  name: Scalars['String']['input'];
  parent: Scalars['AccountCode']['input'];
};

export type ChartOfAccountsAddChildNodePayload = {
  __typename?: 'ChartOfAccountsAddChildNodePayload';
  chartOfAccounts: ChartOfAccounts;
};

export type ChartOfAccountsAddRootNodeInput = {
  chartId: Scalars['UUID']['input'];
  code: Scalars['AccountCode']['input'];
  name: Scalars['String']['input'];
  normalBalanceType: DebitOrCredit;
};

export type ChartOfAccountsAddRootNodePayload = {
  __typename?: 'ChartOfAccountsAddRootNodePayload';
  chartOfAccounts: ChartOfAccounts;
};

export type ChartOfAccountsCloseMonthlyInput = {
  chartId: Scalars['UUID']['input'];
};

export type ChartOfAccountsCloseMonthlyPayload = {
  __typename?: 'ChartOfAccountsCloseMonthlyPayload';
  chartOfAccounts: ChartOfAccounts;
};

export type ChartOfAccountsCsvImportInput = {
  chartId: Scalars['UUID']['input'];
  file: Scalars['Upload']['input'];
};

export type ChartOfAccountsCsvImportPayload = {
  __typename?: 'ChartOfAccountsCsvImportPayload';
  chartOfAccounts: ChartOfAccounts;
};

export type Collateral = {
  __typename?: 'Collateral';
  account: LedgerAccount;
  accountId: Scalars['UUID']['output'];
  collateralId: Scalars['UUID']['output'];
  creditFacility: CreditFacility;
  id: Scalars['ID']['output'];
  walletId?: Maybe<Scalars['UUID']['output']>;
};

export enum CollateralAction {
  Add = 'ADD',
  Remove = 'REMOVE'
}

export type CollateralBalance = {
  __typename?: 'CollateralBalance';
  btcBalance: Scalars['Satoshis']['output'];
};

export enum CollateralizationState {
  FullyCollateralized = 'FULLY_COLLATERALIZED',
  NoCollateral = 'NO_COLLATERAL',
  NoExposure = 'NO_EXPOSURE',
  UnderLiquidationThreshold = 'UNDER_LIQUIDATION_THRESHOLD',
  UnderMarginCallThreshold = 'UNDER_MARGIN_CALL_THRESHOLD'
}

export type Committee = {
  __typename?: 'Committee';
  committeeId: Scalars['UUID']['output'];
  createdAt: Scalars['Timestamp']['output'];
  currentMembers: Array<User>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type CommitteeAddUserInput = {
  committeeId: Scalars['UUID']['input'];
  userId: Scalars['UUID']['input'];
};

export type CommitteeAddUserPayload = {
  __typename?: 'CommitteeAddUserPayload';
  committee: Committee;
};

export type CommitteeConnection = {
  __typename?: 'CommitteeConnection';
  /** A list of edges. */
  edges: Array<CommitteeEdge>;
  /** A list of nodes. */
  nodes: Array<Committee>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CommitteeCreateInput = {
  name: Scalars['String']['input'];
};

export type CommitteeCreatePayload = {
  __typename?: 'CommitteeCreatePayload';
  committee: Committee;
};

/** An edge in a connection. */
export type CommitteeEdge = {
  __typename?: 'CommitteeEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Committee;
};

export type CommitteeRemoveUserInput = {
  committeeId: Scalars['UUID']['input'];
  userId: Scalars['UUID']['input'];
};

export type CommitteeRemoveUserPayload = {
  __typename?: 'CommitteeRemoveUserPayload';
  committee: Committee;
};

export type CommitteeThreshold = {
  __typename?: 'CommitteeThreshold';
  committee: Committee;
  threshold: Scalars['Int']['output'];
};

export type CreditFacilitiesFilter = {
  collateralizationState?: InputMaybe<CollateralizationState>;
  field: CreditFacilitiesFilterBy;
  status?: InputMaybe<CreditFacilityStatus>;
};

export enum CreditFacilitiesFilterBy {
  CollateralizationState = 'COLLATERALIZATION_STATE',
  Status = 'STATUS'
}

export type CreditFacilitiesSort = {
  by?: CreditFacilitiesSortBy;
  direction?: SortDirection;
};

export enum CreditFacilitiesSortBy {
  CreatedAt = 'CREATED_AT',
  Cvl = 'CVL'
}

export type CreditFacility = {
  __typename?: 'CreditFacility';
  activatedAt: Scalars['Timestamp']['output'];
  balance: CreditFacilityBalance;
  canBeCompleted: Scalars['Boolean']['output'];
  collateralToMatchInitialCvl?: Maybe<Scalars['Satoshis']['output']>;
  collateralizationState: CollateralizationState;
  creditFacilityId: Scalars['UUID']['output'];
  creditFacilityTerms: TermValues;
  currentCvl: Cvlpct;
  customer: Customer;
  disbursals: Array<CreditFacilityDisbursal>;
  facilityAmount: Scalars['UsdCents']['output'];
  history: Array<CreditFacilityHistoryEntry>;
  id: Scalars['ID']['output'];
  ledgerAccounts: CreditFacilityLedgerAccounts;
  maturesAt: Scalars['Timestamp']['output'];
  publicId: Scalars['PublicId']['output'];
  repaymentPlan: Array<CreditFacilityRepaymentPlanEntry>;
  status: CreditFacilityStatus;
  userCanComplete: Scalars['Boolean']['output'];
  userCanInitiateDisbursal: Scalars['Boolean']['output'];
  userCanRecordPayment: Scalars['Boolean']['output'];
  userCanRecordPaymentWithDate: Scalars['Boolean']['output'];
  userCanUpdateCollateral: Scalars['Boolean']['output'];
  wallet?: Maybe<Wallet>;
};

export type CreditFacilityApproved = {
  __typename?: 'CreditFacilityApproved';
  cents: Scalars['UsdCents']['output'];
  effective: Scalars['Date']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityBalance = {
  __typename?: 'CreditFacilityBalance';
  collateral: CollateralBalance;
  disbursed: Disbursed;
  dueOutstanding: Outstanding;
  facilityRemaining: FacilityRemaining;
  interest: Interest;
  outstanding: Outstanding;
  outstandingPayable: Outstanding;
};

export type CreditFacilityCollateralUpdateInput = {
  collateral: Scalars['Satoshis']['input'];
  creditFacilityId: Scalars['UUID']['input'];
  effective: Scalars['Date']['input'];
};

export type CreditFacilityCollateralUpdatePayload = {
  __typename?: 'CreditFacilityCollateralUpdatePayload';
  creditFacility: CreditFacility;
};

export type CreditFacilityCollateralUpdated = {
  __typename?: 'CreditFacilityCollateralUpdated';
  action: CollateralAction;
  effective: Scalars['Date']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  satoshis: Scalars['Satoshis']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityCollateralizationUpdated = {
  __typename?: 'CreditFacilityCollateralizationUpdated';
  collateral: Scalars['Satoshis']['output'];
  effective: Scalars['Date']['output'];
  outstandingDisbursal: Scalars['UsdCents']['output'];
  outstandingInterest: Scalars['UsdCents']['output'];
  price: Scalars['UsdCents']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  state: CollateralizationState;
};

export type CreditFacilityCompleteInput = {
  creditFacilityId: Scalars['UUID']['input'];
};

export type CreditFacilityCompletePayload = {
  __typename?: 'CreditFacilityCompletePayload';
  creditFacility: CreditFacility;
};

export type CreditFacilityConnection = {
  __typename?: 'CreditFacilityConnection';
  /** A list of edges. */
  edges: Array<CreditFacilityEdge>;
  /** A list of nodes. */
  nodes: Array<CreditFacility>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CreditFacilityDisbursal = {
  __typename?: 'CreditFacilityDisbursal';
  amount: Scalars['UsdCents']['output'];
  approvalProcess: ApprovalProcess;
  createdAt: Scalars['Timestamp']['output'];
  creditFacility: CreditFacility;
  disbursalId: Scalars['UUID']['output'];
  id: Scalars['ID']['output'];
  ledgerTransactions: Array<LedgerTransaction>;
  publicId: Scalars['PublicId']['output'];
  status: DisbursalStatus;
};

export type CreditFacilityDisbursalConnection = {
  __typename?: 'CreditFacilityDisbursalConnection';
  /** A list of edges. */
  edges: Array<CreditFacilityDisbursalEdge>;
  /** A list of nodes. */
  nodes: Array<CreditFacilityDisbursal>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type CreditFacilityDisbursalEdge = {
  __typename?: 'CreditFacilityDisbursalEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: CreditFacilityDisbursal;
};

export type CreditFacilityDisbursalExecuted = {
  __typename?: 'CreditFacilityDisbursalExecuted';
  cents: Scalars['UsdCents']['output'];
  effective: Scalars['Date']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityDisbursalInitiateInput = {
  amount: Scalars['UsdCents']['input'];
  creditFacilityId: Scalars['UUID']['input'];
};

export type CreditFacilityDisbursalInitiatePayload = {
  __typename?: 'CreditFacilityDisbursalInitiatePayload';
  disbursal: CreditFacilityDisbursal;
};

/** An edge in a connection. */
export type CreditFacilityEdge = {
  __typename?: 'CreditFacilityEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: CreditFacility;
};

export type CreditFacilityHistoryEntry = CreditFacilityApproved | CreditFacilityCollateralUpdated | CreditFacilityCollateralizationUpdated | CreditFacilityDisbursalExecuted | CreditFacilityIncrementalPayment | CreditFacilityInterestAccrued | CreditFacilityLiquidationAmountReserved;

export type CreditFacilityIncrementalPayment = {
  __typename?: 'CreditFacilityIncrementalPayment';
  cents: Scalars['UsdCents']['output'];
  effective: Scalars['Date']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityInterestAccrued = {
  __typename?: 'CreditFacilityInterestAccrued';
  cents: Scalars['UsdCents']['output'];
  days: Scalars['Int']['output'];
  effective: Scalars['Date']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityLedgerAccounts = {
  __typename?: 'CreditFacilityLedgerAccounts';
  collateralAccount: LedgerAccount;
  collateralAccountId: Scalars['UUID']['output'];
  disbursedDefaultedAccount: LedgerAccount;
  disbursedDefaultedAccountId: Scalars['UUID']['output'];
  disbursedReceivableDueAccount: LedgerAccount;
  disbursedReceivableDueAccountId: Scalars['UUID']['output'];
  disbursedReceivableNotYetDueAccount: LedgerAccount;
  disbursedReceivableNotYetDueAccountId: Scalars['UUID']['output'];
  disbursedReceivableOverdueAccount: LedgerAccount;
  disbursedReceivableOverdueAccountId: Scalars['UUID']['output'];
  facilityAccount: LedgerAccount;
  facilityAccountId: Scalars['UUID']['output'];
  feeIncomeAccount: LedgerAccount;
  feeIncomeAccountId: Scalars['UUID']['output'];
  inLiquidationAccount: LedgerAccount;
  inLiquidationAccountId: Scalars['UUID']['output'];
  interestDefaultedAccount: LedgerAccount;
  interestDefaultedAccountId: Scalars['UUID']['output'];
  interestIncomeAccount: LedgerAccount;
  interestIncomeAccountId: Scalars['UUID']['output'];
  interestReceivableDueAccount: LedgerAccount;
  interestReceivableDueAccountId: Scalars['UUID']['output'];
  interestReceivableNotYetDueAccount: LedgerAccount;
  interestReceivableNotYetDueAccountId: Scalars['UUID']['output'];
  interestReceivableOverdueAccount: LedgerAccount;
  interestReceivableOverdueAccountId: Scalars['UUID']['output'];
};

export type CreditFacilityLiquidationAmountReserved = {
  __typename?: 'CreditFacilityLiquidationAmountReserved';
  cents: Scalars['UsdCents']['output'];
  effective: Scalars['Date']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityPartialPaymentRecordInput = {
  amount: Scalars['UsdCents']['input'];
  creditFacilityId: Scalars['UUID']['input'];
};

export type CreditFacilityPartialPaymentRecordPayload = {
  __typename?: 'CreditFacilityPartialPaymentRecordPayload';
  creditFacility: CreditFacility;
};

export type CreditFacilityPartialPaymentWithDateRecordInput = {
  amount: Scalars['UsdCents']['input'];
  creditFacilityId: Scalars['UUID']['input'];
  effective: Scalars['Date']['input'];
};

export type CreditFacilityPaymentAllocation = {
  __typename?: 'CreditFacilityPaymentAllocation';
  amount: Scalars['UsdCents']['output'];
  createdAt: Scalars['Timestamp']['output'];
  creditFacility: CreditFacility;
  id: Scalars['ID']['output'];
  paymentAllocationId: Scalars['UUID']['output'];
};

export type CreditFacilityProposal = {
  __typename?: 'CreditFacilityProposal';
  approvalProcess: ApprovalProcess;
  approvalProcessId: Scalars['UUID']['output'];
  collateral: CollateralBalance;
  collateralToMatchInitialCvl?: Maybe<Scalars['Satoshis']['output']>;
  collateralizationState: CreditFacilityProposalCollateralizationState;
  createdAt: Scalars['Timestamp']['output'];
  creditFacilityProposalId: Scalars['UUID']['output'];
  creditFacilityTerms: TermValues;
  customer: Customer;
  facilityAmount: Scalars['UsdCents']['output'];
  id: Scalars['ID']['output'];
  repaymentPlan: Array<CreditFacilityRepaymentPlanEntry>;
  status: CreditFacilityProposalStatus;
  wallet?: Maybe<Wallet>;
};

export type CreditFacilityProposalCollateralUpdateInput = {
  collateral: Scalars['Satoshis']['input'];
  creditFacilityProposalId: Scalars['UUID']['input'];
  effective: Scalars['Date']['input'];
};

export type CreditFacilityProposalCollateralUpdatePayload = {
  __typename?: 'CreditFacilityProposalCollateralUpdatePayload';
  creditFacilityProposal: CreditFacilityProposal;
};

export enum CreditFacilityProposalCollateralizationState {
  FullyCollateralized = 'FULLY_COLLATERALIZED',
  UnderCollateralized = 'UNDER_COLLATERALIZED'
}

export type CreditFacilityProposalConnection = {
  __typename?: 'CreditFacilityProposalConnection';
  /** A list of edges. */
  edges: Array<CreditFacilityProposalEdge>;
  /** A list of nodes. */
  nodes: Array<CreditFacilityProposal>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CreditFacilityProposalCreateInput = {
  custodianId?: InputMaybe<Scalars['UUID']['input']>;
  customerId: Scalars['UUID']['input'];
  disbursalCreditAccountId: Scalars['UUID']['input'];
  facility: Scalars['UsdCents']['input'];
  terms: TermsInput;
};

export type CreditFacilityProposalCreatePayload = {
  __typename?: 'CreditFacilityProposalCreatePayload';
  creditFacilityProposal: CreditFacilityProposal;
};

/** An edge in a connection. */
export type CreditFacilityProposalEdge = {
  __typename?: 'CreditFacilityProposalEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: CreditFacilityProposal;
};

export enum CreditFacilityProposalStatus {
  Completed = 'COMPLETED',
  PendingApproval = 'PENDING_APPROVAL',
  PendingCollateralization = 'PENDING_COLLATERALIZATION',
  PendingCompletion = 'PENDING_COMPLETION'
}

export type CreditFacilityRepaymentPlanEntry = {
  __typename?: 'CreditFacilityRepaymentPlanEntry';
  accrualAt: Scalars['Timestamp']['output'];
  dueAt: Scalars['Timestamp']['output'];
  initial: Scalars['UsdCents']['output'];
  outstanding: Scalars['UsdCents']['output'];
  repaymentType: CreditFacilityRepaymentType;
  status: CreditFacilityRepaymentStatus;
};

export enum CreditFacilityRepaymentStatus {
  Defaulted = 'DEFAULTED',
  Due = 'DUE',
  NotYetDue = 'NOT_YET_DUE',
  Overdue = 'OVERDUE',
  Paid = 'PAID',
  Upcoming = 'UPCOMING'
}

export enum CreditFacilityRepaymentType {
  Disbursal = 'DISBURSAL',
  Interest = 'INTEREST'
}

export enum CreditFacilityStatus {
  Active = 'ACTIVE',
  Closed = 'CLOSED',
  Matured = 'MATURED'
}

export type CreditModuleConfig = {
  __typename?: 'CreditModuleConfig';
  chartOfAccountCollateralOmnibusParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountCollateralParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountFacilityOmnibusParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountFacilityParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountFeeIncomeParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountInLiquidationOmnibusParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountInLiquidationParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountInterestIncomeParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermBankDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermBankInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermFinancialInstitutionDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermFinancialInstitutionInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermForeignAgencyOrSubsidiaryDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermForeignAgencyOrSubsidiaryInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermGovernmentEntityDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermGovernmentEntityInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermIndividualDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermIndividualInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermNonDomiciledCompanyDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermNonDomiciledCompanyInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermPrivateCompanyDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountLongTermPrivateCompanyInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountOverdueBankDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountOverdueFinancialInstitutionDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountOverdueForeignAgencyOrSubsidiaryDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountOverdueGovernmentEntityDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountOverdueIndividualDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountOverdueNonDomiciledCompanyDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountOverduePrivateCompanyDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermBankDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermBankInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermFinancialInstitutionDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermFinancialInstitutionInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermForeignAgencyOrSubsidiaryDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermForeignAgencyOrSubsidiaryInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermGovernmentEntityDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermGovernmentEntityInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermIndividualDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermIndividualInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermNonDomiciledCompanyDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermNonDomiciledCompanyInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermPrivateCompanyDisbursedReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountShortTermPrivateCompanyInterestReceivableParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsId?: Maybe<Scalars['UUID']['output']>;
};

export type CreditModuleConfigureInput = {
  chartOfAccountCollateralOmnibusParentCode: Scalars['String']['input'];
  chartOfAccountCollateralParentCode: Scalars['String']['input'];
  chartOfAccountFacilityOmnibusParentCode: Scalars['String']['input'];
  chartOfAccountFacilityParentCode: Scalars['String']['input'];
  chartOfAccountFeeIncomeParentCode: Scalars['String']['input'];
  chartOfAccountInLiquidationOmnibusParentCode: Scalars['String']['input'];
  chartOfAccountInLiquidationParentCode: Scalars['String']['input'];
  chartOfAccountInterestIncomeParentCode: Scalars['String']['input'];
  chartOfAccountLongTermBankDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermBankInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermFinancialInstitutionDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermFinancialInstitutionInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermForeignAgencyOrSubsidiaryDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermForeignAgencyOrSubsidiaryInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermGovernmentEntityDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermGovernmentEntityInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermIndividualDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermIndividualInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermNonDomiciledCompanyDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermNonDomiciledCompanyInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermPrivateCompanyDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountLongTermPrivateCompanyInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountOverdueBankDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountOverdueFinancialInstitutionDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountOverdueForeignAgencyOrSubsidiaryDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountOverdueGovernmentEntityDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountOverdueIndividualDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountOverdueNonDomiciledCompanyDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountOverduePrivateCompanyDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermBankDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermBankInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermFinancialInstitutionDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermFinancialInstitutionInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermForeignAgencyOrSubsidiaryDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermForeignAgencyOrSubsidiaryInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermGovernmentEntityDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermGovernmentEntityInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermIndividualDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermIndividualInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermNonDomiciledCompanyDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermNonDomiciledCompanyInterestReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermPrivateCompanyDisbursedReceivableParentCode: Scalars['String']['input'];
  chartOfAccountShortTermPrivateCompanyInterestReceivableParentCode: Scalars['String']['input'];
};

export type CreditModuleConfigurePayload = {
  __typename?: 'CreditModuleConfigurePayload';
  creditConfig: CreditModuleConfig;
};

export type Custodian = {
  __typename?: 'Custodian';
  createdAt: Scalars['Timestamp']['output'];
  custodianId: Scalars['UUID']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type CustodianConfigInput =
  { bitgo: BitgoConfig; komainu?: never; }
  |  { bitgo?: never; komainu: KomainuConfig; };

export type CustodianConfigUpdateInput = {
  config: CustodianConfigInput;
  custodianId: Scalars['UUID']['input'];
};

export type CustodianConfigUpdatePayload = {
  __typename?: 'CustodianConfigUpdatePayload';
  custodian: Custodian;
};

export type CustodianConnection = {
  __typename?: 'CustodianConnection';
  /** A list of edges. */
  edges: Array<CustodianEdge>;
  /** A list of nodes. */
  nodes: Array<Custodian>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CustodianCreateInput =
  { bitgo: BitgoConfig; komainu?: never; }
  |  { bitgo?: never; komainu: KomainuConfig; };

export type CustodianCreatePayload = {
  __typename?: 'CustodianCreatePayload';
  custodian: Custodian;
};

/** An edge in a connection. */
export type CustodianEdge = {
  __typename?: 'CustodianEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Custodian;
};

export type Customer = {
  __typename?: 'Customer';
  activity: Activity;
  applicantId?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Timestamp']['output'];
  creditFacilities: Array<CreditFacility>;
  creditFacilityProposals: Array<CreditFacilityProposal>;
  customerId: Scalars['UUID']['output'];
  customerType: CustomerType;
  depositAccount?: Maybe<DepositAccount>;
  documents: Array<CustomerDocument>;
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  kycVerification: KycVerification;
  level: KycLevel;
  publicId: Scalars['PublicId']['output'];
  telegramId: Scalars['String']['output'];
  transactions: Array<Transaction>;
  userCanCreateCreditFacility: Scalars['Boolean']['output'];
};

export type CustomerConnection = {
  __typename?: 'CustomerConnection';
  /** A list of edges. */
  edges: Array<CustomerEdge>;
  /** A list of nodes. */
  nodes: Array<Customer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CustomerCreateInput = {
  customerType: CustomerType;
  email: Scalars['String']['input'];
  telegramId: Scalars['String']['input'];
};

export type CustomerCreatePayload = {
  __typename?: 'CustomerCreatePayload';
  customer: Customer;
};

export type CustomerDocument = {
  __typename?: 'CustomerDocument';
  customerId: Scalars['UUID']['output'];
  documentId: Scalars['UUID']['output'];
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  status: DocumentStatus;
};

export type CustomerDocumentArchiveInput = {
  documentId: Scalars['UUID']['input'];
};

export type CustomerDocumentArchivePayload = {
  __typename?: 'CustomerDocumentArchivePayload';
  document: CustomerDocument;
};

export type CustomerDocumentCreateInput = {
  customerId: Scalars['UUID']['input'];
  file: Scalars['Upload']['input'];
};

export type CustomerDocumentCreatePayload = {
  __typename?: 'CustomerDocumentCreatePayload';
  document: CustomerDocument;
};

export type CustomerDocumentDeleteInput = {
  documentId: Scalars['UUID']['input'];
};

export type CustomerDocumentDeletePayload = {
  __typename?: 'CustomerDocumentDeletePayload';
  deletedDocumentId: Scalars['UUID']['output'];
};

export type CustomerDocumentDownloadLinksGenerateInput = {
  documentId: Scalars['UUID']['input'];
};

export type CustomerDocumentDownloadLinksGeneratePayload = {
  __typename?: 'CustomerDocumentDownloadLinksGeneratePayload';
  documentId: Scalars['UUID']['output'];
  link: Scalars['String']['output'];
};

/** An edge in a connection. */
export type CustomerEdge = {
  __typename?: 'CustomerEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Customer;
};

export type CustomerEmailUpdateInput = {
  customerId: Scalars['UUID']['input'];
  email: Scalars['String']['input'];
};

export type CustomerEmailUpdatePayload = {
  __typename?: 'CustomerEmailUpdatePayload';
  customer: Customer;
};

export type CustomerTelegramIdUpdateInput = {
  customerId: Scalars['UUID']['input'];
  telegramId: Scalars['String']['input'];
};

export type CustomerTelegramIdUpdatePayload = {
  __typename?: 'CustomerTelegramIdUpdatePayload';
  customer: Customer;
};

export enum CustomerType {
  Bank = 'BANK',
  FinancialInstitution = 'FINANCIAL_INSTITUTION',
  ForeignAgencyOrSubsidiary = 'FOREIGN_AGENCY_OR_SUBSIDIARY',
  GovernmentEntity = 'GOVERNMENT_ENTITY',
  Individual = 'INDIVIDUAL',
  NonDomiciledCompany = 'NON_DOMICILED_COMPANY',
  PrivateCompany = 'PRIVATE_COMPANY'
}

export type CustomersFilter = {
  field: CustomersFilterBy;
  kycVerification?: InputMaybe<KycVerification>;
};

export enum CustomersFilterBy {
  AccountKycVerification = 'ACCOUNT_KYC_VERIFICATION'
}

export type CustomersSort = {
  by?: CustomersSortBy;
  direction?: SortDirection;
};

export enum CustomersSortBy {
  CreatedAt = 'CREATED_AT',
  Email = 'EMAIL',
  TelegramId = 'TELEGRAM_ID'
}

export type Cvlpct = FiniteCvlPct | InfiniteCvlPct;

export type Dashboard = {
  __typename?: 'Dashboard';
  activeFacilities: Scalars['Int']['output'];
  pendingFacilities: Scalars['Int']['output'];
  totalCollateral: Scalars['Satoshis']['output'];
  totalDisbursed: Scalars['UsdCents']['output'];
};

export enum DebitOrCredit {
  Credit = 'CREDIT',
  Debit = 'DEBIT'
}

export type Deposit = {
  __typename?: 'Deposit';
  account: DepositAccount;
  accountId: Scalars['UUID']['output'];
  amount: Scalars['UsdCents']['output'];
  createdAt: Scalars['Timestamp']['output'];
  depositId: Scalars['UUID']['output'];
  id: Scalars['ID']['output'];
  ledgerTransactions: Array<LedgerTransaction>;
  publicId: Scalars['PublicId']['output'];
  reference: Scalars['String']['output'];
  status: DepositStatus;
};

export type DepositAccount = {
  __typename?: 'DepositAccount';
  balance: DepositAccountBalance;
  createdAt: Scalars['Timestamp']['output'];
  customer: Customer;
  customerId: Scalars['UUID']['output'];
  depositAccountId: Scalars['UUID']['output'];
  deposits: Array<Deposit>;
  history: DepositAccountHistoryEntryConnection;
  id: Scalars['ID']['output'];
  ledgerAccounts: DepositAccountLedgerAccounts;
  publicId: Scalars['PublicId']['output'];
  status: DepositAccountStatus;
  withdrawals: Array<Withdrawal>;
};


export type DepositAccountHistoryArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type DepositAccountBalance = {
  __typename?: 'DepositAccountBalance';
  pending: Scalars['UsdCents']['output'];
  settled: Scalars['UsdCents']['output'];
};

export type DepositAccountFreezeInput = {
  depositAccountId: Scalars['UUID']['input'];
};

export type DepositAccountFreezePayload = {
  __typename?: 'DepositAccountFreezePayload';
  account: DepositAccount;
};

export type DepositAccountHistoryEntry = CancelledWithdrawalEntry | DepositEntry | DisbursalEntry | PaymentEntry | UnknownEntry | WithdrawalEntry;

export type DepositAccountHistoryEntryConnection = {
  __typename?: 'DepositAccountHistoryEntryConnection';
  /** A list of edges. */
  edges: Array<DepositAccountHistoryEntryEdge>;
  /** A list of nodes. */
  nodes: Array<DepositAccountHistoryEntry>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DepositAccountHistoryEntryEdge = {
  __typename?: 'DepositAccountHistoryEntryEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: DepositAccountHistoryEntry;
};

export type DepositAccountLedgerAccounts = {
  __typename?: 'DepositAccountLedgerAccounts';
  depositAccount: LedgerAccount;
  depositAccountId: Scalars['UUID']['output'];
  frozenDepositAccount: LedgerAccount;
  frozenDepositAccountId: Scalars['UUID']['output'];
};

export enum DepositAccountStatus {
  Active = 'ACTIVE',
  Frozen = 'FROZEN',
  Inactive = 'INACTIVE'
}

export type DepositConnection = {
  __typename?: 'DepositConnection';
  /** A list of edges. */
  edges: Array<DepositEdge>;
  /** A list of nodes. */
  nodes: Array<Deposit>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DepositEdge = {
  __typename?: 'DepositEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Deposit;
};

export type DepositEntry = {
  __typename?: 'DepositEntry';
  deposit: Deposit;
  recordedAt: Scalars['Timestamp']['output'];
};

export type DepositModuleConfig = {
  __typename?: 'DepositModuleConfig';
  chartOfAccountBankDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountFinancialInstitutionDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountFrozenBankDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountFrozenFinancialInstitutionDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountFrozenNonDomiciledIndividualDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountFrozenPrivateCompanyDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountNonDomiciledIndividualDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountPrivateCompanyDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsFrozenGovernmentEntityDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsFrozenIndividualDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsGovernmentEntityDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsId?: Maybe<Scalars['UUID']['output']>;
  chartOfAccountsIndividualDepositAccountsParentCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsOmnibusParentCode?: Maybe<Scalars['String']['output']>;
};

export type DepositModuleConfigureInput = {
  chartOfAccountBankDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountFinancialInstitutionDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountFrozenBankDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountFrozenFinancialInstitutionDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountFrozenNonDomiciledIndividualDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountFrozenPrivateCompanyDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountNonDomiciledIndividualDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountPrivateCompanyDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountsFrozenGovernmentEntityDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountsFrozenIndividualDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountsGovernmentEntityDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountsIndividualDepositAccountsParentCode: Scalars['String']['input'];
  chartOfAccountsOmnibusParentCode: Scalars['String']['input'];
};

export type DepositModuleConfigurePayload = {
  __typename?: 'DepositModuleConfigurePayload';
  depositConfig: DepositModuleConfig;
};

export type DepositRecordInput = {
  amount: Scalars['UsdCents']['input'];
  depositAccountId: Scalars['UUID']['input'];
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type DepositRecordPayload = {
  __typename?: 'DepositRecordPayload';
  deposit: Deposit;
};

export type DepositRevertInput = {
  depositId: Scalars['UUID']['input'];
};

export type DepositRevertPayload = {
  __typename?: 'DepositRevertPayload';
  deposit: Deposit;
};

export enum DepositStatus {
  Confirmed = 'CONFIRMED',
  Reverted = 'REVERTED'
}

export type DisbursalEntry = {
  __typename?: 'DisbursalEntry';
  disbursal: CreditFacilityDisbursal;
  recordedAt: Scalars['Timestamp']['output'];
};

export enum DisbursalStatus {
  Approved = 'APPROVED',
  Confirmed = 'CONFIRMED',
  Denied = 'DENIED',
  New = 'NEW'
}

export type Disbursed = {
  __typename?: 'Disbursed';
  outstanding: Outstanding;
  outstandingPayable: Outstanding;
  total: Total;
};

export enum DocumentStatus {
  Active = 'ACTIVE',
  Archived = 'ARCHIVED',
  Deleted = 'DELETED',
  Failed = 'FAILED',
  New = 'NEW'
}

export type Duration = {
  __typename?: 'Duration';
  period: Period;
  units: Scalars['Int']['output'];
};

export type DurationInput = {
  period: Period;
  units: Scalars['Int']['input'];
};

export type FacilityRemaining = {
  __typename?: 'FacilityRemaining';
  usdBalance: Scalars['UsdCents']['output'];
};

export type FiniteCvlPct = {
  __typename?: 'FiniteCVLPct';
  value: Scalars['CVLPctValue']['output'];
};

export type GovernanceNavigationItems = {
  __typename?: 'GovernanceNavigationItems';
  approvalProcess: Scalars['Boolean']['output'];
  committee: Scalars['Boolean']['output'];
  policy: Scalars['Boolean']['output'];
};

export type InfiniteCvlPct = {
  __typename?: 'InfiniteCVLPct';
  isInfinite: Scalars['Boolean']['output'];
};

export type Interest = {
  __typename?: 'Interest';
  outstanding: Outstanding;
  outstandingPayable: Outstanding;
  total: Total;
};

export enum InterestInterval {
  EndOfDay = 'END_OF_DAY',
  EndOfMonth = 'END_OF_MONTH'
}

export type JournalEntry = {
  __typename?: 'JournalEntry';
  amount: JournalEntryAmount;
  createdAt: Scalars['Timestamp']['output'];
  description?: Maybe<Scalars['String']['output']>;
  direction: DebitOrCredit;
  entryId: Scalars['UUID']['output'];
  entryType: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  layer: Layer;
  ledgerAccount: LedgerAccount;
  ledgerTransaction: LedgerTransaction;
  txId: Scalars['UUID']['output'];
};

export type JournalEntryAmount = BtcAmount | UsdAmount;

export type JournalEntryConnection = {
  __typename?: 'JournalEntryConnection';
  /** A list of edges. */
  edges: Array<JournalEntryEdge>;
  /** A list of nodes. */
  nodes: Array<JournalEntry>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type JournalEntryEdge = {
  __typename?: 'JournalEntryEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: JournalEntry;
};

export type KomainuConfig = {
  apiKey: Scalars['String']['input'];
  apiSecret: Scalars['String']['input'];
  name: Scalars['String']['input'];
  secretKey: Scalars['String']['input'];
  testingInstance: Scalars['Boolean']['input'];
  webhookSecret: Scalars['String']['input'];
};

export enum KycLevel {
  Advanced = 'ADVANCED',
  Basic = 'BASIC',
  NotKyced = 'NOT_KYCED'
}

export enum KycVerification {
  PendingVerification = 'PENDING_VERIFICATION',
  Rejected = 'REJECTED',
  Verified = 'VERIFIED'
}

export enum Layer {
  Encumbrance = 'ENCUMBRANCE',
  Pending = 'PENDING',
  Settled = 'SETTLED'
}

export type LedgerAccount = {
  __typename?: 'LedgerAccount';
  ancestors: Array<LedgerAccount>;
  balanceRange: LedgerAccountBalanceRange;
  children: Array<LedgerAccount>;
  childrenWithCodeAndActivity: Array<LedgerAccount>;
  closestAccountWithCode?: Maybe<LedgerAccount>;
  code?: Maybe<Scalars['AccountCode']['output']>;
  entity?: Maybe<LedgerAccountEntity>;
  history: JournalEntryConnection;
  id: Scalars['ID']['output'];
  ledgerAccountId: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  normalBalanceType: DebitOrCredit;
};


export type LedgerAccountHistoryArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type LedgerAccountBalanceRange = BtcLedgerAccountBalanceRange | UsdLedgerAccountBalanceRange;

export type LedgerAccountBalanceRangeByCurrency = {
  __typename?: 'LedgerAccountBalanceRangeByCurrency';
  btc: BtcLedgerAccountBalanceRange;
  usd: UsdLedgerAccountBalanceRange;
};

export type LedgerAccountCsvCreateInput = {
  ledgerAccountId: Scalars['UUID']['input'];
};

export type LedgerAccountCsvCreatePayload = {
  __typename?: 'LedgerAccountCsvCreatePayload';
  accountingCsvDocument: AccountingCsvDocument;
};

export type LedgerAccountEntity = Collateral | CreditFacility | DepositAccount;

export type LedgerTransaction = {
  __typename?: 'LedgerTransaction';
  createdAt: Scalars['Timestamp']['output'];
  description?: Maybe<Scalars['String']['output']>;
  effective: Scalars['Date']['output'];
  entity?: Maybe<LedgerTransactionEntity>;
  entries: Array<JournalEntry>;
  id: Scalars['ID']['output'];
  ledgerTransactionId: Scalars['UUID']['output'];
};

export type LedgerTransactionConnection = {
  __typename?: 'LedgerTransactionConnection';
  /** A list of edges. */
  edges: Array<LedgerTransactionEdge>;
  /** A list of nodes. */
  nodes: Array<LedgerTransaction>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LedgerTransactionEdge = {
  __typename?: 'LedgerTransactionEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: LedgerTransaction;
};

export type LedgerTransactionEntity = CreditFacilityDisbursal | Deposit | Withdrawal;

export type Loan = {
  __typename?: 'Loan';
  collateralToMatchInitialCvl?: Maybe<Scalars['Satoshis']['output']>;
};

export type LoanAgreement = {
  __typename?: 'LoanAgreement';
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  status: LoanAgreementStatus;
};

export type LoanAgreementDownloadLinksGenerateInput = {
  loanAgreementId: Scalars['UUID']['input'];
};

export type LoanAgreementDownloadLinksGeneratePayload = {
  __typename?: 'LoanAgreementDownloadLinksGeneratePayload';
  link: Scalars['String']['output'];
  loanAgreementId: Scalars['UUID']['output'];
};

export type LoanAgreementGenerateInput = {
  customerId: Scalars['UUID']['input'];
};

export type LoanAgreementGeneratePayload = {
  __typename?: 'LoanAgreementGeneratePayload';
  loanAgreement: LoanAgreement;
};

export enum LoanAgreementStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  Pending = 'PENDING'
}

export type ManualTransactionEntryInput = {
  accountRef: Scalars['String']['input'];
  amount: Scalars['Decimal']['input'];
  currency: Scalars['String']['input'];
  description: Scalars['String']['input'];
  direction: DebitOrCredit;
};

export type ManualTransactionExecuteInput = {
  description: Scalars['String']['input'];
  effective?: InputMaybe<Scalars['Date']['input']>;
  entries: Array<ManualTransactionEntryInput>;
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type ManualTransactionExecutePayload = {
  __typename?: 'ManualTransactionExecutePayload';
  transaction: LedgerTransaction;
};

export type Me = {
  __typename?: 'Me';
  user: User;
  userCanCreateCustomer: Scalars['Boolean']['output'];
  userCanCreateTermsTemplate: Scalars['Boolean']['output'];
  userCanCreateUser: Scalars['Boolean']['output'];
  visibleNavigationItems: VisibleNavigationItems;
};

export type Mutation = {
  __typename?: 'Mutation';
  accountingCsvDownloadLinkGenerate: AccountingCsvDownloadLinkGeneratePayload;
  approvalProcessApprove: ApprovalProcessApprovePayload;
  approvalProcessDeny: ApprovalProcessDenyPayload;
  balanceSheetConfigure: BalanceSheetModuleConfigurePayload;
  chartOfAccountsAddChildNode: ChartOfAccountsAddChildNodePayload;
  chartOfAccountsAddRootNode: ChartOfAccountsAddRootNodePayload;
  chartOfAccountsCloseMonthly: ChartOfAccountsCloseMonthlyPayload;
  chartOfAccountsCsvImport: ChartOfAccountsCsvImportPayload;
  committeeAddUser: CommitteeAddUserPayload;
  committeeCreate: CommitteeCreatePayload;
  committeeRemoveUser: CommitteeRemoveUserPayload;
  creditFacilityCollateralUpdate: CreditFacilityCollateralUpdatePayload;
  creditFacilityComplete: CreditFacilityCompletePayload;
  creditFacilityDisbursalInitiate: CreditFacilityDisbursalInitiatePayload;
  creditFacilityPartialPaymentRecord: CreditFacilityPartialPaymentRecordPayload;
  creditFacilityPartialPaymentWithDateRecord: CreditFacilityPartialPaymentRecordPayload;
  creditFacilityProposalCollateralUpdate: CreditFacilityProposalCollateralUpdatePayload;
  creditFacilityProposalCreate: CreditFacilityProposalCreatePayload;
  creditModuleConfigure: CreditModuleConfigurePayload;
  custodianConfigUpdate: CustodianConfigUpdatePayload;
  custodianCreate: CustodianCreatePayload;
  customerCreate: CustomerCreatePayload;
  customerDocumentArchive: CustomerDocumentArchivePayload;
  customerDocumentAttach: CustomerDocumentCreatePayload;
  customerDocumentDelete: CustomerDocumentDeletePayload;
  customerDocumentDownloadLinkGenerate: CustomerDocumentDownloadLinksGeneratePayload;
  customerEmailUpdate: CustomerEmailUpdatePayload;
  customerTelegramIdUpdate: CustomerTelegramIdUpdatePayload;
  depositAccountFreeze: DepositAccountFreezePayload;
  depositModuleConfigure: DepositModuleConfigurePayload;
  depositRecord: DepositRecordPayload;
  depositRevert: DepositRevertPayload;
  ledgerAccountCsvCreate: LedgerAccountCsvCreatePayload;
  loanAgreementDownloadLinkGenerate: LoanAgreementDownloadLinksGeneratePayload;
  loanAgreementGenerate: LoanAgreementGeneratePayload;
  manualTransactionExecute: ManualTransactionExecutePayload;
  policyAssignCommittee: PolicyAssignCommitteePayload;
  profitAndLossStatementConfigure: ProfitAndLossStatementModuleConfigurePayload;
  reportFileGenerateDownloadLink: ReportFileGenerateDownloadLinkPayload;
  roleAddPermissionSets: RoleAddPermissionSetsPayload;
  roleCreate: RoleCreatePayload;
  roleRemovePermissionSets: RoleRemovePermissionSetsPayload;
  sumsubPermalinkCreate: SumsubPermalinkCreatePayload;
  termsTemplateCreate: TermsTemplateCreatePayload;
  termsTemplateUpdate: TermsTemplateUpdatePayload;
  triggerReportRun: ReportRunCreatePayload;
  userCreate: UserCreatePayload;
  userUpdateRole: UserUpdateRolePayload;
  withdrawalCancel: WithdrawalCancelPayload;
  withdrawalConfirm: WithdrawalConfirmPayload;
  withdrawalInitiate: WithdrawalInitiatePayload;
  withdrawalRevert: WithdrawalRevertPayload;
};


export type MutationAccountingCsvDownloadLinkGenerateArgs = {
  input: AccountingCsvDownloadLinkGenerateInput;
};


export type MutationApprovalProcessApproveArgs = {
  input: ApprovalProcessApproveInput;
};


export type MutationApprovalProcessDenyArgs = {
  input: ApprovalProcessDenyInput;
  reason: Scalars['String']['input'];
};


export type MutationBalanceSheetConfigureArgs = {
  input: BalanceSheetModuleConfigureInput;
};


export type MutationChartOfAccountsAddChildNodeArgs = {
  input: ChartOfAccountsAddChildNodeInput;
};


export type MutationChartOfAccountsAddRootNodeArgs = {
  input: ChartOfAccountsAddRootNodeInput;
};


export type MutationChartOfAccountsCloseMonthlyArgs = {
  input: ChartOfAccountsCloseMonthlyInput;
};


export type MutationChartOfAccountsCsvImportArgs = {
  input: ChartOfAccountsCsvImportInput;
};


export type MutationCommitteeAddUserArgs = {
  input: CommitteeAddUserInput;
};


export type MutationCommitteeCreateArgs = {
  input: CommitteeCreateInput;
};


export type MutationCommitteeRemoveUserArgs = {
  input: CommitteeRemoveUserInput;
};


export type MutationCreditFacilityCollateralUpdateArgs = {
  input: CreditFacilityCollateralUpdateInput;
};


export type MutationCreditFacilityCompleteArgs = {
  input: CreditFacilityCompleteInput;
};


export type MutationCreditFacilityDisbursalInitiateArgs = {
  input: CreditFacilityDisbursalInitiateInput;
};


export type MutationCreditFacilityPartialPaymentRecordArgs = {
  input: CreditFacilityPartialPaymentRecordInput;
};


export type MutationCreditFacilityPartialPaymentWithDateRecordArgs = {
  input: CreditFacilityPartialPaymentWithDateRecordInput;
};


export type MutationCreditFacilityProposalCollateralUpdateArgs = {
  input: CreditFacilityProposalCollateralUpdateInput;
};


export type MutationCreditFacilityProposalCreateArgs = {
  input: CreditFacilityProposalCreateInput;
};


export type MutationCreditModuleConfigureArgs = {
  input: CreditModuleConfigureInput;
};


export type MutationCustodianConfigUpdateArgs = {
  input: CustodianConfigUpdateInput;
};


export type MutationCustodianCreateArgs = {
  input: CustodianCreateInput;
};


export type MutationCustomerCreateArgs = {
  input: CustomerCreateInput;
};


export type MutationCustomerDocumentArchiveArgs = {
  input: CustomerDocumentArchiveInput;
};


export type MutationCustomerDocumentAttachArgs = {
  input: CustomerDocumentCreateInput;
};


export type MutationCustomerDocumentDeleteArgs = {
  input: CustomerDocumentDeleteInput;
};


export type MutationCustomerDocumentDownloadLinkGenerateArgs = {
  input: CustomerDocumentDownloadLinksGenerateInput;
};


export type MutationCustomerEmailUpdateArgs = {
  input: CustomerEmailUpdateInput;
};


export type MutationCustomerTelegramIdUpdateArgs = {
  input: CustomerTelegramIdUpdateInput;
};


export type MutationDepositAccountFreezeArgs = {
  input: DepositAccountFreezeInput;
};


export type MutationDepositModuleConfigureArgs = {
  input: DepositModuleConfigureInput;
};


export type MutationDepositRecordArgs = {
  input: DepositRecordInput;
};


export type MutationDepositRevertArgs = {
  input: DepositRevertInput;
};


export type MutationLedgerAccountCsvCreateArgs = {
  input: LedgerAccountCsvCreateInput;
};


export type MutationLoanAgreementDownloadLinkGenerateArgs = {
  input: LoanAgreementDownloadLinksGenerateInput;
};


export type MutationLoanAgreementGenerateArgs = {
  input: LoanAgreementGenerateInput;
};


export type MutationManualTransactionExecuteArgs = {
  input: ManualTransactionExecuteInput;
};


export type MutationPolicyAssignCommitteeArgs = {
  input: PolicyAssignCommitteeInput;
};


export type MutationProfitAndLossStatementConfigureArgs = {
  input: ProfitAndLossModuleConfigureInput;
};


export type MutationReportFileGenerateDownloadLinkArgs = {
  input: ReportFileGenerateDownloadLinkInput;
};


export type MutationRoleAddPermissionSetsArgs = {
  input: RoleAddPermissionSetsInput;
};


export type MutationRoleCreateArgs = {
  input: RoleCreateInput;
};


export type MutationRoleRemovePermissionSetsArgs = {
  input: RoleRemovePermissionSetsInput;
};


export type MutationSumsubPermalinkCreateArgs = {
  input: SumsubPermalinkCreateInput;
};


export type MutationTermsTemplateCreateArgs = {
  input: TermsTemplateCreateInput;
};


export type MutationTermsTemplateUpdateArgs = {
  input: TermsTemplateUpdateInput;
};


export type MutationUserCreateArgs = {
  input: UserCreateInput;
};


export type MutationUserUpdateRoleArgs = {
  input: UserUpdateRoleInput;
};


export type MutationWithdrawalCancelArgs = {
  input: WithdrawalCancelInput;
};


export type MutationWithdrawalConfirmArgs = {
  input: WithdrawalConfirmInput;
};


export type MutationWithdrawalInitiateArgs = {
  input: WithdrawalInitiateInput;
};


export type MutationWithdrawalRevertArgs = {
  input: WithdrawalRevertInput;
};

export type Outstanding = {
  __typename?: 'Outstanding';
  usdBalance: Scalars['UsdCents']['output'];
};

/** Information about pagination in a connection */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type PaymentEntry = {
  __typename?: 'PaymentEntry';
  payment: CreditFacilityPaymentAllocation;
  recordedAt: Scalars['Timestamp']['output'];
};

export enum Period {
  Days = 'DAYS',
  Months = 'MONTHS'
}

export type PermissionSet = {
  __typename?: 'PermissionSet';
  id: Scalars['ID']['output'];
  name: PermissionSetName;
  permissionSetId: Scalars['UUID']['output'];
};

export type PermissionSetConnection = {
  __typename?: 'PermissionSetConnection';
  /** A list of edges. */
  edges: Array<PermissionSetEdge>;
  /** A list of nodes. */
  nodes: Array<PermissionSet>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PermissionSetEdge = {
  __typename?: 'PermissionSetEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: PermissionSet;
};

export enum PermissionSetName {
  AccessViewer = 'ACCESS_VIEWER',
  AccessWriter = 'ACCESS_WRITER',
  AccountingViewer = 'ACCOUNTING_VIEWER',
  AccountingWriter = 'ACCOUNTING_WRITER',
  AuditViewer = 'AUDIT_VIEWER',
  ContractCreation = 'CONTRACT_CREATION',
  CreditPaymentDate = 'CREDIT_PAYMENT_DATE',
  CreditViewer = 'CREDIT_VIEWER',
  CreditWriter = 'CREDIT_WRITER',
  CustodyViewer = 'CUSTODY_VIEWER',
  CustodyWriter = 'CUSTODY_WRITER',
  CustomerViewer = 'CUSTOMER_VIEWER',
  CustomerWriter = 'CUSTOMER_WRITER',
  DashboardViewer = 'DASHBOARD_VIEWER',
  DepositFreeze = 'DEPOSIT_FREEZE',
  DepositViewer = 'DEPOSIT_VIEWER',
  DepositWriter = 'DEPOSIT_WRITER',
  GovernanceViewer = 'GOVERNANCE_VIEWER',
  GovernanceWriter = 'GOVERNANCE_WRITER',
  ReportViewer = 'REPORT_VIEWER',
  ReportWriter = 'REPORT_WRITER'
}

export type Policy = {
  __typename?: 'Policy';
  approvalProcessType: ApprovalProcessType;
  id: Scalars['ID']['output'];
  policyId: Scalars['UUID']['output'];
  rules: ApprovalRules;
};

export type PolicyAssignCommitteeInput = {
  committeeId: Scalars['UUID']['input'];
  policyId: Scalars['UUID']['input'];
  threshold: Scalars['Int']['input'];
};

export type PolicyAssignCommitteePayload = {
  __typename?: 'PolicyAssignCommitteePayload';
  policy: Policy;
};

export type PolicyConnection = {
  __typename?: 'PolicyConnection';
  /** A list of edges. */
  edges: Array<PolicyEdge>;
  /** A list of nodes. */
  nodes: Array<Policy>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PolicyEdge = {
  __typename?: 'PolicyEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Policy;
};

export type ProfitAndLossModuleConfigureInput = {
  chartOfAccountsCostOfRevenueCode: Scalars['String']['input'];
  chartOfAccountsExpensesCode: Scalars['String']['input'];
  chartOfAccountsRevenueCode: Scalars['String']['input'];
};

export type ProfitAndLossStatement = {
  __typename?: 'ProfitAndLossStatement';
  categories: Array<LedgerAccount>;
  name: Scalars['String']['output'];
  total: LedgerAccountBalanceRangeByCurrency;
};

export type ProfitAndLossStatementModuleConfig = {
  __typename?: 'ProfitAndLossStatementModuleConfig';
  chartOfAccountsCostOfRevenueCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsExpensesCode?: Maybe<Scalars['String']['output']>;
  chartOfAccountsId?: Maybe<Scalars['UUID']['output']>;
  chartOfAccountsRevenueCode?: Maybe<Scalars['String']['output']>;
};

export type ProfitAndLossStatementModuleConfigurePayload = {
  __typename?: 'ProfitAndLossStatementModuleConfigurePayload';
  profitAndLossConfig: ProfitAndLossStatementModuleConfig;
};

export type PublicIdTarget = CreditFacility | CreditFacilityDisbursal | Customer | Deposit | DepositAccount | Withdrawal;

export type Query = {
  __typename?: 'Query';
  accountEntryCsv?: Maybe<AccountingCsvDocument>;
  approvalProcess?: Maybe<ApprovalProcess>;
  approvalProcesses: ApprovalProcessConnection;
  audit: AuditEntryConnection;
  balanceSheet: BalanceSheet;
  balanceSheetConfig?: Maybe<BalanceSheetModuleConfig>;
  chartOfAccounts: ChartOfAccounts;
  committee?: Maybe<Committee>;
  committees: CommitteeConnection;
  creditConfig?: Maybe<CreditModuleConfig>;
  creditFacilities: CreditFacilityConnection;
  creditFacility?: Maybe<CreditFacility>;
  creditFacilityByPublicId?: Maybe<CreditFacility>;
  creditFacilityProposal?: Maybe<CreditFacilityProposal>;
  creditFacilityProposals: CreditFacilityProposalConnection;
  custodians: CustodianConnection;
  customer?: Maybe<Customer>;
  customerByEmail?: Maybe<Customer>;
  customerByPublicId?: Maybe<Customer>;
  customerDocument?: Maybe<CustomerDocument>;
  customers: CustomerConnection;
  dashboard: Dashboard;
  deposit?: Maybe<Deposit>;
  depositAccount?: Maybe<DepositAccount>;
  depositByPublicId?: Maybe<Deposit>;
  depositConfig?: Maybe<DepositModuleConfig>;
  deposits: DepositConnection;
  disbursal?: Maybe<CreditFacilityDisbursal>;
  disbursalByPublicId?: Maybe<CreditFacilityDisbursal>;
  disbursals: CreditFacilityDisbursalConnection;
  journalEntries: JournalEntryConnection;
  ledgerAccount?: Maybe<LedgerAccount>;
  ledgerAccountByCode?: Maybe<LedgerAccount>;
  ledgerTransaction?: Maybe<LedgerTransaction>;
  ledgerTransactionsForTemplateCode: LedgerTransactionConnection;
  loanAgreement?: Maybe<LoanAgreement>;
  me: Me;
  permissionSets: PermissionSetConnection;
  policies: PolicyConnection;
  policy?: Maybe<Policy>;
  profitAndLossStatement: ProfitAndLossStatement;
  profitAndLossStatementConfig?: Maybe<ProfitAndLossStatementModuleConfig>;
  publicIdTarget?: Maybe<PublicIdTarget>;
  realtimePrice: RealtimePrice;
  reportRun?: Maybe<ReportRun>;
  reportRuns: ReportRunConnection;
  role?: Maybe<Role>;
  roles: RoleConnection;
  termsTemplate?: Maybe<TermsTemplate>;
  termsTemplates: Array<TermsTemplate>;
  transactionTemplates: TransactionTemplateConnection;
  trialBalance: TrialBalance;
  user?: Maybe<User>;
  users: Array<User>;
  withdrawal?: Maybe<Withdrawal>;
  withdrawalByPublicId?: Maybe<Withdrawal>;
  withdrawals: WithdrawalConnection;
};


export type QueryAccountEntryCsvArgs = {
  ledgerAccountId: Scalars['UUID']['input'];
};


export type QueryApprovalProcessArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryApprovalProcessesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryAuditArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryBalanceSheetArgs = {
  from: Scalars['Date']['input'];
  until?: InputMaybe<Scalars['Date']['input']>;
};


export type QueryCommitteeArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCommitteesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryCreditFacilitiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CreditFacilitiesFilter>;
  first: Scalars['Int']['input'];
  sort?: InputMaybe<CreditFacilitiesSort>;
};


export type QueryCreditFacilityArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCreditFacilityByPublicIdArgs = {
  id: Scalars['PublicId']['input'];
};


export type QueryCreditFacilityProposalArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCreditFacilityProposalsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryCustodiansArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryCustomerArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCustomerByEmailArgs = {
  email: Scalars['String']['input'];
};


export type QueryCustomerByPublicIdArgs = {
  id: Scalars['PublicId']['input'];
};


export type QueryCustomerDocumentArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCustomersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CustomersFilter>;
  first: Scalars['Int']['input'];
  sort?: InputMaybe<CustomersSort>;
};


export type QueryDepositArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryDepositAccountArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryDepositByPublicIdArgs = {
  id: Scalars['PublicId']['input'];
};


export type QueryDepositsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryDisbursalArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryDisbursalByPublicIdArgs = {
  id: Scalars['PublicId']['input'];
};


export type QueryDisbursalsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryJournalEntriesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryLedgerAccountArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryLedgerAccountByCodeArgs = {
  code: Scalars['String']['input'];
};


export type QueryLedgerTransactionArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryLedgerTransactionsForTemplateCodeArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
  templateCode: Scalars['String']['input'];
};


export type QueryLoanAgreementArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryPermissionSetsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryPoliciesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryPolicyArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryProfitAndLossStatementArgs = {
  from: Scalars['Date']['input'];
  until?: InputMaybe<Scalars['Date']['input']>;
};


export type QueryPublicIdTargetArgs = {
  id: Scalars['PublicId']['input'];
};


export type QueryReportRunArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryReportRunsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryRoleArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryRolesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryTermsTemplateArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryTransactionTemplatesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryTrialBalanceArgs = {
  from: Scalars['Date']['input'];
  until: Scalars['Date']['input'];
};


export type QueryUserArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryWithdrawalArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryWithdrawalByPublicIdArgs = {
  id: Scalars['PublicId']['input'];
};


export type QueryWithdrawalsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type RealtimePrice = {
  __typename?: 'RealtimePrice';
  usdCentsPerBtc: Scalars['UsdCents']['output'];
};

export type Report = {
  __typename?: 'Report';
  createdAt: Scalars['Timestamp']['output'];
  externalId: Scalars['String']['output'];
  files: Array<ReportFile>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  norm: Scalars['String']['output'];
  reportId: Scalars['UUID']['output'];
  reportRun: ReportRun;
  runId: Scalars['UUID']['output'];
};

export type ReportFile = {
  __typename?: 'ReportFile';
  extension: Scalars['String']['output'];
};

export type ReportFileGenerateDownloadLinkInput = {
  extension: Scalars['String']['input'];
  reportId: Scalars['UUID']['input'];
};

export type ReportFileGenerateDownloadLinkPayload = {
  __typename?: 'ReportFileGenerateDownloadLinkPayload';
  url: Scalars['String']['output'];
};

export type ReportRun = {
  __typename?: 'ReportRun';
  endDate?: Maybe<Scalars['Timestamp']['output']>;
  executionDate: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  reportRunId: Scalars['UUID']['output'];
  reports: Array<Report>;
  runType: ReportRunType;
  startDate?: Maybe<Scalars['Timestamp']['output']>;
  state: ReportRunState;
};

export type ReportRunConnection = {
  __typename?: 'ReportRunConnection';
  /** A list of edges. */
  edges: Array<ReportRunEdge>;
  /** A list of nodes. */
  nodes: Array<ReportRun>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ReportRunCreatePayload = {
  __typename?: 'ReportRunCreatePayload';
  jobId: Scalars['String']['output'];
};

/** An edge in a connection. */
export type ReportRunEdge = {
  __typename?: 'ReportRunEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: ReportRun;
};

export enum ReportRunState {
  Failed = 'FAILED',
  Queued = 'QUEUED',
  Running = 'RUNNING',
  Success = 'SUCCESS'
}

export enum ReportRunType {
  Manual = 'MANUAL',
  Scheduled = 'SCHEDULED'
}

export type Role = {
  __typename?: 'Role';
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  permissionSets: Array<PermissionSet>;
  roleId: Scalars['UUID']['output'];
};

export type RoleAddPermissionSetsInput = {
  permissionSetIds: Array<Scalars['UUID']['input']>;
  roleId: Scalars['UUID']['input'];
};

export type RoleAddPermissionSetsPayload = {
  __typename?: 'RoleAddPermissionSetsPayload';
  role: Role;
};

export type RoleConnection = {
  __typename?: 'RoleConnection';
  /** A list of edges. */
  edges: Array<RoleEdge>;
  /** A list of nodes. */
  nodes: Array<Role>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type RoleCreateInput = {
  name: Scalars['String']['input'];
  permissionSetIds: Array<Scalars['UUID']['input']>;
};

export type RoleCreatePayload = {
  __typename?: 'RoleCreatePayload';
  role: Role;
};

/** An edge in a connection. */
export type RoleEdge = {
  __typename?: 'RoleEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Role;
};

export type RoleRemovePermissionSetsInput = {
  permissionSetIds: Array<Scalars['UUID']['input']>;
  roleId: Scalars['UUID']['input'];
};

export type RoleRemovePermissionSetsPayload = {
  __typename?: 'RoleRemovePermissionSetsPayload';
  role: Role;
};

export enum SortDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type SumsubPermalinkCreateInput = {
  customerId: Scalars['UUID']['input'];
};

export type SumsubPermalinkCreatePayload = {
  __typename?: 'SumsubPermalinkCreatePayload';
  url: Scalars['String']['output'];
};

export type System = {
  __typename?: 'System';
  name: Scalars['String']['output'];
};

export type SystemApproval = {
  __typename?: 'SystemApproval';
  autoApprove: Scalars['Boolean']['output'];
};

export type TermValues = {
  __typename?: 'TermValues';
  accrualCycleInterval: InterestInterval;
  accrualInterval: InterestInterval;
  annualRate: Scalars['AnnualRatePct']['output'];
  disburseAllAtActivation: Scalars['Boolean']['output'];
  duration: Duration;
  initialCvl: Cvlpct;
  liquidationCvl: Cvlpct;
  marginCallCvl: Cvlpct;
  oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['output'];
};

export type TermsInput = {
  accrualCycleInterval: InterestInterval;
  accrualInterval: InterestInterval;
  annualRate: Scalars['AnnualRatePct']['input'];
  disburseAllAtActivation: Scalars['Boolean']['input'];
  duration: DurationInput;
  initialCvl: Scalars['CVLPctValue']['input'];
  interestDueDurationFromAccrual: DurationInput;
  liquidationCvl: Scalars['CVLPctValue']['input'];
  marginCallCvl: Scalars['CVLPctValue']['input'];
  obligationLiquidationDurationFromDue: DurationInput;
  obligationOverdueDurationFromDue: DurationInput;
  oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['input'];
};

export type TermsTemplate = {
  __typename?: 'TermsTemplate';
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  termsId: Scalars['UUID']['output'];
  userCanUpdateTermsTemplate: Scalars['Boolean']['output'];
  values: TermValues;
};

export type TermsTemplateCreateInput = {
  accrualCycleInterval: InterestInterval;
  accrualInterval: InterestInterval;
  annualRate: Scalars['AnnualRatePct']['input'];
  disburseAllAtActivation: Scalars['Boolean']['input'];
  duration: DurationInput;
  initialCvl: Scalars['CVLPctValue']['input'];
  interestDueDurationFromAccrual: DurationInput;
  liquidationCvl: Scalars['CVLPctValue']['input'];
  marginCallCvl: Scalars['CVLPctValue']['input'];
  name: Scalars['String']['input'];
  obligationLiquidationDurationFromDue: DurationInput;
  obligationOverdueDurationFromDue: DurationInput;
  oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['input'];
};

export type TermsTemplateCreatePayload = {
  __typename?: 'TermsTemplateCreatePayload';
  termsTemplate: TermsTemplate;
};

export type TermsTemplateUpdateInput = {
  accrualCycleInterval: InterestInterval;
  accrualInterval: InterestInterval;
  annualRate: Scalars['AnnualRatePct']['input'];
  disburseAllAtActivation: Scalars['Boolean']['input'];
  duration: DurationInput;
  id: Scalars['UUID']['input'];
  initialCvl: Scalars['CVLPctValue']['input'];
  interestDueDurationFromAccrual: DurationInput;
  liquidationCvl: Scalars['CVLPctValue']['input'];
  marginCallCvl: Scalars['CVLPctValue']['input'];
  obligationLiquidationDurationFromDue: DurationInput;
  obligationOverdueDurationFromDue: DurationInput;
  oneTimeFeeRate: Scalars['OneTimeFeeRatePct']['input'];
};

export type TermsTemplateUpdatePayload = {
  __typename?: 'TermsTemplateUpdatePayload';
  termsTemplate: TermsTemplate;
};

export type Total = {
  __typename?: 'Total';
  usdBalance: Scalars['UsdCents']['output'];
};

export type Transaction = Deposit | Withdrawal;

export type TransactionTemplate = {
  __typename?: 'TransactionTemplate';
  code: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
};

export type TransactionTemplateConnection = {
  __typename?: 'TransactionTemplateConnection';
  /** A list of edges. */
  edges: Array<TransactionTemplateEdge>;
  /** A list of nodes. */
  nodes: Array<TransactionTemplate>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TransactionTemplateEdge = {
  __typename?: 'TransactionTemplateEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: TransactionTemplate;
};

export type TrialBalance = {
  __typename?: 'TrialBalance';
  accounts: Array<LedgerAccount>;
  name: Scalars['String']['output'];
  total: LedgerAccountBalanceRangeByCurrency;
};

export type UnknownEntry = {
  __typename?: 'UnknownEntry';
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type UsdAmount = {
  __typename?: 'UsdAmount';
  usd: Scalars['UsdCents']['output'];
};

export type UsdBalanceDetails = {
  __typename?: 'UsdBalanceDetails';
  credit: Scalars['UsdCents']['output'];
  debit: Scalars['UsdCents']['output'];
  net: Scalars['SignedUsdCents']['output'];
};

export type UsdLedgerAccountBalance = {
  __typename?: 'UsdLedgerAccountBalance';
  encumbrance: UsdBalanceDetails;
  pending: UsdBalanceDetails;
  settled: UsdBalanceDetails;
};

export type UsdLedgerAccountBalanceRange = {
  __typename?: 'UsdLedgerAccountBalanceRange';
  close: UsdLedgerAccountBalance;
  open: UsdLedgerAccountBalance;
  periodActivity: UsdLedgerAccountBalance;
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['Timestamp']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  role: Role;
  userCanUpdateRoleOfUser: Scalars['Boolean']['output'];
  userId: Scalars['UUID']['output'];
};

export type UserCreateInput = {
  email: Scalars['String']['input'];
  roleId: Scalars['UUID']['input'];
};

export type UserCreatePayload = {
  __typename?: 'UserCreatePayload';
  user: User;
};

export type UserUpdateRoleInput = {
  id: Scalars['UUID']['input'];
  roleId: Scalars['UUID']['input'];
};

export type UserUpdateRolePayload = {
  __typename?: 'UserUpdateRolePayload';
  user: User;
};

export type VisibleNavigationItems = {
  __typename?: 'VisibleNavigationItems';
  audit: Scalars['Boolean']['output'];
  creditFacilities: Scalars['Boolean']['output'];
  customer: Scalars['Boolean']['output'];
  deposit: Scalars['Boolean']['output'];
  financials: Scalars['Boolean']['output'];
  governance: GovernanceNavigationItems;
  term: Scalars['Boolean']['output'];
  user: Scalars['Boolean']['output'];
  withdraw: Scalars['Boolean']['output'];
};

export type Wallet = {
  __typename?: 'Wallet';
  address: Scalars['String']['output'];
  custodian: Custodian;
  id: Scalars['ID']['output'];
  network: WalletNetwork;
  walletId: Scalars['UUID']['output'];
};

export enum WalletNetwork {
  Mainnet = 'MAINNET',
  Testnet_3 = 'TESTNET_3',
  Testnet_4 = 'TESTNET_4'
}

export type Withdrawal = {
  __typename?: 'Withdrawal';
  account: DepositAccount;
  accountId: Scalars['UUID']['output'];
  amount: Scalars['UsdCents']['output'];
  approvalProcess: ApprovalProcess;
  approvalProcessId: Scalars['UUID']['output'];
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  ledgerTransactions: Array<LedgerTransaction>;
  publicId: Scalars['PublicId']['output'];
  reference: Scalars['String']['output'];
  status: WithdrawalStatus;
  withdrawalId: Scalars['UUID']['output'];
};

export type WithdrawalCancelInput = {
  withdrawalId: Scalars['UUID']['input'];
};

export type WithdrawalCancelPayload = {
  __typename?: 'WithdrawalCancelPayload';
  withdrawal: Withdrawal;
};

export type WithdrawalConfirmInput = {
  withdrawalId: Scalars['UUID']['input'];
};

export type WithdrawalConfirmPayload = {
  __typename?: 'WithdrawalConfirmPayload';
  withdrawal: Withdrawal;
};

export type WithdrawalConnection = {
  __typename?: 'WithdrawalConnection';
  /** A list of edges. */
  edges: Array<WithdrawalEdge>;
  /** A list of nodes. */
  nodes: Array<Withdrawal>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type WithdrawalEdge = {
  __typename?: 'WithdrawalEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Withdrawal;
};

export type WithdrawalEntry = {
  __typename?: 'WithdrawalEntry';
  recordedAt: Scalars['Timestamp']['output'];
  withdrawal: Withdrawal;
};

export type WithdrawalInitiateInput = {
  amount: Scalars['UsdCents']['input'];
  depositAccountId: Scalars['UUID']['input'];
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type WithdrawalInitiatePayload = {
  __typename?: 'WithdrawalInitiatePayload';
  withdrawal: Withdrawal;
};

export type WithdrawalRevertInput = {
  withdrawalId: Scalars['UUID']['input'];
};

export type WithdrawalRevertPayload = {
  __typename?: 'WithdrawalRevertPayload';
  withdrawal: Withdrawal;
};

export enum WithdrawalStatus {
  Cancelled = 'CANCELLED',
  Confirmed = 'CONFIRMED',
  Denied = 'DENIED',
  PendingApproval = 'PENDING_APPROVAL',
  PendingConfirmation = 'PENDING_CONFIRMATION',
  Reverted = 'REVERTED'
}

export type ApprovalProcessFieldsFragment = { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
    | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
    | { __typename?: 'SystemApproval', autoApprove: boolean }
  , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> };

export type ApprovalProcessApproveMutationVariables = Exact<{
  input: ApprovalProcessApproveInput;
}>;


export type ApprovalProcessApproveMutation = { __typename?: 'Mutation', approvalProcessApprove: { __typename?: 'ApprovalProcessApprovePayload', approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
        | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
        | { __typename?: 'SystemApproval', autoApprove: boolean }
      , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } };

export type ApprovalProcessDenyMutationVariables = Exact<{
  input: ApprovalProcessDenyInput;
  reason: Scalars['String']['input'];
}>;


export type ApprovalProcessDenyMutation = { __typename?: 'Mutation', approvalProcessDeny: { __typename?: 'ApprovalProcessDenyPayload', approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
        | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
        | { __typename?: 'SystemApproval', autoApprove: boolean }
      , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } };

export type AllActionsQueryVariables = Exact<{ [key: string]: never; }>;


export type AllActionsQuery = { __typename?: 'Query', approvalProcesses: { __typename?: 'ApprovalProcessConnection', pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, hasPreviousPage: boolean }, edges: Array<{ __typename?: 'ApprovalProcessEdge', cursor: string, node: { __typename?: 'ApprovalProcess', id: string, approvalProcessType: ApprovalProcessType, status: ApprovalProcessStatus, userCanSubmitDecision: boolean, createdAt: any, target:
          | { __typename: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, creditFacility: { __typename?: 'CreditFacility', publicId: any, customer: { __typename?: 'Customer', email: string } } }
          | { __typename: 'CreditFacilityProposal', creditFacilityProposalId: string, customer: { __typename?: 'Customer', email: string } }
          | { __typename: 'Withdrawal', withdrawalId: string, publicId: any, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', email: string } } }
         } }> } };

export type AuditLogsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type AuditLogsQuery = { __typename?: 'Query', audit: { __typename?: 'AuditEntryConnection', edges: Array<{ __typename?: 'AuditEntryEdge', cursor: string, node: { __typename?: 'AuditEntry', id: string, auditEntryId: any, object: string, action: string, authorized: boolean, recordedAt: any, subject:
          | { __typename?: 'System', name: string }
          | { __typename?: 'User', userId: string, email: string, role: { __typename?: 'Role', roleId: string, name: string } }
         } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type BalanceSheetQueryVariables = Exact<{
  from: Scalars['Date']['input'];
  until?: InputMaybe<Scalars['Date']['input']>;
}>;


export type BalanceSheetQuery = { __typename?: 'Query', balanceSheet: { __typename?: 'BalanceSheet', name: string, balance:
      | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
      | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
    , categories: Array<{ __typename?: 'LedgerAccount', id: string, name: string, code?: any | null, balanceRange:
        | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
        | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
      , children: Array<{ __typename?: 'LedgerAccount', id: string, name: string, code?: any | null, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
         }> }> } };

export type UsdBalanceFragmentFragment = { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } };

export type BtcBalanceFragmentFragment = { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } };

export type UsdLedgerBalanceRangeFragmentFragment = { __typename?: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } };

export type BtcLedgerBalanceRangeFragmentFragment = { __typename?: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } };

export type ChartOfAccountsForLedgerQueryVariables = Exact<{ [key: string]: never; }>;


export type ChartOfAccountsForLedgerQuery = { __typename?: 'Query', chartOfAccounts: { __typename?: 'ChartOfAccounts', id: string, chartId: string, name: string } };

export type ChartOfAccountsAddChildNodeMutationVariables = Exact<{
  input: ChartOfAccountsAddChildNodeInput;
}>;


export type ChartOfAccountsAddChildNodeMutation = { __typename?: 'Mutation', chartOfAccountsAddChildNode: { __typename?: 'ChartOfAccountsAddChildNodePayload', chartOfAccounts: { __typename?: 'ChartOfAccounts', id: string, chartId: string, name: string, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any }> }> }> }> }> }> }> }> }> }> }> }> }> }> } } };

export type ChartOfAccountsAddRootNodeMutationVariables = Exact<{
  input: ChartOfAccountsAddRootNodeInput;
}>;


export type ChartOfAccountsAddRootNodeMutation = { __typename?: 'Mutation', chartOfAccountsAddRootNode: { __typename?: 'ChartOfAccountsAddRootNodePayload', chartOfAccounts: { __typename?: 'ChartOfAccounts', id: string, chartId: string, name: string, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any }> }> }> }> }> }> }> }> }> }> }> }> }> }> } } };

export type ChartAccountBaseFragment = { __typename?: 'ChartNode', name: string, accountCode: any };

export type ChartOfAccountsFieldsFragment = { __typename?: 'ChartOfAccounts', id: string, chartId: string, name: string, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any }> }> }> }> }> }> }> }> }> }> }> }> }> }> };

export type ChartOfAccountsQueryVariables = Exact<{ [key: string]: never; }>;


export type ChartOfAccountsQuery = { __typename?: 'Query', chartOfAccounts: { __typename?: 'ChartOfAccounts', id: string, chartId: string, name: string, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any, children: Array<{ __typename?: 'ChartNode', name: string, accountCode: any }> }> }> }> }> }> }> }> }> }> }> }> }> }> } };

export type ChartOfAccountsCsvImportMutationVariables = Exact<{
  input: ChartOfAccountsCsvImportInput;
}>;


export type ChartOfAccountsCsvImportMutation = { __typename?: 'Mutation', chartOfAccountsCsvImport: { __typename?: 'ChartOfAccountsCsvImportPayload', chartOfAccounts: { __typename?: 'ChartOfAccounts', chartId: string } } };

export type GetCommitteeDetailsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCommitteeDetailsQuery = { __typename?: 'Query', committee?: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } | null };

export type CommitteeAddUserMutationVariables = Exact<{
  input: CommitteeAddUserInput;
}>;


export type CommitteeAddUserMutation = { __typename?: 'Mutation', committeeAddUser: { __typename?: 'CommitteeAddUserPayload', committee: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } } };

export type CreateCommitteeMutationVariables = Exact<{
  input: CommitteeCreateInput;
}>;


export type CreateCommitteeMutation = { __typename?: 'Mutation', committeeCreate: { __typename?: 'CommitteeCreatePayload', committee: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } } };

export type CommitteeFieldsFragment = { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> };

export type CommitteesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type CommitteesQuery = { __typename?: 'Query', committees: { __typename?: 'CommitteeConnection', edges: Array<{ __typename?: 'CommitteeEdge', cursor: string, node: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type CommitteeRemoveUserMutationVariables = Exact<{
  input: CommitteeRemoveUserInput;
}>;


export type CommitteeRemoveUserMutation = { __typename?: 'Mutation', committeeRemoveUser: { __typename?: 'CommitteeRemoveUserPayload', committee: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } } };

export type DisbursalOnFacilityPageFragment = { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, status: DisbursalStatus, createdAt: any };

export type GetCreditFacilityDisbursalsQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type GetCreditFacilityDisbursalsQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, status: DisbursalStatus, createdAt: any }> } | null };

export type CreditFacilityLayoutFragmentFragment = { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, currentCvl:
    | { __typename: 'FiniteCVLPct', value: any }
    | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
  , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, disburseAllAtActivation: boolean, oneTimeFeeRate: any, liquidationCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , marginCallCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , initialCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null };

export type GetCreditFacilityLayoutDetailsQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type GetCreditFacilityLayoutDetailsQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, currentCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, disburseAllAtActivation: boolean, oneTimeFeeRate: any, liquidationCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , marginCallCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , initialCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } | null };

export type LedgerAccountInfoFragment = { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
    | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
    | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
   };

export type CreditFacilityLedgerAccountsQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type CreditFacilityLedgerAccountsQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, ledgerAccounts: { __typename?: 'CreditFacilityLedgerAccounts', facilityAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, inLiquidationAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, disbursedReceivableNotYetDueAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, disbursedReceivableDueAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, disbursedReceivableOverdueAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, disbursedDefaultedAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, collateralAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, interestReceivableNotYetDueAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, interestReceivableDueAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, interestReceivableOverdueAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, interestDefaultedAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, interestIncomeAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         }, feeIncomeAccount: { __typename?: 'LedgerAccount', name: string, ledgerAccountId: string, normalBalanceType: DebitOrCredit, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', net: SignedUsdCents } } }
         } } } | null };

export type CreditFacilityHistoryFragmentFragment = { __typename?: 'CreditFacility', id: string, creditFacilityId: string, history: Array<
    | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
    | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
    | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
    | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
    | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
    | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
    | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
  > };

export type GetCreditFacilityHistoryQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type GetCreditFacilityHistoryQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, history: Array<
      | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
      | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
      | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
      | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
      | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
      | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
      | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
    > } | null };

export type RepaymentOnFacilityPageFragment = { __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any };

export type GetCreditFacilityRepaymentPlanQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type GetCreditFacilityRepaymentPlanQuery = { __typename?: 'Query', creditFacilityByPublicId?: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }> } | null };

export type CreditFacilityCollateralUpdateMutationVariables = Exact<{
  input: CreditFacilityCollateralUpdateInput;
}>;


export type CreditFacilityCollateralUpdateMutation = { __typename?: 'Mutation', creditFacilityCollateralUpdate: { __typename?: 'CreditFacilityCollateralUpdatePayload', creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, balance: { __typename?: 'CreditFacilityBalance', collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, history: Array<
        | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
        | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
        | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
        | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
      >, currentCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, disburseAllAtActivation: boolean, oneTimeFeeRate: any, liquidationCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , marginCallCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , initialCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } } };

type CvlPctData_FiniteCvlPct_Fragment = { __typename: 'FiniteCVLPct', value: any };

type CvlPctData_InfiniteCvlPct_Fragment = { __typename: 'InfiniteCVLPct', isInfinite: boolean };

export type CvlPctDataFragment =
  | CvlPctData_FiniteCvlPct_Fragment
  | CvlPctData_InfiniteCvlPct_Fragment
;

export type CreditFacilitiesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<CreditFacilitiesSort>;
  filter?: InputMaybe<CreditFacilitiesFilter>;
}>;


export type CreditFacilitiesQuery = { __typename?: 'Query', creditFacilities: { __typename?: 'CreditFacilityConnection', edges: Array<{ __typename?: 'CreditFacilityEdge', cursor: string, node: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, publicId: any, collateralizationState: CollateralizationState, activatedAt: any, status: CreditFacilityStatus, facilityAmount: UsdCents, currentCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , balance: { __typename?: 'CreditFacilityBalance', collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, customer: { __typename?: 'Customer', customerId: string, email: string } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, hasNextPage: boolean } } };

export type CreditFacilityPartialPaymentRecordMutationVariables = Exact<{
  input: CreditFacilityPartialPaymentRecordInput;
}>;


export type CreditFacilityPartialPaymentRecordMutation = { __typename?: 'Mutation', creditFacilityPartialPaymentRecord: { __typename?: 'CreditFacilityPartialPaymentRecordPayload', creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, history: Array<
        | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
        | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
        | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
        | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
      >, currentCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, disburseAllAtActivation: boolean, oneTimeFeeRate: any, liquidationCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , marginCallCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , initialCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } } };

export type CreditFacilityPartialPaymentWithDateRecordMutationVariables = Exact<{
  input: CreditFacilityPartialPaymentWithDateRecordInput;
}>;


export type CreditFacilityPartialPaymentWithDateRecordMutation = { __typename?: 'Mutation', creditFacilityPartialPaymentWithDateRecord: { __typename?: 'CreditFacilityPartialPaymentRecordPayload', creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, history: Array<
        | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
        | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
        | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
        | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
        | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
      >, currentCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus }>, balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, disburseAllAtActivation: boolean, oneTimeFeeRate: any, liquidationCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , marginCallCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , initialCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } } };

export type CreditFacilityProposalLayoutFragmentFragment = { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, disburseAllAtActivation: boolean, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , marginCallCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , initialCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
     }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
      | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
      | { __typename?: 'SystemApproval', autoApprove: boolean }
    , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } };

export type GetCreditFacilityProposalLayoutDetailsQueryVariables = Exact<{
  creditFacilityProposalId: Scalars['UUID']['input'];
}>;


export type GetCreditFacilityProposalLayoutDetailsQuery = { __typename?: 'Query', creditFacilityProposal?: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, disburseAllAtActivation: boolean, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , marginCallCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , initialCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
       }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
        | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
        | { __typename?: 'SystemApproval', autoApprove: boolean }
      , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } | null };

export type GetCreditFacilityProposalRepaymentPlanQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCreditFacilityProposalRepaymentPlanQuery = { __typename?: 'Query', creditFacilityProposal?: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }> } | null };

export type CreditFacilityProposalCollateralUpdateMutationVariables = Exact<{
  input: CreditFacilityProposalCollateralUpdateInput;
}>;


export type CreditFacilityProposalCollateralUpdateMutation = { __typename?: 'Mutation', creditFacilityProposalCollateralUpdate: { __typename?: 'CreditFacilityProposalCollateralUpdatePayload', creditFacilityProposal: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, approvalProcessId: string, createdAt: any, status: CreditFacilityProposalStatus, facilityAmount: UsdCents, collateralizationState: CreditFacilityProposalCollateralizationState, collateralToMatchInitialCvl?: Satoshis | null, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, customerType: CustomerType, publicId: any, email: string }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, accrualInterval: InterestInterval, accrualCycleInterval: InterestInterval, oneTimeFeeRate: any, disburseAllAtActivation: boolean, duration: { __typename?: 'Duration', period: Period, units: number }, liquidationCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , marginCallCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , initialCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
         }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
          | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
          | { __typename?: 'SystemApproval', autoApprove: boolean }
        , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } } };

export type CreditFacilityProposalCreateMutationVariables = Exact<{
  input: CreditFacilityProposalCreateInput;
}>;


export type CreditFacilityProposalCreateMutation = { __typename?: 'Mutation', creditFacilityProposalCreate: { __typename?: 'CreditFacilityProposalCreatePayload', creditFacilityProposal: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, customer: { __typename?: 'Customer', id: string, email: string, creditFacilityProposals: Array<{ __typename?: 'CreditFacilityProposal', id: string }> } } } };

export type CreditFacilityProposalsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type CreditFacilityProposalsQuery = { __typename?: 'Query', creditFacilityProposals: { __typename?: 'CreditFacilityProposalConnection', edges: Array<{ __typename?: 'CreditFacilityProposalEdge', cursor: string, node: { __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, createdAt: any, collateralizationState: CreditFacilityProposalCollateralizationState, facilityAmount: UsdCents, status: CreditFacilityProposalStatus, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, email: string } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, hasNextPage: boolean } } };

export type CustodianCreateMutationVariables = Exact<{
  input: CustodianCreateInput;
}>;


export type CustodianCreateMutation = { __typename?: 'Mutation', custodianCreate: { __typename?: 'CustodianCreatePayload', custodian: { __typename?: 'Custodian', id: string, custodianId: string, name: string, createdAt: any } } };

export type CustodianFieldsFragment = { __typename?: 'Custodian', id: string, custodianId: string, createdAt: any, name: string };

export type CustodiansQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type CustodiansQuery = { __typename?: 'Query', custodians: { __typename?: 'CustodianConnection', edges: Array<{ __typename?: 'CustodianEdge', cursor: string, node: { __typename?: 'Custodian', id: string, custodianId: string, createdAt: any, name: string } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type GetCustomerCreditFacilitiesQueryVariables = Exact<{
  id: Scalars['PublicId']['input'];
}>;


export type GetCustomerCreditFacilitiesQuery = { __typename?: 'Query', customerByPublicId?: { __typename?: 'Customer', id: string, creditFacilities: Array<{ __typename?: 'CreditFacility', id: string, creditFacilityId: string, publicId: any, collateralizationState: CollateralizationState, status: CreditFacilityStatus, activatedAt: any, balance: { __typename?: 'CreditFacilityBalance', collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } } }> } | null };

export type GetCustomerCreditFacilityProposalsQueryVariables = Exact<{
  id: Scalars['PublicId']['input'];
}>;


export type GetCustomerCreditFacilityProposalsQuery = { __typename?: 'Query', customerByPublicId?: { __typename?: 'Customer', id: string, creditFacilityProposals: Array<{ __typename?: 'CreditFacilityProposal', id: string, creditFacilityProposalId: string, createdAt: any, collateralizationState: CreditFacilityProposalCollateralizationState, facilityAmount: UsdCents, status: CreditFacilityProposalStatus, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis }, customer: { __typename?: 'Customer', customerId: string, email: string } }> } | null };

export type CustomerDocumentDownloadLinkGenerateMutationVariables = Exact<{
  input: CustomerDocumentDownloadLinksGenerateInput;
}>;


export type CustomerDocumentDownloadLinkGenerateMutation = { __typename?: 'Mutation', customerDocumentDownloadLinkGenerate: { __typename?: 'CustomerDocumentDownloadLinksGeneratePayload', link: string } };

export type CustomerDocumentDeleteMutationVariables = Exact<{
  input: CustomerDocumentDeleteInput;
}>;


export type CustomerDocumentDeleteMutation = { __typename?: 'Mutation', customerDocumentDelete: { __typename?: 'CustomerDocumentDeletePayload', deletedDocumentId: string } };

export type CustomerDocumentAttachMutationVariables = Exact<{
  file: Scalars['Upload']['input'];
  customerId: Scalars['UUID']['input'];
}>;


export type CustomerDocumentAttachMutation = { __typename?: 'Mutation', customerDocumentAttach: { __typename?: 'CustomerDocumentCreatePayload', document: { __typename?: 'CustomerDocument', id: string, customerId: string, filename: string } } };

export type GetCustomerDocumentsQueryVariables = Exact<{
  id: Scalars['PublicId']['input'];
}>;


export type GetCustomerDocumentsQuery = { __typename?: 'Query', customerByPublicId?: { __typename?: 'Customer', id: string, customerId: string, documents: Array<{ __typename?: 'CustomerDocument', id: string, filename: string, documentId: string }> } | null };

export type DepositAccountFreezeMutationVariables = Exact<{
  input: DepositAccountFreezeInput;
}>;


export type DepositAccountFreezeMutation = { __typename?: 'Mutation', depositAccountFreeze: { __typename?: 'DepositAccountFreezePayload', account: { __typename?: 'DepositAccount', id: string } } };

export type GetKycStatusForCustomerQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetKycStatusForCustomerQuery = { __typename?: 'Query', customer?: { __typename?: 'Customer', customerId: string, kycVerification: KycVerification, level: KycLevel, applicantId?: string | null } | null };

export type SumsubPermalinkCreateMutationVariables = Exact<{
  input: SumsubPermalinkCreateInput;
}>;


export type SumsubPermalinkCreateMutation = { __typename?: 'Mutation', sumsubPermalinkCreate: { __typename?: 'SumsubPermalinkCreatePayload', url: string } };

export type GetCustomerBasicDetailsQueryVariables = Exact<{
  id: Scalars['PublicId']['input'];
}>;


export type GetCustomerBasicDetailsQuery = { __typename?: 'Query', customerByPublicId?: { __typename?: 'Customer', id: string, customerId: string, email: string, telegramId: string, kycVerification: KycVerification, activity: Activity, level: KycLevel, customerType: CustomerType, createdAt: any, publicId: any, depositAccount?: { __typename?: 'DepositAccount', id: string, status: DepositAccountStatus, publicId: any, depositAccountId: string, balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents }, ledgerAccounts: { __typename?: 'DepositAccountLedgerAccounts', depositAccountId: string, frozenDepositAccountId: string } } | null } | null };

export type GetCustomerTransactionHistoryQueryVariables = Exact<{
  id: Scalars['PublicId']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetCustomerTransactionHistoryQuery = { __typename?: 'Query', customerByPublicId?: { __typename?: 'Customer', id: string, customerId: string, customerType: CustomerType, depositAccount?: { __typename?: 'DepositAccount', depositAccountId: string, history: { __typename?: 'DepositAccountHistoryEntryConnection', pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null, hasPreviousPage: boolean, startCursor?: string | null }, edges: Array<{ __typename?: 'DepositAccountHistoryEntryEdge', cursor: string, node:
            | { __typename?: 'CancelledWithdrawalEntry', recordedAt: any, withdrawal: { __typename?: 'Withdrawal', id: string, withdrawalId: string, publicId: any, accountId: string, amount: UsdCents, createdAt: any, reference: string, status: WithdrawalStatus } }
            | { __typename?: 'DepositEntry', recordedAt: any, deposit: { __typename?: 'Deposit', id: string, depositId: string, publicId: any, accountId: string, amount: UsdCents, createdAt: any, reference: string, status: DepositStatus } }
            | { __typename?: 'DisbursalEntry', recordedAt: any, disbursal: { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, createdAt: any, status: DisbursalStatus } }
            | { __typename?: 'PaymentEntry', recordedAt: any, payment: { __typename?: 'CreditFacilityPaymentAllocation', id: string, paymentAllocationId: string, amount: UsdCents, createdAt: any } }
            | { __typename?: 'UnknownEntry' }
            | { __typename?: 'WithdrawalEntry', recordedAt: any, withdrawal: { __typename?: 'Withdrawal', id: string, withdrawalId: string, publicId: any, accountId: string, amount: UsdCents, createdAt: any, reference: string, status: WithdrawalStatus } }
           }> } } | null } | null };

export type CustomerEmailUpdateMutationVariables = Exact<{
  input: CustomerEmailUpdateInput;
}>;


export type CustomerEmailUpdateMutation = { __typename?: 'Mutation', customerEmailUpdate: { __typename?: 'CustomerEmailUpdatePayload', customer: { __typename?: 'Customer', id: string, email: string } } };

export type CustomerTelegramIdUpdateMutationVariables = Exact<{
  input: CustomerTelegramIdUpdateInput;
}>;


export type CustomerTelegramIdUpdateMutation = { __typename?: 'Mutation', customerTelegramIdUpdate: { __typename?: 'CustomerTelegramIdUpdatePayload', customer: { __typename?: 'Customer', id: string, telegramId: string } } };

export type CustomerCreateMutationVariables = Exact<{
  input: CustomerCreateInput;
}>;


export type CustomerCreateMutation = { __typename?: 'Mutation', customerCreate: { __typename?: 'CustomerCreatePayload', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, email: string, kycVerification: KycVerification, level: KycLevel, applicantId?: string | null } } };

export type CustomersQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<CustomersSort>;
  filter?: InputMaybe<CustomersFilter>;
}>;


export type CustomersQuery = { __typename?: 'Query', customers: { __typename?: 'CustomerConnection', edges: Array<{ __typename?: 'CustomerEdge', cursor: string, node: { __typename?: 'Customer', id: string, customerId: string, publicId: any, kycVerification: KycVerification, activity: Activity, level: KycLevel, email: string, telegramId: string, applicantId?: string | null, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type DashboardQueryVariables = Exact<{ [key: string]: never; }>;


export type DashboardQuery = { __typename?: 'Query', dashboard: { __typename?: 'Dashboard', activeFacilities: number, pendingFacilities: number, totalDisbursed: UsdCents, totalCollateral: Satoshis } };

export type DepositDetailsPageFragmentFragment = { __typename?: 'Deposit', id: string, depositId: string, publicId: any, amount: UsdCents, createdAt: any, reference: string, status: DepositStatus, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, applicantId?: string | null, email: string, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } } };

export type GetDepositDetailsQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type GetDepositDetailsQuery = { __typename?: 'Query', depositByPublicId?: { __typename?: 'Deposit', id: string, depositId: string, publicId: any, amount: UsdCents, createdAt: any, reference: string, status: DepositStatus, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, applicantId?: string | null, email: string, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } } } | null };

export type DepositRevertMutationVariables = Exact<{
  input: DepositRevertInput;
}>;


export type DepositRevertMutation = { __typename?: 'Mutation', depositRevert: { __typename?: 'DepositRevertPayload', deposit: { __typename?: 'Deposit', id: string, depositId: string, publicId: any, amount: UsdCents, createdAt: any, reference: string, status: DepositStatus, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, applicantId?: string | null, email: string, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } } } } };

export type CreateDepositMutationVariables = Exact<{
  input: DepositRecordInput;
}>;


export type CreateDepositMutation = { __typename?: 'Mutation', depositRecord: { __typename?: 'DepositRecordPayload', deposit: { __typename?: 'Deposit', id: string, depositId: string, publicId: any, reference: string, createdAt: any, amount: UsdCents, status: DepositStatus, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, email: string, depositAccount?: { __typename?: 'DepositAccount', id: string, deposits: Array<{ __typename?: 'Deposit', id: string, depositId: string, publicId: any, reference: string, createdAt: any, amount: UsdCents, status: DepositStatus, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', customerId: string, email: string } } }>, balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } } } } };

export type DepositFieldsFragment = { __typename?: 'Deposit', id: string, depositId: string, publicId: any, reference: string, createdAt: any, amount: UsdCents, status: DepositStatus, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', customerId: string, email: string } } };

export type DepositsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type DepositsQuery = { __typename?: 'Query', deposits: { __typename?: 'DepositConnection', pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ __typename?: 'DepositEdge', cursor: string, node: { __typename?: 'Deposit', id: string, depositId: string, publicId: any, reference: string, createdAt: any, amount: UsdCents, status: DepositStatus, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', customerId: string, email: string } } } }> } };

export type GetDisbursalDetailsQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type GetDisbursalDetailsQuery = { __typename?: 'Query', disbursalByPublicId?: { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, amount: UsdCents, createdAt: any, status: DisbursalStatus, publicId: any, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, facilityAmount: UsdCents, status: CreditFacilityStatus, publicId: any, customer: { __typename?: 'Customer', id: string, email: string, customerId: string, publicId: any, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } }, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
        | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
        | { __typename?: 'SystemApproval', autoApprove: boolean }
      , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } | null };

export type CreditFacilityDisbursalInitiateMutationVariables = Exact<{
  input: CreditFacilityDisbursalInitiateInput;
}>;


export type CreditFacilityDisbursalInitiateMutation = { __typename?: 'Mutation', creditFacilityDisbursalInitiate: { __typename?: 'CreditFacilityDisbursalInitiatePayload', disbursal: { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, status: DisbursalStatus, createdAt: any, creditFacility: { __typename?: 'CreditFacility', id: string, creditFacilityId: string, status: CreditFacilityStatus, facilityAmount: UsdCents, maturesAt: any, collateralizationState: CollateralizationState, activatedAt: any, publicId: any, collateralToMatchInitialCvl?: Satoshis | null, userCanUpdateCollateral: boolean, userCanInitiateDisbursal: boolean, userCanRecordPayment: boolean, userCanRecordPaymentWithDate: boolean, userCanComplete: boolean, disbursals: Array<{ __typename?: 'CreditFacilityDisbursal', status: DisbursalStatus, id: string, disbursalId: string, publicId: any, amount: UsdCents, createdAt: any }>, history: Array<
          | { __typename?: 'CreditFacilityApproved', cents: UsdCents, recordedAt: any, txId: string, effective: any }
          | { __typename?: 'CreditFacilityCollateralUpdated', satoshis: Satoshis, recordedAt: any, action: CollateralAction, txId: string, effective: any }
          | { __typename?: 'CreditFacilityCollateralizationUpdated', state: CollateralizationState, collateral: Satoshis, outstandingInterest: UsdCents, outstandingDisbursal: UsdCents, recordedAt: any, price: UsdCents, effective: any }
          | { __typename?: 'CreditFacilityDisbursalExecuted', cents: UsdCents, recordedAt: any, txId: string, effective: any }
          | { __typename?: 'CreditFacilityIncrementalPayment', cents: UsdCents, recordedAt: any, txId: string, effective: any }
          | { __typename?: 'CreditFacilityInterestAccrued', cents: UsdCents, recordedAt: any, txId: string, days: number, effective: any }
          | { __typename?: 'CreditFacilityLiquidationAmountReserved', cents: UsdCents, recordedAt: any, effective: any, txId: string }
        >, currentCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , balance: { __typename?: 'CreditFacilityBalance', facilityRemaining: { __typename?: 'FacilityRemaining', usdBalance: UsdCents }, disbursed: { __typename?: 'Disbursed', total: { __typename?: 'Total', usdBalance: UsdCents }, outstandingPayable: { __typename?: 'Outstanding', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, interest: { __typename?: 'Interest', total: { __typename?: 'Total', usdBalance: UsdCents }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents } }, outstanding: { __typename?: 'Outstanding', usdBalance: UsdCents }, collateral: { __typename?: 'CollateralBalance', btcBalance: Satoshis } }, creditFacilityTerms: { __typename?: 'TermValues', annualRate: any, disburseAllAtActivation: boolean, oneTimeFeeRate: any, liquidationCvl:
            | { __typename: 'FiniteCVLPct', value: any }
            | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
          , marginCallCvl:
            | { __typename: 'FiniteCVLPct', value: any }
            | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
          , initialCvl:
            | { __typename: 'FiniteCVLPct', value: any }
            | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
          , duration: { __typename?: 'Duration', period: Period, units: number } }, repaymentPlan: Array<{ __typename?: 'CreditFacilityRepaymentPlanEntry', repaymentType: CreditFacilityRepaymentType, status: CreditFacilityRepaymentStatus, initial: UsdCents, outstanding: UsdCents, accrualAt: any, dueAt: any }>, customer: { __typename?: 'Customer', customerId: string, publicId: any, customerType: CustomerType, email: string }, wallet?: { __typename?: 'Wallet', id: string, walletId: string, address: string, network: WalletNetwork, custodian: { __typename?: 'Custodian', name: string } } | null } } } };

export type DisbursalsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type DisbursalsQuery = { __typename?: 'Query', disbursals: { __typename?: 'CreditFacilityDisbursalConnection', edges: Array<{ __typename?: 'CreditFacilityDisbursalEdge', cursor: string, node: { __typename?: 'CreditFacilityDisbursal', id: string, disbursalId: string, publicId: any, amount: UsdCents, createdAt: any, status: DisbursalStatus } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type ExecuteManualTransactionMutationVariables = Exact<{
  input: ManualTransactionExecuteInput;
}>;


export type ExecuteManualTransactionMutation = { __typename?: 'Mutation', manualTransactionExecute: { __typename?: 'ManualTransactionExecutePayload', transaction: { __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, description?: string | null } } };

export type JournalEntriesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type JournalEntriesQuery = { __typename?: 'Query', journalEntries: { __typename?: 'JournalEntryConnection', edges: Array<{ __typename?: 'JournalEntryEdge', cursor: string, node: { __typename?: 'JournalEntry', id: string, entryId: string, entryType: string, description?: string | null, direction: DebitOrCredit, layer: Layer, createdAt: any, amount:
          | { __typename?: 'BtcAmount', btc: Satoshis }
          | { __typename?: 'UsdAmount', usd: UsdCents }
        , ledgerAccount: { __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, code?: any | null, name: string, closestAccountWithCode?: { __typename?: 'LedgerAccount', code?: any | null } | null }, ledgerTransaction: { __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, description?: string | null, effective: any } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type AccountEntryCsvQueryVariables = Exact<{
  ledgerAccountId: Scalars['UUID']['input'];
}>;


export type AccountEntryCsvQuery = { __typename?: 'Query', accountEntryCsv?: { __typename?: 'AccountingCsvDocument', id: string, documentId: string, status: DocumentStatus, createdAt: any } | null };

export type LedgerAccountCsvCreateMutationVariables = Exact<{
  input: LedgerAccountCsvCreateInput;
}>;


export type LedgerAccountCsvCreateMutation = { __typename?: 'Mutation', ledgerAccountCsvCreate: { __typename?: 'LedgerAccountCsvCreatePayload', accountingCsvDocument: { __typename?: 'AccountingCsvDocument', id: string, documentId: string, status: DocumentStatus, createdAt: any } } };

export type AccountingCsvDownloadLinkGenerateMutationVariables = Exact<{
  input: AccountingCsvDownloadLinkGenerateInput;
}>;


export type AccountingCsvDownloadLinkGenerateMutation = { __typename?: 'Mutation', accountingCsvDownloadLinkGenerate: { __typename?: 'AccountingCsvDownloadLinkGeneratePayload', link: { __typename?: 'AccountingCsvDownloadLink', url: string, csvId: string } } };

export type LedgerAccountDetailsFragment = { __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null, entity?:
    | { __typename: 'Collateral', creditFacility: { __typename?: 'CreditFacility', publicId: any } }
    | { __typename: 'CreditFacility', publicId: any }
    | { __typename: 'DepositAccount', depositAccountId: string, customer: { __typename?: 'Customer', publicId: any } }
   | null, ancestors: Array<{ __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null }>, children: Array<{ __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null }>, balanceRange:
    | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
    | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
  , history: { __typename?: 'JournalEntryConnection', edges: Array<{ __typename?: 'JournalEntryEdge', cursor: string, node: { __typename?: 'JournalEntry', id: string, entryId: string, txId: string, entryType: string, description?: string | null, direction: DebitOrCredit, layer: Layer, createdAt: any, amount:
          | { __typename: 'BtcAmount', btc: Satoshis }
          | { __typename: 'UsdAmount', usd: UsdCents }
        , ledgerAccount: { __typename?: 'LedgerAccount', code?: any | null, closestAccountWithCode?: { __typename?: 'LedgerAccount', code?: any | null } | null } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type LedgerAccountByCodeQueryVariables = Exact<{
  code: Scalars['String']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type LedgerAccountByCodeQuery = { __typename?: 'Query', ledgerAccountByCode?: { __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null, entity?:
      | { __typename: 'Collateral', creditFacility: { __typename?: 'CreditFacility', publicId: any } }
      | { __typename: 'CreditFacility', publicId: any }
      | { __typename: 'DepositAccount', depositAccountId: string, customer: { __typename?: 'Customer', publicId: any } }
     | null, ancestors: Array<{ __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null }>, children: Array<{ __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null }>, balanceRange:
      | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
      | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
    , history: { __typename?: 'JournalEntryConnection', edges: Array<{ __typename?: 'JournalEntryEdge', cursor: string, node: { __typename?: 'JournalEntry', id: string, entryId: string, txId: string, entryType: string, description?: string | null, direction: DebitOrCredit, layer: Layer, createdAt: any, amount:
            | { __typename: 'BtcAmount', btc: Satoshis }
            | { __typename: 'UsdAmount', usd: UsdCents }
          , ledgerAccount: { __typename?: 'LedgerAccount', code?: any | null, closestAccountWithCode?: { __typename?: 'LedgerAccount', code?: any | null } | null } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } } | null };

export type LedgerAccountQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type LedgerAccountQuery = { __typename?: 'Query', ledgerAccount?: { __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null, entity?:
      | { __typename: 'Collateral', creditFacility: { __typename?: 'CreditFacility', publicId: any } }
      | { __typename: 'CreditFacility', publicId: any }
      | { __typename: 'DepositAccount', depositAccountId: string, customer: { __typename?: 'Customer', publicId: any } }
     | null, ancestors: Array<{ __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null }>, children: Array<{ __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, name: string, code?: any | null }>, balanceRange:
      | { __typename: 'BtcLedgerAccountBalanceRange', close: { __typename?: 'BtcLedgerAccountBalance', btcSettled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
      | { __typename: 'UsdLedgerAccountBalanceRange', close: { __typename?: 'UsdLedgerAccountBalance', usdSettled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
    , history: { __typename?: 'JournalEntryConnection', edges: Array<{ __typename?: 'JournalEntryEdge', cursor: string, node: { __typename?: 'JournalEntry', id: string, entryId: string, txId: string, entryType: string, description?: string | null, direction: DebitOrCredit, layer: Layer, createdAt: any, amount:
            | { __typename: 'BtcAmount', btc: Satoshis }
            | { __typename: 'UsdAmount', usd: UsdCents }
          , ledgerAccount: { __typename?: 'LedgerAccount', code?: any | null, closestAccountWithCode?: { __typename?: 'LedgerAccount', code?: any | null } | null } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } } | null };

export type LedgerAccountExistsByCodeQueryVariables = Exact<{
  code: Scalars['String']['input'];
}>;


export type LedgerAccountExistsByCodeQuery = { __typename?: 'Query', ledgerAccountByCode?: { __typename?: 'LedgerAccount', id: string } | null };

export type LedgerAccountExistsByIdQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type LedgerAccountExistsByIdQuery = { __typename?: 'Query', ledgerAccount?: { __typename?: 'LedgerAccount', id: string } | null };

export type LedgerTransactionQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type LedgerTransactionQuery = { __typename?: 'Query', ledgerTransaction?: { __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, description?: string | null, effective: any, entity?:
      | { __typename: 'CreditFacilityDisbursal', publicId: any }
      | { __typename: 'Deposit', publicId: any }
      | { __typename: 'Withdrawal', publicId: any }
     | null, entries: Array<{ __typename?: 'JournalEntry', id: string, entryId: string, entryType: string, direction: DebitOrCredit, layer: Layer, amount:
        | { __typename: 'BtcAmount', btc: Satoshis }
        | { __typename: 'UsdAmount', usd: UsdCents }
      , ledgerAccount: { __typename?: 'LedgerAccount', id: string, ledgerAccountId: string, code?: any | null, name: string, closestAccountWithCode?: { __typename?: 'LedgerAccount', code?: any | null } | null } }> } | null };

export type BalanceSheetConfigureMutationVariables = Exact<{
  input: BalanceSheetModuleConfigureInput;
}>;


export type BalanceSheetConfigureMutation = { __typename?: 'Mutation', balanceSheetConfigure: { __typename?: 'BalanceSheetModuleConfigurePayload', balanceSheetConfig: { __typename?: 'BalanceSheetModuleConfig', chartOfAccountsId?: string | null, chartOfAccountsAssetsCode?: string | null, chartOfAccountsLiabilitiesCode?: string | null, chartOfAccountsEquityCode?: string | null, chartOfAccountsRevenueCode?: string | null, chartOfAccountsCostOfRevenueCode?: string | null, chartOfAccountsExpensesCode?: string | null } } };

export type CreditModuleConfigureMutationVariables = Exact<{
  input: CreditModuleConfigureInput;
}>;


export type CreditModuleConfigureMutation = { __typename?: 'Mutation', creditModuleConfigure: { __typename?: 'CreditModuleConfigurePayload', creditConfig: { __typename?: 'CreditModuleConfig', chartOfAccountsId?: string | null } } };

export type DepositModuleConfigureMutationVariables = Exact<{
  input: DepositModuleConfigureInput;
}>;


export type DepositModuleConfigureMutation = { __typename?: 'Mutation', depositModuleConfigure: { __typename?: 'DepositModuleConfigurePayload', depositConfig: { __typename?: 'DepositModuleConfig', chartOfAccountsId?: string | null, chartOfAccountsOmnibusParentCode?: string | null, chartOfAccountsIndividualDepositAccountsParentCode?: string | null, chartOfAccountsGovernmentEntityDepositAccountsParentCode?: string | null, chartOfAccountPrivateCompanyDepositAccountsParentCode?: string | null, chartOfAccountBankDepositAccountsParentCode?: string | null, chartOfAccountFinancialInstitutionDepositAccountsParentCode?: string | null, chartOfAccountNonDomiciledIndividualDepositAccountsParentCode?: string | null, chartOfAccountsFrozenIndividualDepositAccountsParentCode?: string | null, chartOfAccountsFrozenGovernmentEntityDepositAccountsParentCode?: string | null, chartOfAccountFrozenPrivateCompanyDepositAccountsParentCode?: string | null, chartOfAccountFrozenBankDepositAccountsParentCode?: string | null, chartOfAccountFrozenFinancialInstitutionDepositAccountsParentCode?: string | null, chartOfAccountFrozenNonDomiciledIndividualDepositAccountsParentCode?: string | null } } };

export type DepositConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type DepositConfigQuery = { __typename?: 'Query', depositConfig?: { __typename?: 'DepositModuleConfig', chartOfAccountsOmnibusParentCode?: string | null, chartOfAccountsIndividualDepositAccountsParentCode?: string | null, chartOfAccountsGovernmentEntityDepositAccountsParentCode?: string | null, chartOfAccountPrivateCompanyDepositAccountsParentCode?: string | null, chartOfAccountBankDepositAccountsParentCode?: string | null, chartOfAccountFinancialInstitutionDepositAccountsParentCode?: string | null, chartOfAccountNonDomiciledIndividualDepositAccountsParentCode?: string | null, chartOfAccountsFrozenIndividualDepositAccountsParentCode?: string | null, chartOfAccountsFrozenGovernmentEntityDepositAccountsParentCode?: string | null, chartOfAccountFrozenPrivateCompanyDepositAccountsParentCode?: string | null, chartOfAccountFrozenBankDepositAccountsParentCode?: string | null, chartOfAccountFrozenFinancialInstitutionDepositAccountsParentCode?: string | null, chartOfAccountFrozenNonDomiciledIndividualDepositAccountsParentCode?: string | null } | null };

export type CreditConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type CreditConfigQuery = { __typename?: 'Query', creditConfig?: { __typename?: 'CreditModuleConfig', chartOfAccountFacilityOmnibusParentCode?: string | null, chartOfAccountCollateralOmnibusParentCode?: string | null, chartOfAccountInLiquidationOmnibusParentCode?: string | null, chartOfAccountFacilityParentCode?: string | null, chartOfAccountCollateralParentCode?: string | null, chartOfAccountInLiquidationParentCode?: string | null, chartOfAccountInterestIncomeParentCode?: string | null, chartOfAccountFeeIncomeParentCode?: string | null, chartOfAccountShortTermIndividualDisbursedReceivableParentCode?: string | null, chartOfAccountShortTermGovernmentEntityDisbursedReceivableParentCode?: string | null, chartOfAccountShortTermPrivateCompanyDisbursedReceivableParentCode?: string | null, chartOfAccountShortTermBankDisbursedReceivableParentCode?: string | null, chartOfAccountShortTermFinancialInstitutionDisbursedReceivableParentCode?: string | null, chartOfAccountShortTermForeignAgencyOrSubsidiaryDisbursedReceivableParentCode?: string | null, chartOfAccountShortTermNonDomiciledCompanyDisbursedReceivableParentCode?: string | null, chartOfAccountLongTermIndividualDisbursedReceivableParentCode?: string | null, chartOfAccountLongTermGovernmentEntityDisbursedReceivableParentCode?: string | null, chartOfAccountLongTermPrivateCompanyDisbursedReceivableParentCode?: string | null, chartOfAccountLongTermBankDisbursedReceivableParentCode?: string | null, chartOfAccountLongTermFinancialInstitutionDisbursedReceivableParentCode?: string | null, chartOfAccountLongTermForeignAgencyOrSubsidiaryDisbursedReceivableParentCode?: string | null, chartOfAccountLongTermNonDomiciledCompanyDisbursedReceivableParentCode?: string | null, chartOfAccountShortTermIndividualInterestReceivableParentCode?: string | null, chartOfAccountShortTermGovernmentEntityInterestReceivableParentCode?: string | null, chartOfAccountShortTermPrivateCompanyInterestReceivableParentCode?: string | null, chartOfAccountShortTermBankInterestReceivableParentCode?: string | null, chartOfAccountShortTermFinancialInstitutionInterestReceivableParentCode?: string | null, chartOfAccountShortTermForeignAgencyOrSubsidiaryInterestReceivableParentCode?: string | null, chartOfAccountShortTermNonDomiciledCompanyInterestReceivableParentCode?: string | null, chartOfAccountLongTermIndividualInterestReceivableParentCode?: string | null, chartOfAccountLongTermGovernmentEntityInterestReceivableParentCode?: string | null, chartOfAccountLongTermPrivateCompanyInterestReceivableParentCode?: string | null, chartOfAccountLongTermBankInterestReceivableParentCode?: string | null, chartOfAccountLongTermFinancialInstitutionInterestReceivableParentCode?: string | null, chartOfAccountLongTermForeignAgencyOrSubsidiaryInterestReceivableParentCode?: string | null, chartOfAccountLongTermNonDomiciledCompanyInterestReceivableParentCode?: string | null, chartOfAccountOverdueIndividualDisbursedReceivableParentCode?: string | null, chartOfAccountOverdueGovernmentEntityDisbursedReceivableParentCode?: string | null, chartOfAccountOverduePrivateCompanyDisbursedReceivableParentCode?: string | null, chartOfAccountOverdueBankDisbursedReceivableParentCode?: string | null, chartOfAccountOverdueFinancialInstitutionDisbursedReceivableParentCode?: string | null, chartOfAccountOverdueForeignAgencyOrSubsidiaryDisbursedReceivableParentCode?: string | null, chartOfAccountOverdueNonDomiciledCompanyDisbursedReceivableParentCode?: string | null } | null };

export type BalanceSheetConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type BalanceSheetConfigQuery = { __typename?: 'Query', balanceSheetConfig?: { __typename?: 'BalanceSheetModuleConfig', chartOfAccountsAssetsCode?: string | null, chartOfAccountsLiabilitiesCode?: string | null, chartOfAccountsEquityCode?: string | null, chartOfAccountsRevenueCode?: string | null, chartOfAccountsCostOfRevenueCode?: string | null, chartOfAccountsExpensesCode?: string | null } | null };

export type ProfitAndLossStatementConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type ProfitAndLossStatementConfigQuery = { __typename?: 'Query', profitAndLossStatementConfig?: { __typename?: 'ProfitAndLossStatementModuleConfig', chartOfAccountsRevenueCode?: string | null, chartOfAccountsCostOfRevenueCode?: string | null, chartOfAccountsExpensesCode?: string | null } | null };

export type ProfitAndLossStatementConfigureMutationVariables = Exact<{
  input: ProfitAndLossModuleConfigureInput;
}>;


export type ProfitAndLossStatementConfigureMutation = { __typename?: 'Mutation', profitAndLossStatementConfigure: { __typename?: 'ProfitAndLossStatementModuleConfigurePayload', profitAndLossConfig: { __typename?: 'ProfitAndLossStatementModuleConfig', chartOfAccountsId?: string | null, chartOfAccountsRevenueCode?: string | null, chartOfAccountsCostOfRevenueCode?: string | null, chartOfAccountsExpensesCode?: string | null } } };

export type PolicyAssignCommitteeMutationVariables = Exact<{
  input: PolicyAssignCommitteeInput;
}>;


export type PolicyAssignCommitteeMutation = { __typename?: 'Mutation', policyAssignCommittee: { __typename?: 'PolicyAssignCommitteePayload', policy: { __typename?: 'Policy', id: string, policyId: string, approvalProcessType: ApprovalProcessType, rules:
        | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
        | { __typename?: 'SystemApproval', autoApprove: boolean }
       } } };

export type GetPolicyDetailsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetPolicyDetailsQuery = { __typename?: 'Query', policy?: { __typename?: 'Policy', id: string, policyId: string, approvalProcessType: ApprovalProcessType, rules:
      | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string, currentMembers: Array<{ __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
      | { __typename?: 'SystemApproval', autoApprove: boolean }
     } | null };

export type PoliciesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type PoliciesQuery = { __typename?: 'Query', policies: { __typename?: 'PolicyConnection', edges: Array<{ __typename?: 'PolicyEdge', cursor: string, node: { __typename?: 'Policy', id: string, policyId: string, approvalProcessType: ApprovalProcessType, rules:
          | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', id: string, committeeId: string, createdAt: any, name: string } }
          | { __typename?: 'SystemApproval', autoApprove: boolean }
         } }>, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null } } };

export type ProfitAndLossStatementQueryVariables = Exact<{
  from: Scalars['Date']['input'];
  until?: InputMaybe<Scalars['Date']['input']>;
}>;


export type ProfitAndLossStatementQuery = { __typename?: 'Query', profitAndLossStatement: { __typename?: 'ProfitAndLossStatement', name: string, total: { __typename?: 'LedgerAccountBalanceRangeByCurrency', usd: { __typename?: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }, btc: { __typename?: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } } }, categories: Array<{ __typename?: 'LedgerAccount', id: string, name: string, code?: any | null, balanceRange:
        | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
        | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
      , children: Array<{ __typename?: 'LedgerAccount', id: string, name: string, code?: any | null, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
         }> }> } };

export type ReportRunByIdQueryVariables = Exact<{
  reportRunId: Scalars['UUID']['input'];
}>;


export type ReportRunByIdQuery = { __typename?: 'Query', reportRun?: { __typename?: 'ReportRun', id: string, reportRunId: string, state: ReportRunState, runType: ReportRunType, executionDate: any, startDate?: any | null, endDate?: any | null, reports: Array<{ __typename?: 'Report', id: string, reportId: string, externalId: string, name: string, norm: string, files: Array<{ __typename?: 'ReportFile', extension: string }> }> } | null };

export type ReportFileGenerateDownloadLinkMutationVariables = Exact<{
  input: ReportFileGenerateDownloadLinkInput;
}>;


export type ReportFileGenerateDownloadLinkMutation = { __typename?: 'Mutation', reportFileGenerateDownloadLink: { __typename?: 'ReportFileGenerateDownloadLinkPayload', url: string } };

export type ReportGenerateMutationVariables = Exact<{ [key: string]: never; }>;


export type ReportGenerateMutation = { __typename?: 'Mutation', triggerReportRun: { __typename?: 'ReportRunCreatePayload', jobId: string } };

export type ReportRunsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type ReportRunsQuery = { __typename?: 'Query', reportRuns: { __typename?: 'ReportRunConnection', edges: Array<{ __typename?: 'ReportRunEdge', cursor: string, node: { __typename?: 'ReportRun', id: string, reportRunId: string, executionDate: any, startDate?: any | null, endDate?: any | null, runType: ReportRunType, state: ReportRunState } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type RoleAddPermissionSetsMutationVariables = Exact<{
  input: RoleAddPermissionSetsInput;
}>;


export type RoleAddPermissionSetsMutation = { __typename?: 'Mutation', roleAddPermissionSets: { __typename?: 'RoleAddPermissionSetsPayload', role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } };

export type RoleRemovePermissionSetsMutationVariables = Exact<{
  input: RoleRemovePermissionSetsInput;
}>;


export type RoleRemovePermissionSetsMutation = { __typename?: 'Mutation', roleRemovePermissionSets: { __typename?: 'RoleRemovePermissionSetsPayload', role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } };

export type RoleQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type RoleQuery = { __typename?: 'Query', role?: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } | null };

export type RoleCreateMutationVariables = Exact<{
  input: RoleCreateInput;
}>;


export type RoleCreateMutation = { __typename?: 'Mutation', roleCreate: { __typename?: 'RoleCreatePayload', role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } };

export type PermissionSetsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type PermissionSetsQuery = { __typename?: 'Query', permissionSets: { __typename?: 'PermissionSetConnection', edges: Array<{ __typename?: 'PermissionSetEdge', node: { __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName } }> } };

export type PermissionSetFieldsFragment = { __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName };

export type RoleFieldsFragment = { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> };

export type RolesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type RolesQuery = { __typename?: 'Query', roles: { __typename?: 'RoleConnection', edges: Array<{ __typename?: 'RoleEdge', node: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } };

export type TermsTemplateQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type TermsTemplateQuery = { __typename?: 'Query', termsTemplate?: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , marginCallCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , initialCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , duration: { __typename?: 'Duration', period: Period, units: number } } } | null };

export type UpdateTermsTemplateMutationVariables = Exact<{
  input: TermsTemplateUpdateInput;
}>;


export type UpdateTermsTemplateMutation = { __typename?: 'Mutation', termsTemplateUpdate: { __typename?: 'TermsTemplateUpdatePayload', termsTemplate: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , marginCallCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , initialCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , duration: { __typename?: 'Duration', period: Period, units: number } } } } };

export type CreateTermsTemplateMutationVariables = Exact<{
  input: TermsTemplateCreateInput;
}>;


export type CreateTermsTemplateMutation = { __typename?: 'Mutation', termsTemplateCreate: { __typename?: 'TermsTemplateCreatePayload', termsTemplate: { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , marginCallCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , initialCvl:
          | { __typename: 'FiniteCVLPct', value: any }
          | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
        , duration: { __typename?: 'Duration', period: Period, units: number } } } } };

export type TermsTemplateFieldsFragment = { __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , marginCallCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , initialCvl:
      | { __typename: 'FiniteCVLPct', value: any }
      | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
    , duration: { __typename?: 'Duration', period: Period, units: number } } };

export type TermsTemplatesQueryVariables = Exact<{ [key: string]: never; }>;


export type TermsTemplatesQuery = { __typename?: 'Query', termsTemplates: Array<{ __typename?: 'TermsTemplate', id: string, name: string, termsId: string, createdAt: any, userCanUpdateTermsTemplate: boolean, values: { __typename?: 'TermValues', annualRate: any, oneTimeFeeRate: any, disburseAllAtActivation: boolean, liquidationCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , marginCallCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , initialCvl:
        | { __typename: 'FiniteCVLPct', value: any }
        | { __typename: 'InfiniteCVLPct', isInfinite: boolean }
      , duration: { __typename?: 'Duration', period: Period, units: number } } }> };

export type LedgerTransactionsForTemplateCodeQueryVariables = Exact<{
  templateCode: Scalars['String']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type LedgerTransactionsForTemplateCodeQuery = { __typename?: 'Query', ledgerTransactionsForTemplateCode: { __typename?: 'LedgerTransactionConnection', edges: Array<{ __typename?: 'LedgerTransactionEdge', cursor: string, node: { __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, description?: string | null } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type TransactionTemplatesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type TransactionTemplatesQuery = { __typename?: 'Query', transactionTemplates: { __typename?: 'TransactionTemplateConnection', edges: Array<{ __typename?: 'TransactionTemplateEdge', cursor: string, node: { __typename?: 'TransactionTemplate', id: string, code: string } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export type GetTrialBalanceQueryVariables = Exact<{
  from: Scalars['Date']['input'];
  until: Scalars['Date']['input'];
}>;


export type GetTrialBalanceQuery = { __typename?: 'Query', trialBalance: { __typename?: 'TrialBalance', name: string, accounts: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, childrenWithCodeAndActivity: Array<{ __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, balanceRange:
                                | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                                | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
                               }>, balanceRange:
                              | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                              | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
                             }>, balanceRange:
                            | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                            | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
                           }>, balanceRange:
                          | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                          | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
                         }>, balanceRange:
                        | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                        | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
                       }>, balanceRange:
                      | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                      | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
                     }>, balanceRange:
                    | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                    | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
                   }>, balanceRange:
                  | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                  | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
                 }>, balanceRange:
                | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
                | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
               }>, balanceRange:
              | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
              | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
             }>, balanceRange:
            | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
            | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
           }>, balanceRange:
          | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
          | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
         }>, balanceRange:
        | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
        | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
       }> } };

export type TrialBalanceAccountBaseFragment = { __typename?: 'LedgerAccount', id: string, code?: any | null, name: string, balanceRange:
    | { __typename: 'BtcLedgerAccountBalanceRange', btcStart: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcDiff: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } }, btcEnd: { __typename?: 'BtcLedgerAccountBalance', settled: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis }, pending: { __typename?: 'BtcBalanceDetails', debit: Satoshis, credit: Satoshis, net: SignedSatoshis } } }
    | { __typename: 'UsdLedgerAccountBalanceRange', usdStart: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdDiff: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } }, usdEnd: { __typename?: 'UsdLedgerAccountBalance', settled: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents }, pending: { __typename?: 'UsdBalanceDetails', debit: UsdCents, credit: UsdCents, net: SignedUsdCents } } }
   };

export type GetUserDetailsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetUserDetailsQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, userId: string, email: string, createdAt: any, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } | null };

export type UserCreateMutationVariables = Exact<{
  input: UserCreateInput;
}>;


export type UserCreateMutation = { __typename?: 'Mutation', userCreate: { __typename?: 'UserCreatePayload', user: { __typename?: 'User', id: string, userId: string, email: string, createdAt: any, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } } };

export type UserFieldsFragment = { __typename?: 'User', id: string, userId: string, email: string, createdAt: any, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } };

export type UsersQueryVariables = Exact<{ [key: string]: never; }>;


export type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, userId: string, email: string, createdAt: any, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> };

export type UserUpdateRoleMutationVariables = Exact<{
  input: UserUpdateRoleInput;
}>;


export type UserUpdateRoleMutation = { __typename?: 'Mutation', userUpdateRole: { __typename?: 'UserUpdateRolePayload', user: { __typename?: 'User', id: string, userId: string, email: string, createdAt: any, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } } };

export type WithdrawalCancelMutationVariables = Exact<{
  input: WithdrawalCancelInput;
}>;


export type WithdrawalCancelMutation = { __typename?: 'Mutation', withdrawalCancel: { __typename?: 'WithdrawalCancelPayload', withdrawal: { __typename?: 'Withdrawal', id: string, withdrawalId: string, publicId: any, amount: UsdCents, status: WithdrawalStatus, reference: string, createdAt: any, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, applicantId?: string | null, email: string, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } }, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
          | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
          | { __typename?: 'SystemApproval', autoApprove: boolean }
        , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } } };

export type WithdrawalConfirmMutationVariables = Exact<{
  input: WithdrawalConfirmInput;
}>;


export type WithdrawalConfirmMutation = { __typename?: 'Mutation', withdrawalConfirm: { __typename?: 'WithdrawalConfirmPayload', withdrawal: { __typename?: 'Withdrawal', id: string, withdrawalId: string, publicId: any, amount: UsdCents, status: WithdrawalStatus, reference: string, createdAt: any, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, applicantId?: string | null, email: string, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } }, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
          | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
          | { __typename?: 'SystemApproval', autoApprove: boolean }
        , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } } };

export type LedgerTransactionFieldsFragment = { __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null };

export type WithdrawDetailsPageFragmentFragment = { __typename?: 'Withdrawal', id: string, withdrawalId: string, publicId: any, amount: UsdCents, status: WithdrawalStatus, reference: string, createdAt: any, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, applicantId?: string | null, email: string, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } }, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
      | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
      | { __typename?: 'SystemApproval', autoApprove: boolean }
    , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } };

export type GetWithdrawalDetailsQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type GetWithdrawalDetailsQuery = { __typename?: 'Query', withdrawalByPublicId?: { __typename?: 'Withdrawal', id: string, withdrawalId: string, publicId: any, amount: UsdCents, status: WithdrawalStatus, reference: string, createdAt: any, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, applicantId?: string | null, email: string, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } }, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
        | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
        | { __typename?: 'SystemApproval', autoApprove: boolean }
      , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } | null };

export type WithdrawalRevertMutationVariables = Exact<{
  input: WithdrawalRevertInput;
}>;


export type WithdrawalRevertMutation = { __typename?: 'Mutation', withdrawalRevert: { __typename?: 'WithdrawalRevertPayload', withdrawal: { __typename?: 'Withdrawal', id: string, withdrawalId: string, publicId: any, amount: UsdCents, status: WithdrawalStatus, reference: string, createdAt: any, ledgerTransactions: Array<{ __typename?: 'LedgerTransaction', id: string, ledgerTransactionId: string, createdAt: any, effective: any, description?: string | null }>, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, applicantId?: string | null, email: string, depositAccount?: { __typename?: 'DepositAccount', balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } }, approvalProcess: { __typename?: 'ApprovalProcess', id: string, approvalProcessId: string, deniedReason?: string | null, approvalProcessType: ApprovalProcessType, createdAt: any, userCanSubmitDecision: boolean, status: ApprovalProcessStatus, rules:
          | { __typename?: 'CommitteeThreshold', threshold: number, committee: { __typename?: 'Committee', name: string, currentMembers: Array<{ __typename?: 'User', id: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } }> } }
          | { __typename?: 'SystemApproval', autoApprove: boolean }
        , voters: Array<{ __typename?: 'ApprovalProcessVoter', stillEligible: boolean, didVote: boolean, didApprove: boolean, didDeny: boolean, user: { __typename?: 'User', id: string, userId: string, email: string, role: { __typename?: 'Role', id: string, roleId: string, name: string, createdAt: any, permissionSets: Array<{ __typename?: 'PermissionSet', id: string, permissionSetId: string, name: PermissionSetName }> } } }> } } } };

export type WithdrawalInitiateMutationVariables = Exact<{
  input: WithdrawalInitiateInput;
}>;


export type WithdrawalInitiateMutation = { __typename?: 'Mutation', withdrawalInitiate: { __typename?: 'WithdrawalInitiatePayload', withdrawal: { __typename?: 'Withdrawal', id: string, status: WithdrawalStatus, reference: string, withdrawalId: string, publicId: any, createdAt: any, amount: UsdCents, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', id: string, customerId: string, email: string, depositAccount?: { __typename?: 'DepositAccount', withdrawals: Array<{ __typename?: 'Withdrawal', id: string, status: WithdrawalStatus, reference: string, withdrawalId: string, publicId: any, createdAt: any, amount: UsdCents, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', customerId: string, email: string } } }>, balance: { __typename?: 'DepositAccountBalance', settled: UsdCents, pending: UsdCents } } | null } } } } };

export type WithdrawalFieldsFragment = { __typename?: 'Withdrawal', id: string, status: WithdrawalStatus, reference: string, withdrawalId: string, publicId: any, createdAt: any, amount: UsdCents, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', customerId: string, email: string } } };

export type WithdrawalsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type WithdrawalsQuery = { __typename?: 'Query', withdrawals: { __typename?: 'WithdrawalConnection', pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ __typename?: 'WithdrawalEdge', cursor: string, node: { __typename?: 'Withdrawal', id: string, status: WithdrawalStatus, reference: string, withdrawalId: string, publicId: any, createdAt: any, amount: UsdCents, account: { __typename?: 'DepositAccount', customer: { __typename?: 'Customer', customerId: string, email: string } } } }> } };

export type AvatarQueryVariables = Exact<{ [key: string]: never; }>;


export type AvatarQuery = { __typename?: 'Query', me: { __typename?: 'Me', user: { __typename?: 'User', userId: string, email: string, role: { __typename?: 'Role', roleId: string, name: string } } } };

export type GetRealtimePriceUpdatesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetRealtimePriceUpdatesQuery = { __typename?: 'Query', realtimePrice: { __typename?: 'RealtimePrice', usdCentsPerBtc: UsdCents } };

export type LoanAgreementGenerateMutationVariables = Exact<{
  input: LoanAgreementGenerateInput;
}>;


export type LoanAgreementGenerateMutation = { __typename?: 'Mutation', loanAgreementGenerate: { __typename?: 'LoanAgreementGeneratePayload', loanAgreement: { __typename?: 'LoanAgreement', id: string, status: LoanAgreementStatus, createdAt: any } } };

export type LoanAgreementDownloadLinkGenerateMutationVariables = Exact<{
  input: LoanAgreementDownloadLinksGenerateInput;
}>;


export type LoanAgreementDownloadLinkGenerateMutation = { __typename?: 'Mutation', loanAgreementDownloadLinkGenerate: { __typename?: 'LoanAgreementDownloadLinksGeneratePayload', loanAgreementId: string, link: string } };

export type LoanAgreementQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type LoanAgreementQuery = { __typename?: 'Query', loanAgreement?: { __typename?: 'LoanAgreement', id: string, status: LoanAgreementStatus, createdAt: any } | null };

export type SearchPublicIdTargetQueryVariables = Exact<{
  publicId: Scalars['PublicId']['input'];
}>;


export type SearchPublicIdTargetQuery = { __typename?: 'Query', publicIdTarget?:
    | { __typename: 'CreditFacility', id: string, publicId: any, facilityAmount: UsdCents }
    | { __typename: 'CreditFacilityDisbursal', id: string, amount: UsdCents, publicId: any }
    | { __typename: 'Customer', id: string, customerId: string, publicId: any, email: string }
    | { __typename: 'Deposit', id: string, amount: UsdCents, publicId: any, depositId: string }
    | { __typename: 'DepositAccount', id: string, customer: { __typename?: 'Customer', id: string, customerId: string, publicId: any, email: string } }
    | { __typename: 'Withdrawal', id: string, amount: UsdCents, publicId: any, withdrawalId: string }
   | null };

export type GetCreditFacilityPublicIdQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCreditFacilityPublicIdQuery = { __typename?: 'Query', creditFacility?: { __typename?: 'CreditFacility', publicId: any } | null };

export const ChartAccountBaseFragmentDoc = gql`
    fragment ChartAccountBase on ChartNode {
  name
  accountCode
}
    `;
export const ChartOfAccountsFieldsFragmentDoc = gql`
    fragment ChartOfAccountsFields on ChartOfAccounts {
  id
  chartId
  name
  children {
    ...ChartAccountBase
    children {
      ...ChartAccountBase
      children {
        ...ChartAccountBase
        children {
          ...ChartAccountBase
          children {
            ...ChartAccountBase
            children {
              ...ChartAccountBase
              children {
                ...ChartAccountBase
                children {
                  ...ChartAccountBase
                  children {
                    ...ChartAccountBase
                    children {
                      ...ChartAccountBase
                      children {
                        ...ChartAccountBase
                        children {
                          ...ChartAccountBase
                          children {
                            ...ChartAccountBase
                            children {
                              ...ChartAccountBase
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${ChartAccountBaseFragmentDoc}`;
export const PermissionSetFieldsFragmentDoc = gql`
    fragment PermissionSetFields on PermissionSet {
  id
  permissionSetId
  name
}
    `;
export const RoleFieldsFragmentDoc = gql`
    fragment RoleFields on Role {
  id
  roleId
  name
  createdAt
  permissionSets {
    ...PermissionSetFields
  }
}
    ${PermissionSetFieldsFragmentDoc}`;
export const CommitteeFieldsFragmentDoc = gql`
    fragment CommitteeFields on Committee {
  id
  committeeId
  createdAt
  name
  currentMembers {
    id
    userId
    email
    role {
      ...RoleFields
    }
  }
}
    ${RoleFieldsFragmentDoc}`;
export const DisbursalOnFacilityPageFragmentDoc = gql`
    fragment DisbursalOnFacilityPage on CreditFacilityDisbursal {
  id
  disbursalId
  publicId
  amount
  status
  createdAt
}
    `;
export const CreditFacilityLayoutFragmentFragmentDoc = gql`
    fragment CreditFacilityLayoutFragment on CreditFacility {
  id
  creditFacilityId
  status
  facilityAmount
  maturesAt
  collateralizationState
  activatedAt
  currentCvl {
    __typename
    ... on FiniteCVLPct {
      value
    }
    ... on InfiniteCVLPct {
      isInfinite
    }
  }
  publicId
  collateralToMatchInitialCvl @client
  disbursals {
    status
  }
  balance {
    facilityRemaining {
      usdBalance
    }
    disbursed {
      total {
        usdBalance
      }
      outstandingPayable {
        usdBalance
      }
      outstanding {
        usdBalance
      }
    }
    interest {
      total {
        usdBalance
      }
      outstanding {
        usdBalance
      }
    }
    outstanding {
      usdBalance
    }
    collateral {
      btcBalance
    }
  }
  creditFacilityTerms {
    annualRate
    disburseAllAtActivation
    liquidationCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
    marginCallCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
    initialCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
    oneTimeFeeRate
    duration {
      period
      units
    }
  }
  repaymentPlan {
    repaymentType
    status
    initial
    outstanding
    accrualAt
    dueAt
  }
  customer {
    customerId
    publicId
    customerType
    email
  }
  wallet {
    id
    walletId
    address
    network
    custodian {
      name
    }
  }
  userCanUpdateCollateral
  userCanInitiateDisbursal
  userCanRecordPayment
  userCanRecordPaymentWithDate
  userCanComplete
}
    `;
export const LedgerAccountInfoFragmentDoc = gql`
    fragment LedgerAccountInfo on LedgerAccount {
  name
  ledgerAccountId
  normalBalanceType
  balanceRange {
    __typename
    ... on UsdLedgerAccountBalanceRange {
      close {
        usdSettled: settled {
          net
        }
      }
    }
    ... on BtcLedgerAccountBalanceRange {
      close {
        btcSettled: settled {
          net
        }
      }
    }
  }
}
    `;
export const CreditFacilityHistoryFragmentFragmentDoc = gql`
    fragment CreditFacilityHistoryFragment on CreditFacility {
  id
  creditFacilityId
  history {
    ... on CreditFacilityIncrementalPayment {
      cents
      recordedAt
      txId
      effective
    }
    ... on CreditFacilityCollateralUpdated {
      satoshis
      recordedAt
      action
      txId
      effective
    }
    ... on CreditFacilityApproved {
      cents
      recordedAt
      txId
      effective
    }
    ... on CreditFacilityCollateralizationUpdated {
      state
      collateral
      outstandingInterest
      outstandingDisbursal
      recordedAt
      price
      effective
    }
    ... on CreditFacilityDisbursalExecuted {
      cents
      recordedAt
      txId
      effective
    }
    ... on CreditFacilityInterestAccrued {
      cents
      recordedAt
      txId
      days
      effective
    }
    ... on CreditFacilityLiquidationAmountReserved {
      cents
      recordedAt
      effective
      txId
    }
  }
}
    `;
export const RepaymentOnFacilityPageFragmentDoc = gql`
    fragment RepaymentOnFacilityPage on CreditFacilityRepaymentPlanEntry {
  repaymentType
  status
  initial
  outstanding
  accrualAt
  dueAt
}
    `;
export const CvlPctDataFragmentDoc = gql`
    fragment CVLPctData on Cvlpct {
  __typename
  ... on FiniteCVLPct {
    value
  }
  ... on InfiniteCVLPct {
    isInfinite
  }
}
    `;
export const ApprovalProcessFieldsFragmentDoc = gql`
    fragment ApprovalProcessFields on ApprovalProcess {
  id
  approvalProcessId
  deniedReason
  approvalProcessType
  createdAt
  userCanSubmitDecision
  status
  rules {
    ... on CommitteeThreshold {
      threshold
      committee {
        name
        currentMembers {
          id
          email
          role {
            ...RoleFields
          }
        }
      }
    }
    ... on SystemApproval {
      autoApprove
    }
  }
  voters {
    stillEligible
    didVote
    didApprove
    didDeny
    user {
      id
      userId
      email
      role {
        ...RoleFields
      }
    }
  }
}
    ${RoleFieldsFragmentDoc}`;
export const CreditFacilityProposalLayoutFragmentFragmentDoc = gql`
    fragment CreditFacilityProposalLayoutFragment on CreditFacilityProposal {
  id
  creditFacilityProposalId
  approvalProcessId
  createdAt
  status
  facilityAmount
  collateralizationState
  collateral {
    btcBalance
  }
  customer {
    customerId
    customerType
    publicId
    email
  }
  creditFacilityTerms {
    annualRate
    accrualInterval
    accrualCycleInterval
    oneTimeFeeRate
    disburseAllAtActivation
    duration {
      period
      units
    }
    liquidationCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
    marginCallCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
    initialCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
  }
  wallet {
    id
    walletId
    address
    network
    custodian {
      name
    }
  }
  approvalProcess {
    ...ApprovalProcessFields
  }
  collateralToMatchInitialCvl @client
}
    ${ApprovalProcessFieldsFragmentDoc}`;
export const CustodianFieldsFragmentDoc = gql`
    fragment CustodianFields on Custodian {
  id
  custodianId
  createdAt
  name
}
    `;
export const LedgerTransactionFieldsFragmentDoc = gql`
    fragment LedgerTransactionFields on LedgerTransaction {
  id
  ledgerTransactionId
  createdAt
  effective
  description
}
    `;
export const DepositDetailsPageFragmentFragmentDoc = gql`
    fragment DepositDetailsPageFragment on Deposit {
  id
  depositId
  publicId
  amount
  createdAt
  reference
  status
  ledgerTransactions {
    ...LedgerTransactionFields
  }
  account {
    customer {
      id
      customerId
      publicId
      applicantId
      email
      depositAccount {
        balance {
          settled
          pending
        }
      }
    }
  }
}
    ${LedgerTransactionFieldsFragmentDoc}`;
export const DepositFieldsFragmentDoc = gql`
    fragment DepositFields on Deposit {
  id
  depositId
  publicId
  reference
  createdAt
  amount
  status
  account {
    customer {
      customerId
      email
    }
  }
}
    `;
export const LedgerAccountDetailsFragmentDoc = gql`
    fragment LedgerAccountDetails on LedgerAccount {
  id
  ledgerAccountId
  name
  code
  entity {
    __typename
    ... on DepositAccount {
      depositAccountId
      customer {
        publicId
      }
    }
    ... on CreditFacility {
      publicId
    }
    ... on Collateral {
      creditFacility {
        publicId
      }
    }
  }
  ancestors {
    id
    ledgerAccountId
    name
    code
  }
  children {
    id
    ledgerAccountId
    name
    code
  }
  balanceRange {
    __typename
    ... on UsdLedgerAccountBalanceRange {
      close {
        usdSettled: settled {
          debit
          credit
          net
        }
      }
    }
    ... on BtcLedgerAccountBalanceRange {
      close {
        btcSettled: settled {
          debit
          credit
          net
        }
      }
    }
  }
  history(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        entryId
        txId
        entryType
        amount {
          __typename
          ... on UsdAmount {
            usd
          }
          ... on BtcAmount {
            btc
          }
        }
        description
        direction
        layer
        createdAt
        ledgerAccount {
          code
          closestAccountWithCode {
            code
          }
        }
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;
export const TermsTemplateFieldsFragmentDoc = gql`
    fragment TermsTemplateFields on TermsTemplate {
  id
  name
  termsId
  createdAt
  userCanUpdateTermsTemplate
  values {
    annualRate
    liquidationCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
    marginCallCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
    initialCvl {
      __typename
      ... on FiniteCVLPct {
        value
      }
      ... on InfiniteCVLPct {
        isInfinite
      }
    }
    oneTimeFeeRate
    disburseAllAtActivation
    duration {
      period
      units
    }
  }
}
    `;
export const UsdBalanceFragmentFragmentDoc = gql`
    fragment UsdBalanceFragment on UsdLedgerAccountBalance {
  settled {
    debit
    credit
    net
  }
  pending {
    debit
    credit
    net
  }
}
    `;
export const UsdLedgerBalanceRangeFragmentFragmentDoc = gql`
    fragment UsdLedgerBalanceRangeFragment on UsdLedgerAccountBalanceRange {
  usdStart: open {
    ...UsdBalanceFragment
  }
  usdDiff: periodActivity {
    ...UsdBalanceFragment
  }
  usdEnd: close {
    ...UsdBalanceFragment
  }
}
    ${UsdBalanceFragmentFragmentDoc}`;
export const BtcBalanceFragmentFragmentDoc = gql`
    fragment BtcBalanceFragment on BtcLedgerAccountBalance {
  settled {
    debit
    credit
    net
  }
  pending {
    debit
    credit
    net
  }
}
    `;
export const BtcLedgerBalanceRangeFragmentFragmentDoc = gql`
    fragment BtcLedgerBalanceRangeFragment on BtcLedgerAccountBalanceRange {
  btcStart: open {
    ...BtcBalanceFragment
  }
  btcDiff: periodActivity {
    ...BtcBalanceFragment
  }
  btcEnd: close {
    ...BtcBalanceFragment
  }
}
    ${BtcBalanceFragmentFragmentDoc}`;
export const TrialBalanceAccountBaseFragmentDoc = gql`
    fragment TrialBalanceAccountBase on LedgerAccount {
  id
  code
  name
  balanceRange {
    __typename
    ...UsdLedgerBalanceRangeFragment
    ...BtcLedgerBalanceRangeFragment
  }
}
    ${UsdLedgerBalanceRangeFragmentFragmentDoc}
${BtcLedgerBalanceRangeFragmentFragmentDoc}`;
export const UserFieldsFragmentDoc = gql`
    fragment UserFields on User {
  id
  userId
  email
  role {
    ...RoleFields
  }
  createdAt
}
    ${RoleFieldsFragmentDoc}`;
export const WithdrawDetailsPageFragmentFragmentDoc = gql`
    fragment WithdrawDetailsPageFragment on Withdrawal {
  id
  withdrawalId
  publicId
  amount
  status
  reference
  createdAt
  ledgerTransactions {
    ...LedgerTransactionFields
  }
  account {
    customer {
      id
      customerId
      publicId
      applicantId
      email
      depositAccount {
        balance {
          settled
          pending
        }
      }
    }
  }
  approvalProcess {
    ...ApprovalProcessFields
  }
}
    ${LedgerTransactionFieldsFragmentDoc}
${ApprovalProcessFieldsFragmentDoc}`;
export const WithdrawalFieldsFragmentDoc = gql`
    fragment WithdrawalFields on Withdrawal {
  id
  status
  reference
  withdrawalId
  publicId
  createdAt
  amount
  account {
    customer {
      customerId
      email
    }
  }
}
    `;
export const ApprovalProcessApproveDocument = gql`
    mutation ApprovalProcessApprove($input: ApprovalProcessApproveInput!) {
  approvalProcessApprove(input: $input) {
    approvalProcess {
      ...ApprovalProcessFields
    }
  }
}
    ${ApprovalProcessFieldsFragmentDoc}`;
export type ApprovalProcessApproveMutationFn = Apollo.MutationFunction<ApprovalProcessApproveMutation, ApprovalProcessApproveMutationVariables>;

/**
 * __useApprovalProcessApproveMutation__
 *
 * To run a mutation, you first call `useApprovalProcessApproveMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApprovalProcessApproveMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approvalProcessApproveMutation, { data, loading, error }] = useApprovalProcessApproveMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useApprovalProcessApproveMutation(baseOptions?: Apollo.MutationHookOptions<ApprovalProcessApproveMutation, ApprovalProcessApproveMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ApprovalProcessApproveMutation, ApprovalProcessApproveMutationVariables>(ApprovalProcessApproveDocument, options);
      }
export type ApprovalProcessApproveMutationHookResult = ReturnType<typeof useApprovalProcessApproveMutation>;
export type ApprovalProcessApproveMutationResult = Apollo.MutationResult<ApprovalProcessApproveMutation>;
export type ApprovalProcessApproveMutationOptions = Apollo.BaseMutationOptions<ApprovalProcessApproveMutation, ApprovalProcessApproveMutationVariables>;
export const ApprovalProcessDenyDocument = gql`
    mutation ApprovalProcessDeny($input: ApprovalProcessDenyInput!, $reason: String!) {
  approvalProcessDeny(input: $input, reason: $reason) {
    approvalProcess {
      ...ApprovalProcessFields
    }
  }
}
    ${ApprovalProcessFieldsFragmentDoc}`;
export type ApprovalProcessDenyMutationFn = Apollo.MutationFunction<ApprovalProcessDenyMutation, ApprovalProcessDenyMutationVariables>;

/**
 * __useApprovalProcessDenyMutation__
 *
 * To run a mutation, you first call `useApprovalProcessDenyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApprovalProcessDenyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approvalProcessDenyMutation, { data, loading, error }] = useApprovalProcessDenyMutation({
 *   variables: {
 *      input: // value for 'input'
 *      reason: // value for 'reason'
 *   },
 * });
 */
export function useApprovalProcessDenyMutation(baseOptions?: Apollo.MutationHookOptions<ApprovalProcessDenyMutation, ApprovalProcessDenyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ApprovalProcessDenyMutation, ApprovalProcessDenyMutationVariables>(ApprovalProcessDenyDocument, options);
      }
export type ApprovalProcessDenyMutationHookResult = ReturnType<typeof useApprovalProcessDenyMutation>;
export type ApprovalProcessDenyMutationResult = Apollo.MutationResult<ApprovalProcessDenyMutation>;
export type ApprovalProcessDenyMutationOptions = Apollo.BaseMutationOptions<ApprovalProcessDenyMutation, ApprovalProcessDenyMutationVariables>;
export const AllActionsDocument = gql`
    query AllActions {
  approvalProcesses(first: 1000000) {
    pageInfo {
      hasNextPage
      hasPreviousPage
    }
    edges {
      node {
        id
        approvalProcessType
        status
        userCanSubmitDecision
        createdAt
        target {
          __typename
          ... on Withdrawal {
            withdrawalId
            publicId
            account {
              customer {
                email
              }
            }
          }
          ... on CreditFacilityProposal {
            creditFacilityProposalId
            customer {
              email
            }
          }
          ... on CreditFacilityDisbursal {
            id
            disbursalId
            publicId
            creditFacility {
              publicId
              customer {
                email
              }
            }
          }
        }
      }
      cursor
    }
  }
}
    `;

/**
 * __useAllActionsQuery__
 *
 * To run a query within a React component, call `useAllActionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllActionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllActionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllActionsQuery(baseOptions?: Apollo.QueryHookOptions<AllActionsQuery, AllActionsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AllActionsQuery, AllActionsQueryVariables>(AllActionsDocument, options);
      }
export function useAllActionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllActionsQuery, AllActionsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AllActionsQuery, AllActionsQueryVariables>(AllActionsDocument, options);
        }
export function useAllActionsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AllActionsQuery, AllActionsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AllActionsQuery, AllActionsQueryVariables>(AllActionsDocument, options);
        }
export type AllActionsQueryHookResult = ReturnType<typeof useAllActionsQuery>;
export type AllActionsLazyQueryHookResult = ReturnType<typeof useAllActionsLazyQuery>;
export type AllActionsSuspenseQueryHookResult = ReturnType<typeof useAllActionsSuspenseQuery>;
export type AllActionsQueryResult = Apollo.QueryResult<AllActionsQuery, AllActionsQueryVariables>;
export const AuditLogsDocument = gql`
    query AuditLogs($first: Int!, $after: String) {
  audit(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        auditEntryId
        subject {
          ... on User {
            userId
            email
            role {
              roleId
              name
            }
          }
          ... on System {
            name
          }
        }
        object
        action
        authorized
        recordedAt
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useAuditLogsQuery__
 *
 * To run a query within a React component, call `useAuditLogsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuditLogsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuditLogsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAuditLogsQuery(baseOptions: Apollo.QueryHookOptions<AuditLogsQuery, AuditLogsQueryVariables> & ({ variables: AuditLogsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AuditLogsQuery, AuditLogsQueryVariables>(AuditLogsDocument, options);
      }
export function useAuditLogsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuditLogsQuery, AuditLogsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AuditLogsQuery, AuditLogsQueryVariables>(AuditLogsDocument, options);
        }
export function useAuditLogsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AuditLogsQuery, AuditLogsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AuditLogsQuery, AuditLogsQueryVariables>(AuditLogsDocument, options);
        }
export type AuditLogsQueryHookResult = ReturnType<typeof useAuditLogsQuery>;
export type AuditLogsLazyQueryHookResult = ReturnType<typeof useAuditLogsLazyQuery>;
export type AuditLogsSuspenseQueryHookResult = ReturnType<typeof useAuditLogsSuspenseQuery>;
export type AuditLogsQueryResult = Apollo.QueryResult<AuditLogsQuery, AuditLogsQueryVariables>;
export const BalanceSheetDocument = gql`
    query BalanceSheet($from: Date!, $until: Date) {
  balanceSheet(from: $from, until: $until) {
    name
    balance {
      __typename
      ...UsdLedgerBalanceRangeFragment
      ...BtcLedgerBalanceRangeFragment
    }
    categories {
      id
      name
      code
      balanceRange {
        __typename
        ...UsdLedgerBalanceRangeFragment
        ...BtcLedgerBalanceRangeFragment
      }
      children {
        id
        name
        code
        balanceRange {
          __typename
          ...UsdLedgerBalanceRangeFragment
          ...BtcLedgerBalanceRangeFragment
        }
      }
    }
  }
}
    ${UsdLedgerBalanceRangeFragmentFragmentDoc}
${BtcLedgerBalanceRangeFragmentFragmentDoc}`;

/**
 * __useBalanceSheetQuery__
 *
 * To run a query within a React component, call `useBalanceSheetQuery` and pass it any options that fit your needs.
 * When your component renders, `useBalanceSheetQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBalanceSheetQuery({
 *   variables: {
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function useBalanceSheetQuery(baseOptions: Apollo.QueryHookOptions<BalanceSheetQuery, BalanceSheetQueryVariables> & ({ variables: BalanceSheetQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<BalanceSheetQuery, BalanceSheetQueryVariables>(BalanceSheetDocument, options);
      }
export function useBalanceSheetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BalanceSheetQuery, BalanceSheetQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<BalanceSheetQuery, BalanceSheetQueryVariables>(BalanceSheetDocument, options);
        }
export function useBalanceSheetSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<BalanceSheetQuery, BalanceSheetQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<BalanceSheetQuery, BalanceSheetQueryVariables>(BalanceSheetDocument, options);
        }
export type BalanceSheetQueryHookResult = ReturnType<typeof useBalanceSheetQuery>;
export type BalanceSheetLazyQueryHookResult = ReturnType<typeof useBalanceSheetLazyQuery>;
export type BalanceSheetSuspenseQueryHookResult = ReturnType<typeof useBalanceSheetSuspenseQuery>;
export type BalanceSheetQueryResult = Apollo.QueryResult<BalanceSheetQuery, BalanceSheetQueryVariables>;
export const ChartOfAccountsForLedgerDocument = gql`
    query ChartOfAccountsForLedger {
  chartOfAccounts {
    id
    chartId
    name
  }
}
    `;

/**
 * __useChartOfAccountsForLedgerQuery__
 *
 * To run a query within a React component, call `useChartOfAccountsForLedgerQuery` and pass it any options that fit your needs.
 * When your component renders, `useChartOfAccountsForLedgerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useChartOfAccountsForLedgerQuery({
 *   variables: {
 *   },
 * });
 */
export function useChartOfAccountsForLedgerQuery(baseOptions?: Apollo.QueryHookOptions<ChartOfAccountsForLedgerQuery, ChartOfAccountsForLedgerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ChartOfAccountsForLedgerQuery, ChartOfAccountsForLedgerQueryVariables>(ChartOfAccountsForLedgerDocument, options);
      }
export function useChartOfAccountsForLedgerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ChartOfAccountsForLedgerQuery, ChartOfAccountsForLedgerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ChartOfAccountsForLedgerQuery, ChartOfAccountsForLedgerQueryVariables>(ChartOfAccountsForLedgerDocument, options);
        }
export function useChartOfAccountsForLedgerSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ChartOfAccountsForLedgerQuery, ChartOfAccountsForLedgerQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ChartOfAccountsForLedgerQuery, ChartOfAccountsForLedgerQueryVariables>(ChartOfAccountsForLedgerDocument, options);
        }
export type ChartOfAccountsForLedgerQueryHookResult = ReturnType<typeof useChartOfAccountsForLedgerQuery>;
export type ChartOfAccountsForLedgerLazyQueryHookResult = ReturnType<typeof useChartOfAccountsForLedgerLazyQuery>;
export type ChartOfAccountsForLedgerSuspenseQueryHookResult = ReturnType<typeof useChartOfAccountsForLedgerSuspenseQuery>;
export type ChartOfAccountsForLedgerQueryResult = Apollo.QueryResult<ChartOfAccountsForLedgerQuery, ChartOfAccountsForLedgerQueryVariables>;
export const ChartOfAccountsAddChildNodeDocument = gql`
    mutation ChartOfAccountsAddChildNode($input: ChartOfAccountsAddChildNodeInput!) {
  chartOfAccountsAddChildNode(input: $input) {
    chartOfAccounts {
      ...ChartOfAccountsFields
    }
  }
}
    ${ChartOfAccountsFieldsFragmentDoc}`;
export type ChartOfAccountsAddChildNodeMutationFn = Apollo.MutationFunction<ChartOfAccountsAddChildNodeMutation, ChartOfAccountsAddChildNodeMutationVariables>;

/**
 * __useChartOfAccountsAddChildNodeMutation__
 *
 * To run a mutation, you first call `useChartOfAccountsAddChildNodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChartOfAccountsAddChildNodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [chartOfAccountsAddChildNodeMutation, { data, loading, error }] = useChartOfAccountsAddChildNodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChartOfAccountsAddChildNodeMutation(baseOptions?: Apollo.MutationHookOptions<ChartOfAccountsAddChildNodeMutation, ChartOfAccountsAddChildNodeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChartOfAccountsAddChildNodeMutation, ChartOfAccountsAddChildNodeMutationVariables>(ChartOfAccountsAddChildNodeDocument, options);
      }
export type ChartOfAccountsAddChildNodeMutationHookResult = ReturnType<typeof useChartOfAccountsAddChildNodeMutation>;
export type ChartOfAccountsAddChildNodeMutationResult = Apollo.MutationResult<ChartOfAccountsAddChildNodeMutation>;
export type ChartOfAccountsAddChildNodeMutationOptions = Apollo.BaseMutationOptions<ChartOfAccountsAddChildNodeMutation, ChartOfAccountsAddChildNodeMutationVariables>;
export const ChartOfAccountsAddRootNodeDocument = gql`
    mutation ChartOfAccountsAddRootNode($input: ChartOfAccountsAddRootNodeInput!) {
  chartOfAccountsAddRootNode(input: $input) {
    chartOfAccounts {
      ...ChartOfAccountsFields
    }
  }
}
    ${ChartOfAccountsFieldsFragmentDoc}`;
export type ChartOfAccountsAddRootNodeMutationFn = Apollo.MutationFunction<ChartOfAccountsAddRootNodeMutation, ChartOfAccountsAddRootNodeMutationVariables>;

/**
 * __useChartOfAccountsAddRootNodeMutation__
 *
 * To run a mutation, you first call `useChartOfAccountsAddRootNodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChartOfAccountsAddRootNodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [chartOfAccountsAddRootNodeMutation, { data, loading, error }] = useChartOfAccountsAddRootNodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChartOfAccountsAddRootNodeMutation(baseOptions?: Apollo.MutationHookOptions<ChartOfAccountsAddRootNodeMutation, ChartOfAccountsAddRootNodeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChartOfAccountsAddRootNodeMutation, ChartOfAccountsAddRootNodeMutationVariables>(ChartOfAccountsAddRootNodeDocument, options);
      }
export type ChartOfAccountsAddRootNodeMutationHookResult = ReturnType<typeof useChartOfAccountsAddRootNodeMutation>;
export type ChartOfAccountsAddRootNodeMutationResult = Apollo.MutationResult<ChartOfAccountsAddRootNodeMutation>;
export type ChartOfAccountsAddRootNodeMutationOptions = Apollo.BaseMutationOptions<ChartOfAccountsAddRootNodeMutation, ChartOfAccountsAddRootNodeMutationVariables>;
export const ChartOfAccountsDocument = gql`
    query ChartOfAccounts {
  chartOfAccounts {
    ...ChartOfAccountsFields
  }
}
    ${ChartOfAccountsFieldsFragmentDoc}`;

/**
 * __useChartOfAccountsQuery__
 *
 * To run a query within a React component, call `useChartOfAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useChartOfAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useChartOfAccountsQuery({
 *   variables: {
 *   },
 * });
 */
export function useChartOfAccountsQuery(baseOptions?: Apollo.QueryHookOptions<ChartOfAccountsQuery, ChartOfAccountsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ChartOfAccountsQuery, ChartOfAccountsQueryVariables>(ChartOfAccountsDocument, options);
      }
export function useChartOfAccountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ChartOfAccountsQuery, ChartOfAccountsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ChartOfAccountsQuery, ChartOfAccountsQueryVariables>(ChartOfAccountsDocument, options);
        }
export function useChartOfAccountsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ChartOfAccountsQuery, ChartOfAccountsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ChartOfAccountsQuery, ChartOfAccountsQueryVariables>(ChartOfAccountsDocument, options);
        }
export type ChartOfAccountsQueryHookResult = ReturnType<typeof useChartOfAccountsQuery>;
export type ChartOfAccountsLazyQueryHookResult = ReturnType<typeof useChartOfAccountsLazyQuery>;
export type ChartOfAccountsSuspenseQueryHookResult = ReturnType<typeof useChartOfAccountsSuspenseQuery>;
export type ChartOfAccountsQueryResult = Apollo.QueryResult<ChartOfAccountsQuery, ChartOfAccountsQueryVariables>;
export const ChartOfAccountsCsvImportDocument = gql`
    mutation ChartOfAccountsCsvImport($input: ChartOfAccountsCsvImportInput!) {
  chartOfAccountsCsvImport(input: $input) {
    chartOfAccounts {
      chartId
    }
  }
}
    `;
export type ChartOfAccountsCsvImportMutationFn = Apollo.MutationFunction<ChartOfAccountsCsvImportMutation, ChartOfAccountsCsvImportMutationVariables>;

/**
 * __useChartOfAccountsCsvImportMutation__
 *
 * To run a mutation, you first call `useChartOfAccountsCsvImportMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChartOfAccountsCsvImportMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [chartOfAccountsCsvImportMutation, { data, loading, error }] = useChartOfAccountsCsvImportMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChartOfAccountsCsvImportMutation(baseOptions?: Apollo.MutationHookOptions<ChartOfAccountsCsvImportMutation, ChartOfAccountsCsvImportMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ChartOfAccountsCsvImportMutation, ChartOfAccountsCsvImportMutationVariables>(ChartOfAccountsCsvImportDocument, options);
      }
export type ChartOfAccountsCsvImportMutationHookResult = ReturnType<typeof useChartOfAccountsCsvImportMutation>;
export type ChartOfAccountsCsvImportMutationResult = Apollo.MutationResult<ChartOfAccountsCsvImportMutation>;
export type ChartOfAccountsCsvImportMutationOptions = Apollo.BaseMutationOptions<ChartOfAccountsCsvImportMutation, ChartOfAccountsCsvImportMutationVariables>;
export const GetCommitteeDetailsDocument = gql`
    query GetCommitteeDetails($id: UUID!) {
  committee(id: $id) {
    ...CommitteeFields
  }
}
    ${CommitteeFieldsFragmentDoc}`;

/**
 * __useGetCommitteeDetailsQuery__
 *
 * To run a query within a React component, call `useGetCommitteeDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCommitteeDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCommitteeDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCommitteeDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetCommitteeDetailsQuery, GetCommitteeDetailsQueryVariables> & ({ variables: GetCommitteeDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCommitteeDetailsQuery, GetCommitteeDetailsQueryVariables>(GetCommitteeDetailsDocument, options);
      }
export function useGetCommitteeDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCommitteeDetailsQuery, GetCommitteeDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCommitteeDetailsQuery, GetCommitteeDetailsQueryVariables>(GetCommitteeDetailsDocument, options);
        }
export function useGetCommitteeDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCommitteeDetailsQuery, GetCommitteeDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCommitteeDetailsQuery, GetCommitteeDetailsQueryVariables>(GetCommitteeDetailsDocument, options);
        }
export type GetCommitteeDetailsQueryHookResult = ReturnType<typeof useGetCommitteeDetailsQuery>;
export type GetCommitteeDetailsLazyQueryHookResult = ReturnType<typeof useGetCommitteeDetailsLazyQuery>;
export type GetCommitteeDetailsSuspenseQueryHookResult = ReturnType<typeof useGetCommitteeDetailsSuspenseQuery>;
export type GetCommitteeDetailsQueryResult = Apollo.QueryResult<GetCommitteeDetailsQuery, GetCommitteeDetailsQueryVariables>;
export const CommitteeAddUserDocument = gql`
    mutation CommitteeAddUser($input: CommitteeAddUserInput!) {
  committeeAddUser(input: $input) {
    committee {
      ...CommitteeFields
    }
  }
}
    ${CommitteeFieldsFragmentDoc}`;
export type CommitteeAddUserMutationFn = Apollo.MutationFunction<CommitteeAddUserMutation, CommitteeAddUserMutationVariables>;

/**
 * __useCommitteeAddUserMutation__
 *
 * To run a mutation, you first call `useCommitteeAddUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCommitteeAddUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [committeeAddUserMutation, { data, loading, error }] = useCommitteeAddUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCommitteeAddUserMutation(baseOptions?: Apollo.MutationHookOptions<CommitteeAddUserMutation, CommitteeAddUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CommitteeAddUserMutation, CommitteeAddUserMutationVariables>(CommitteeAddUserDocument, options);
      }
export type CommitteeAddUserMutationHookResult = ReturnType<typeof useCommitteeAddUserMutation>;
export type CommitteeAddUserMutationResult = Apollo.MutationResult<CommitteeAddUserMutation>;
export type CommitteeAddUserMutationOptions = Apollo.BaseMutationOptions<CommitteeAddUserMutation, CommitteeAddUserMutationVariables>;
export const CreateCommitteeDocument = gql`
    mutation CreateCommittee($input: CommitteeCreateInput!) {
  committeeCreate(input: $input) {
    committee {
      ...CommitteeFields
    }
  }
}
    ${CommitteeFieldsFragmentDoc}`;
export type CreateCommitteeMutationFn = Apollo.MutationFunction<CreateCommitteeMutation, CreateCommitteeMutationVariables>;

/**
 * __useCreateCommitteeMutation__
 *
 * To run a mutation, you first call `useCreateCommitteeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCommitteeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCommitteeMutation, { data, loading, error }] = useCreateCommitteeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCommitteeMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommitteeMutation, CreateCommitteeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCommitteeMutation, CreateCommitteeMutationVariables>(CreateCommitteeDocument, options);
      }
export type CreateCommitteeMutationHookResult = ReturnType<typeof useCreateCommitteeMutation>;
export type CreateCommitteeMutationResult = Apollo.MutationResult<CreateCommitteeMutation>;
export type CreateCommitteeMutationOptions = Apollo.BaseMutationOptions<CreateCommitteeMutation, CreateCommitteeMutationVariables>;
export const CommitteesDocument = gql`
    query Committees($first: Int!, $after: String) {
  committees(first: $first, after: $after) {
    edges {
      cursor
      node {
        ...CommitteeFields
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    ${CommitteeFieldsFragmentDoc}`;

/**
 * __useCommitteesQuery__
 *
 * To run a query within a React component, call `useCommitteesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCommitteesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCommitteesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useCommitteesQuery(baseOptions: Apollo.QueryHookOptions<CommitteesQuery, CommitteesQueryVariables> & ({ variables: CommitteesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CommitteesQuery, CommitteesQueryVariables>(CommitteesDocument, options);
      }
export function useCommitteesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommitteesQuery, CommitteesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CommitteesQuery, CommitteesQueryVariables>(CommitteesDocument, options);
        }
export function useCommitteesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CommitteesQuery, CommitteesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CommitteesQuery, CommitteesQueryVariables>(CommitteesDocument, options);
        }
export type CommitteesQueryHookResult = ReturnType<typeof useCommitteesQuery>;
export type CommitteesLazyQueryHookResult = ReturnType<typeof useCommitteesLazyQuery>;
export type CommitteesSuspenseQueryHookResult = ReturnType<typeof useCommitteesSuspenseQuery>;
export type CommitteesQueryResult = Apollo.QueryResult<CommitteesQuery, CommitteesQueryVariables>;
export const CommitteeRemoveUserDocument = gql`
    mutation CommitteeRemoveUser($input: CommitteeRemoveUserInput!) {
  committeeRemoveUser(input: $input) {
    committee {
      ...CommitteeFields
    }
  }
}
    ${CommitteeFieldsFragmentDoc}`;
export type CommitteeRemoveUserMutationFn = Apollo.MutationFunction<CommitteeRemoveUserMutation, CommitteeRemoveUserMutationVariables>;

/**
 * __useCommitteeRemoveUserMutation__
 *
 * To run a mutation, you first call `useCommitteeRemoveUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCommitteeRemoveUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [committeeRemoveUserMutation, { data, loading, error }] = useCommitteeRemoveUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCommitteeRemoveUserMutation(baseOptions?: Apollo.MutationHookOptions<CommitteeRemoveUserMutation, CommitteeRemoveUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CommitteeRemoveUserMutation, CommitteeRemoveUserMutationVariables>(CommitteeRemoveUserDocument, options);
      }
export type CommitteeRemoveUserMutationHookResult = ReturnType<typeof useCommitteeRemoveUserMutation>;
export type CommitteeRemoveUserMutationResult = Apollo.MutationResult<CommitteeRemoveUserMutation>;
export type CommitteeRemoveUserMutationOptions = Apollo.BaseMutationOptions<CommitteeRemoveUserMutation, CommitteeRemoveUserMutationVariables>;
export const GetCreditFacilityDisbursalsDocument = gql`
    query GetCreditFacilityDisbursals($publicId: PublicId!) {
  creditFacilityByPublicId(id: $publicId) {
    id
    creditFacilityId
    disbursals {
      ...DisbursalOnFacilityPage
    }
  }
}
    ${DisbursalOnFacilityPageFragmentDoc}`;

/**
 * __useGetCreditFacilityDisbursalsQuery__
 *
 * To run a query within a React component, call `useGetCreditFacilityDisbursalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreditFacilityDisbursalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreditFacilityDisbursalsQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useGetCreditFacilityDisbursalsQuery(baseOptions: Apollo.QueryHookOptions<GetCreditFacilityDisbursalsQuery, GetCreditFacilityDisbursalsQueryVariables> & ({ variables: GetCreditFacilityDisbursalsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCreditFacilityDisbursalsQuery, GetCreditFacilityDisbursalsQueryVariables>(GetCreditFacilityDisbursalsDocument, options);
      }
export function useGetCreditFacilityDisbursalsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCreditFacilityDisbursalsQuery, GetCreditFacilityDisbursalsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCreditFacilityDisbursalsQuery, GetCreditFacilityDisbursalsQueryVariables>(GetCreditFacilityDisbursalsDocument, options);
        }
export function useGetCreditFacilityDisbursalsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCreditFacilityDisbursalsQuery, GetCreditFacilityDisbursalsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCreditFacilityDisbursalsQuery, GetCreditFacilityDisbursalsQueryVariables>(GetCreditFacilityDisbursalsDocument, options);
        }
export type GetCreditFacilityDisbursalsQueryHookResult = ReturnType<typeof useGetCreditFacilityDisbursalsQuery>;
export type GetCreditFacilityDisbursalsLazyQueryHookResult = ReturnType<typeof useGetCreditFacilityDisbursalsLazyQuery>;
export type GetCreditFacilityDisbursalsSuspenseQueryHookResult = ReturnType<typeof useGetCreditFacilityDisbursalsSuspenseQuery>;
export type GetCreditFacilityDisbursalsQueryResult = Apollo.QueryResult<GetCreditFacilityDisbursalsQuery, GetCreditFacilityDisbursalsQueryVariables>;
export const GetCreditFacilityLayoutDetailsDocument = gql`
    query GetCreditFacilityLayoutDetails($publicId: PublicId!) {
  creditFacilityByPublicId(id: $publicId) {
    ...CreditFacilityLayoutFragment
  }
}
    ${CreditFacilityLayoutFragmentFragmentDoc}`;

/**
 * __useGetCreditFacilityLayoutDetailsQuery__
 *
 * To run a query within a React component, call `useGetCreditFacilityLayoutDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreditFacilityLayoutDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreditFacilityLayoutDetailsQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useGetCreditFacilityLayoutDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetCreditFacilityLayoutDetailsQuery, GetCreditFacilityLayoutDetailsQueryVariables> & ({ variables: GetCreditFacilityLayoutDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCreditFacilityLayoutDetailsQuery, GetCreditFacilityLayoutDetailsQueryVariables>(GetCreditFacilityLayoutDetailsDocument, options);
      }
export function useGetCreditFacilityLayoutDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCreditFacilityLayoutDetailsQuery, GetCreditFacilityLayoutDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCreditFacilityLayoutDetailsQuery, GetCreditFacilityLayoutDetailsQueryVariables>(GetCreditFacilityLayoutDetailsDocument, options);
        }
export function useGetCreditFacilityLayoutDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCreditFacilityLayoutDetailsQuery, GetCreditFacilityLayoutDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCreditFacilityLayoutDetailsQuery, GetCreditFacilityLayoutDetailsQueryVariables>(GetCreditFacilityLayoutDetailsDocument, options);
        }
export type GetCreditFacilityLayoutDetailsQueryHookResult = ReturnType<typeof useGetCreditFacilityLayoutDetailsQuery>;
export type GetCreditFacilityLayoutDetailsLazyQueryHookResult = ReturnType<typeof useGetCreditFacilityLayoutDetailsLazyQuery>;
export type GetCreditFacilityLayoutDetailsSuspenseQueryHookResult = ReturnType<typeof useGetCreditFacilityLayoutDetailsSuspenseQuery>;
export type GetCreditFacilityLayoutDetailsQueryResult = Apollo.QueryResult<GetCreditFacilityLayoutDetailsQuery, GetCreditFacilityLayoutDetailsQueryVariables>;
export const CreditFacilityLedgerAccountsDocument = gql`
    query CreditFacilityLedgerAccounts($publicId: PublicId!) {
  creditFacilityByPublicId(id: $publicId) {
    id
    ledgerAccounts {
      facilityAccount {
        ...LedgerAccountInfo
      }
      inLiquidationAccount {
        ...LedgerAccountInfo
      }
      disbursedReceivableNotYetDueAccount {
        ...LedgerAccountInfo
      }
      disbursedReceivableDueAccount {
        ...LedgerAccountInfo
      }
      disbursedReceivableOverdueAccount {
        ...LedgerAccountInfo
      }
      disbursedDefaultedAccount {
        ...LedgerAccountInfo
      }
      collateralAccount {
        ...LedgerAccountInfo
      }
      interestReceivableNotYetDueAccount {
        ...LedgerAccountInfo
      }
      interestReceivableDueAccount {
        ...LedgerAccountInfo
      }
      interestReceivableOverdueAccount {
        ...LedgerAccountInfo
      }
      interestDefaultedAccount {
        ...LedgerAccountInfo
      }
      interestIncomeAccount {
        ...LedgerAccountInfo
      }
      feeIncomeAccount {
        ...LedgerAccountInfo
      }
    }
  }
}
    ${LedgerAccountInfoFragmentDoc}`;

/**
 * __useCreditFacilityLedgerAccountsQuery__
 *
 * To run a query within a React component, call `useCreditFacilityLedgerAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilityLedgerAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreditFacilityLedgerAccountsQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useCreditFacilityLedgerAccountsQuery(baseOptions: Apollo.QueryHookOptions<CreditFacilityLedgerAccountsQuery, CreditFacilityLedgerAccountsQueryVariables> & ({ variables: CreditFacilityLedgerAccountsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CreditFacilityLedgerAccountsQuery, CreditFacilityLedgerAccountsQueryVariables>(CreditFacilityLedgerAccountsDocument, options);
      }
export function useCreditFacilityLedgerAccountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CreditFacilityLedgerAccountsQuery, CreditFacilityLedgerAccountsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CreditFacilityLedgerAccountsQuery, CreditFacilityLedgerAccountsQueryVariables>(CreditFacilityLedgerAccountsDocument, options);
        }
export function useCreditFacilityLedgerAccountsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CreditFacilityLedgerAccountsQuery, CreditFacilityLedgerAccountsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CreditFacilityLedgerAccountsQuery, CreditFacilityLedgerAccountsQueryVariables>(CreditFacilityLedgerAccountsDocument, options);
        }
export type CreditFacilityLedgerAccountsQueryHookResult = ReturnType<typeof useCreditFacilityLedgerAccountsQuery>;
export type CreditFacilityLedgerAccountsLazyQueryHookResult = ReturnType<typeof useCreditFacilityLedgerAccountsLazyQuery>;
export type CreditFacilityLedgerAccountsSuspenseQueryHookResult = ReturnType<typeof useCreditFacilityLedgerAccountsSuspenseQuery>;
export type CreditFacilityLedgerAccountsQueryResult = Apollo.QueryResult<CreditFacilityLedgerAccountsQuery, CreditFacilityLedgerAccountsQueryVariables>;
export const GetCreditFacilityHistoryDocument = gql`
    query GetCreditFacilityHistory($publicId: PublicId!) {
  creditFacilityByPublicId(id: $publicId) {
    ...CreditFacilityHistoryFragment
  }
}
    ${CreditFacilityHistoryFragmentFragmentDoc}`;

/**
 * __useGetCreditFacilityHistoryQuery__
 *
 * To run a query within a React component, call `useGetCreditFacilityHistoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreditFacilityHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreditFacilityHistoryQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useGetCreditFacilityHistoryQuery(baseOptions: Apollo.QueryHookOptions<GetCreditFacilityHistoryQuery, GetCreditFacilityHistoryQueryVariables> & ({ variables: GetCreditFacilityHistoryQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCreditFacilityHistoryQuery, GetCreditFacilityHistoryQueryVariables>(GetCreditFacilityHistoryDocument, options);
      }
export function useGetCreditFacilityHistoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCreditFacilityHistoryQuery, GetCreditFacilityHistoryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCreditFacilityHistoryQuery, GetCreditFacilityHistoryQueryVariables>(GetCreditFacilityHistoryDocument, options);
        }
export function useGetCreditFacilityHistorySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCreditFacilityHistoryQuery, GetCreditFacilityHistoryQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCreditFacilityHistoryQuery, GetCreditFacilityHistoryQueryVariables>(GetCreditFacilityHistoryDocument, options);
        }
export type GetCreditFacilityHistoryQueryHookResult = ReturnType<typeof useGetCreditFacilityHistoryQuery>;
export type GetCreditFacilityHistoryLazyQueryHookResult = ReturnType<typeof useGetCreditFacilityHistoryLazyQuery>;
export type GetCreditFacilityHistorySuspenseQueryHookResult = ReturnType<typeof useGetCreditFacilityHistorySuspenseQuery>;
export type GetCreditFacilityHistoryQueryResult = Apollo.QueryResult<GetCreditFacilityHistoryQuery, GetCreditFacilityHistoryQueryVariables>;
export const GetCreditFacilityRepaymentPlanDocument = gql`
    query GetCreditFacilityRepaymentPlan($publicId: PublicId!) {
  creditFacilityByPublicId(id: $publicId) {
    id
    creditFacilityId
    repaymentPlan {
      ...RepaymentOnFacilityPage
    }
  }
}
    ${RepaymentOnFacilityPageFragmentDoc}`;

/**
 * __useGetCreditFacilityRepaymentPlanQuery__
 *
 * To run a query within a React component, call `useGetCreditFacilityRepaymentPlanQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreditFacilityRepaymentPlanQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreditFacilityRepaymentPlanQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useGetCreditFacilityRepaymentPlanQuery(baseOptions: Apollo.QueryHookOptions<GetCreditFacilityRepaymentPlanQuery, GetCreditFacilityRepaymentPlanQueryVariables> & ({ variables: GetCreditFacilityRepaymentPlanQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCreditFacilityRepaymentPlanQuery, GetCreditFacilityRepaymentPlanQueryVariables>(GetCreditFacilityRepaymentPlanDocument, options);
      }
export function useGetCreditFacilityRepaymentPlanLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCreditFacilityRepaymentPlanQuery, GetCreditFacilityRepaymentPlanQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCreditFacilityRepaymentPlanQuery, GetCreditFacilityRepaymentPlanQueryVariables>(GetCreditFacilityRepaymentPlanDocument, options);
        }
export function useGetCreditFacilityRepaymentPlanSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCreditFacilityRepaymentPlanQuery, GetCreditFacilityRepaymentPlanQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCreditFacilityRepaymentPlanQuery, GetCreditFacilityRepaymentPlanQueryVariables>(GetCreditFacilityRepaymentPlanDocument, options);
        }
export type GetCreditFacilityRepaymentPlanQueryHookResult = ReturnType<typeof useGetCreditFacilityRepaymentPlanQuery>;
export type GetCreditFacilityRepaymentPlanLazyQueryHookResult = ReturnType<typeof useGetCreditFacilityRepaymentPlanLazyQuery>;
export type GetCreditFacilityRepaymentPlanSuspenseQueryHookResult = ReturnType<typeof useGetCreditFacilityRepaymentPlanSuspenseQuery>;
export type GetCreditFacilityRepaymentPlanQueryResult = Apollo.QueryResult<GetCreditFacilityRepaymentPlanQuery, GetCreditFacilityRepaymentPlanQueryVariables>;
export const CreditFacilityCollateralUpdateDocument = gql`
    mutation CreditFacilityCollateralUpdate($input: CreditFacilityCollateralUpdateInput!) {
  creditFacilityCollateralUpdate(input: $input) {
    creditFacility {
      id
      creditFacilityId
      balance {
        collateral {
          btcBalance
        }
      }
      ...CreditFacilityHistoryFragment
      ...CreditFacilityLayoutFragment
    }
  }
}
    ${CreditFacilityHistoryFragmentFragmentDoc}
${CreditFacilityLayoutFragmentFragmentDoc}`;
export type CreditFacilityCollateralUpdateMutationFn = Apollo.MutationFunction<CreditFacilityCollateralUpdateMutation, CreditFacilityCollateralUpdateMutationVariables>;

/**
 * __useCreditFacilityCollateralUpdateMutation__
 *
 * To run a mutation, you first call `useCreditFacilityCollateralUpdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilityCollateralUpdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creditFacilityCollateralUpdateMutation, { data, loading, error }] = useCreditFacilityCollateralUpdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreditFacilityCollateralUpdateMutation(baseOptions?: Apollo.MutationHookOptions<CreditFacilityCollateralUpdateMutation, CreditFacilityCollateralUpdateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreditFacilityCollateralUpdateMutation, CreditFacilityCollateralUpdateMutationVariables>(CreditFacilityCollateralUpdateDocument, options);
      }
export type CreditFacilityCollateralUpdateMutationHookResult = ReturnType<typeof useCreditFacilityCollateralUpdateMutation>;
export type CreditFacilityCollateralUpdateMutationResult = Apollo.MutationResult<CreditFacilityCollateralUpdateMutation>;
export type CreditFacilityCollateralUpdateMutationOptions = Apollo.BaseMutationOptions<CreditFacilityCollateralUpdateMutation, CreditFacilityCollateralUpdateMutationVariables>;
export const CreditFacilitiesDocument = gql`
    query CreditFacilities($first: Int!, $after: String, $sort: CreditFacilitiesSort, $filter: CreditFacilitiesFilter) {
  creditFacilities(first: $first, after: $after, sort: $sort, filter: $filter) {
    edges {
      cursor
      node {
        id
        creditFacilityId
        publicId
        collateralizationState
        activatedAt
        status
        facilityAmount
        currentCvl {
          __typename
          ... on FiniteCVLPct {
            value
          }
          ... on InfiniteCVLPct {
            isInfinite
          }
        }
        balance {
          collateral {
            btcBalance
          }
          outstanding {
            usdBalance
          }
        }
        customer {
          customerId
          email
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}
    `;

/**
 * __useCreditFacilitiesQuery__
 *
 * To run a query within a React component, call `useCreditFacilitiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreditFacilitiesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useCreditFacilitiesQuery(baseOptions: Apollo.QueryHookOptions<CreditFacilitiesQuery, CreditFacilitiesQueryVariables> & ({ variables: CreditFacilitiesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CreditFacilitiesQuery, CreditFacilitiesQueryVariables>(CreditFacilitiesDocument, options);
      }
export function useCreditFacilitiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CreditFacilitiesQuery, CreditFacilitiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CreditFacilitiesQuery, CreditFacilitiesQueryVariables>(CreditFacilitiesDocument, options);
        }
export function useCreditFacilitiesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CreditFacilitiesQuery, CreditFacilitiesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CreditFacilitiesQuery, CreditFacilitiesQueryVariables>(CreditFacilitiesDocument, options);
        }
export type CreditFacilitiesQueryHookResult = ReturnType<typeof useCreditFacilitiesQuery>;
export type CreditFacilitiesLazyQueryHookResult = ReturnType<typeof useCreditFacilitiesLazyQuery>;
export type CreditFacilitiesSuspenseQueryHookResult = ReturnType<typeof useCreditFacilitiesSuspenseQuery>;
export type CreditFacilitiesQueryResult = Apollo.QueryResult<CreditFacilitiesQuery, CreditFacilitiesQueryVariables>;
export const CreditFacilityPartialPaymentRecordDocument = gql`
    mutation CreditFacilityPartialPaymentRecord($input: CreditFacilityPartialPaymentRecordInput!) {
  creditFacilityPartialPaymentRecord(input: $input) {
    creditFacility {
      id
      creditFacilityId
      ...CreditFacilityHistoryFragment
      ...CreditFacilityLayoutFragment
    }
  }
}
    ${CreditFacilityHistoryFragmentFragmentDoc}
${CreditFacilityLayoutFragmentFragmentDoc}`;
export type CreditFacilityPartialPaymentRecordMutationFn = Apollo.MutationFunction<CreditFacilityPartialPaymentRecordMutation, CreditFacilityPartialPaymentRecordMutationVariables>;

/**
 * __useCreditFacilityPartialPaymentRecordMutation__
 *
 * To run a mutation, you first call `useCreditFacilityPartialPaymentRecordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilityPartialPaymentRecordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creditFacilityPartialPaymentRecordMutation, { data, loading, error }] = useCreditFacilityPartialPaymentRecordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreditFacilityPartialPaymentRecordMutation(baseOptions?: Apollo.MutationHookOptions<CreditFacilityPartialPaymentRecordMutation, CreditFacilityPartialPaymentRecordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreditFacilityPartialPaymentRecordMutation, CreditFacilityPartialPaymentRecordMutationVariables>(CreditFacilityPartialPaymentRecordDocument, options);
      }
export type CreditFacilityPartialPaymentRecordMutationHookResult = ReturnType<typeof useCreditFacilityPartialPaymentRecordMutation>;
export type CreditFacilityPartialPaymentRecordMutationResult = Apollo.MutationResult<CreditFacilityPartialPaymentRecordMutation>;
export type CreditFacilityPartialPaymentRecordMutationOptions = Apollo.BaseMutationOptions<CreditFacilityPartialPaymentRecordMutation, CreditFacilityPartialPaymentRecordMutationVariables>;
export const CreditFacilityPartialPaymentWithDateRecordDocument = gql`
    mutation CreditFacilityPartialPaymentWithDateRecord($input: CreditFacilityPartialPaymentWithDateRecordInput!) {
  creditFacilityPartialPaymentWithDateRecord(input: $input) {
    creditFacility {
      id
      creditFacilityId
      ...CreditFacilityHistoryFragment
      ...CreditFacilityLayoutFragment
    }
  }
}
    ${CreditFacilityHistoryFragmentFragmentDoc}
${CreditFacilityLayoutFragmentFragmentDoc}`;
export type CreditFacilityPartialPaymentWithDateRecordMutationFn = Apollo.MutationFunction<CreditFacilityPartialPaymentWithDateRecordMutation, CreditFacilityPartialPaymentWithDateRecordMutationVariables>;

/**
 * __useCreditFacilityPartialPaymentWithDateRecordMutation__
 *
 * To run a mutation, you first call `useCreditFacilityPartialPaymentWithDateRecordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilityPartialPaymentWithDateRecordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creditFacilityPartialPaymentWithDateRecordMutation, { data, loading, error }] = useCreditFacilityPartialPaymentWithDateRecordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreditFacilityPartialPaymentWithDateRecordMutation(baseOptions?: Apollo.MutationHookOptions<CreditFacilityPartialPaymentWithDateRecordMutation, CreditFacilityPartialPaymentWithDateRecordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreditFacilityPartialPaymentWithDateRecordMutation, CreditFacilityPartialPaymentWithDateRecordMutationVariables>(CreditFacilityPartialPaymentWithDateRecordDocument, options);
      }
export type CreditFacilityPartialPaymentWithDateRecordMutationHookResult = ReturnType<typeof useCreditFacilityPartialPaymentWithDateRecordMutation>;
export type CreditFacilityPartialPaymentWithDateRecordMutationResult = Apollo.MutationResult<CreditFacilityPartialPaymentWithDateRecordMutation>;
export type CreditFacilityPartialPaymentWithDateRecordMutationOptions = Apollo.BaseMutationOptions<CreditFacilityPartialPaymentWithDateRecordMutation, CreditFacilityPartialPaymentWithDateRecordMutationVariables>;
export const GetCreditFacilityProposalLayoutDetailsDocument = gql`
    query GetCreditFacilityProposalLayoutDetails($creditFacilityProposalId: UUID!) {
  creditFacilityProposal(id: $creditFacilityProposalId) {
    ...CreditFacilityProposalLayoutFragment
  }
}
    ${CreditFacilityProposalLayoutFragmentFragmentDoc}`;

/**
 * __useGetCreditFacilityProposalLayoutDetailsQuery__
 *
 * To run a query within a React component, call `useGetCreditFacilityProposalLayoutDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreditFacilityProposalLayoutDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreditFacilityProposalLayoutDetailsQuery({
 *   variables: {
 *      creditFacilityProposalId: // value for 'creditFacilityProposalId'
 *   },
 * });
 */
export function useGetCreditFacilityProposalLayoutDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetCreditFacilityProposalLayoutDetailsQuery, GetCreditFacilityProposalLayoutDetailsQueryVariables> & ({ variables: GetCreditFacilityProposalLayoutDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCreditFacilityProposalLayoutDetailsQuery, GetCreditFacilityProposalLayoutDetailsQueryVariables>(GetCreditFacilityProposalLayoutDetailsDocument, options);
      }
export function useGetCreditFacilityProposalLayoutDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCreditFacilityProposalLayoutDetailsQuery, GetCreditFacilityProposalLayoutDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCreditFacilityProposalLayoutDetailsQuery, GetCreditFacilityProposalLayoutDetailsQueryVariables>(GetCreditFacilityProposalLayoutDetailsDocument, options);
        }
export function useGetCreditFacilityProposalLayoutDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCreditFacilityProposalLayoutDetailsQuery, GetCreditFacilityProposalLayoutDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCreditFacilityProposalLayoutDetailsQuery, GetCreditFacilityProposalLayoutDetailsQueryVariables>(GetCreditFacilityProposalLayoutDetailsDocument, options);
        }
export type GetCreditFacilityProposalLayoutDetailsQueryHookResult = ReturnType<typeof useGetCreditFacilityProposalLayoutDetailsQuery>;
export type GetCreditFacilityProposalLayoutDetailsLazyQueryHookResult = ReturnType<typeof useGetCreditFacilityProposalLayoutDetailsLazyQuery>;
export type GetCreditFacilityProposalLayoutDetailsSuspenseQueryHookResult = ReturnType<typeof useGetCreditFacilityProposalLayoutDetailsSuspenseQuery>;
export type GetCreditFacilityProposalLayoutDetailsQueryResult = Apollo.QueryResult<GetCreditFacilityProposalLayoutDetailsQuery, GetCreditFacilityProposalLayoutDetailsQueryVariables>;
export const GetCreditFacilityProposalRepaymentPlanDocument = gql`
    query GetCreditFacilityProposalRepaymentPlan($id: UUID!) {
  creditFacilityProposal(id: $id) {
    id
    creditFacilityProposalId
    repaymentPlan {
      ...RepaymentOnFacilityPage
    }
  }
}
    ${RepaymentOnFacilityPageFragmentDoc}`;

/**
 * __useGetCreditFacilityProposalRepaymentPlanQuery__
 *
 * To run a query within a React component, call `useGetCreditFacilityProposalRepaymentPlanQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreditFacilityProposalRepaymentPlanQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreditFacilityProposalRepaymentPlanQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCreditFacilityProposalRepaymentPlanQuery(baseOptions: Apollo.QueryHookOptions<GetCreditFacilityProposalRepaymentPlanQuery, GetCreditFacilityProposalRepaymentPlanQueryVariables> & ({ variables: GetCreditFacilityProposalRepaymentPlanQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCreditFacilityProposalRepaymentPlanQuery, GetCreditFacilityProposalRepaymentPlanQueryVariables>(GetCreditFacilityProposalRepaymentPlanDocument, options);
      }
export function useGetCreditFacilityProposalRepaymentPlanLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCreditFacilityProposalRepaymentPlanQuery, GetCreditFacilityProposalRepaymentPlanQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCreditFacilityProposalRepaymentPlanQuery, GetCreditFacilityProposalRepaymentPlanQueryVariables>(GetCreditFacilityProposalRepaymentPlanDocument, options);
        }
export function useGetCreditFacilityProposalRepaymentPlanSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCreditFacilityProposalRepaymentPlanQuery, GetCreditFacilityProposalRepaymentPlanQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCreditFacilityProposalRepaymentPlanQuery, GetCreditFacilityProposalRepaymentPlanQueryVariables>(GetCreditFacilityProposalRepaymentPlanDocument, options);
        }
export type GetCreditFacilityProposalRepaymentPlanQueryHookResult = ReturnType<typeof useGetCreditFacilityProposalRepaymentPlanQuery>;
export type GetCreditFacilityProposalRepaymentPlanLazyQueryHookResult = ReturnType<typeof useGetCreditFacilityProposalRepaymentPlanLazyQuery>;
export type GetCreditFacilityProposalRepaymentPlanSuspenseQueryHookResult = ReturnType<typeof useGetCreditFacilityProposalRepaymentPlanSuspenseQuery>;
export type GetCreditFacilityProposalRepaymentPlanQueryResult = Apollo.QueryResult<GetCreditFacilityProposalRepaymentPlanQuery, GetCreditFacilityProposalRepaymentPlanQueryVariables>;
export const CreditFacilityProposalCollateralUpdateDocument = gql`
    mutation CreditFacilityProposalCollateralUpdate($input: CreditFacilityProposalCollateralUpdateInput!) {
  creditFacilityProposalCollateralUpdate(input: $input) {
    creditFacilityProposal {
      id
      creditFacilityProposalId
      collateral {
        btcBalance
      }
      ...CreditFacilityProposalLayoutFragment
    }
  }
}
    ${CreditFacilityProposalLayoutFragmentFragmentDoc}`;
export type CreditFacilityProposalCollateralUpdateMutationFn = Apollo.MutationFunction<CreditFacilityProposalCollateralUpdateMutation, CreditFacilityProposalCollateralUpdateMutationVariables>;

/**
 * __useCreditFacilityProposalCollateralUpdateMutation__
 *
 * To run a mutation, you first call `useCreditFacilityProposalCollateralUpdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilityProposalCollateralUpdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creditFacilityProposalCollateralUpdateMutation, { data, loading, error }] = useCreditFacilityProposalCollateralUpdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreditFacilityProposalCollateralUpdateMutation(baseOptions?: Apollo.MutationHookOptions<CreditFacilityProposalCollateralUpdateMutation, CreditFacilityProposalCollateralUpdateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreditFacilityProposalCollateralUpdateMutation, CreditFacilityProposalCollateralUpdateMutationVariables>(CreditFacilityProposalCollateralUpdateDocument, options);
      }
export type CreditFacilityProposalCollateralUpdateMutationHookResult = ReturnType<typeof useCreditFacilityProposalCollateralUpdateMutation>;
export type CreditFacilityProposalCollateralUpdateMutationResult = Apollo.MutationResult<CreditFacilityProposalCollateralUpdateMutation>;
export type CreditFacilityProposalCollateralUpdateMutationOptions = Apollo.BaseMutationOptions<CreditFacilityProposalCollateralUpdateMutation, CreditFacilityProposalCollateralUpdateMutationVariables>;
export const CreditFacilityProposalCreateDocument = gql`
    mutation CreditFacilityProposalCreate($input: CreditFacilityProposalCreateInput!) {
  creditFacilityProposalCreate(input: $input) {
    creditFacilityProposal {
      id
      creditFacilityProposalId
      customer {
        id
        email
        creditFacilityProposals {
          id
        }
      }
    }
  }
}
    `;
export type CreditFacilityProposalCreateMutationFn = Apollo.MutationFunction<CreditFacilityProposalCreateMutation, CreditFacilityProposalCreateMutationVariables>;

/**
 * __useCreditFacilityProposalCreateMutation__
 *
 * To run a mutation, you first call `useCreditFacilityProposalCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilityProposalCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creditFacilityProposalCreateMutation, { data, loading, error }] = useCreditFacilityProposalCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreditFacilityProposalCreateMutation(baseOptions?: Apollo.MutationHookOptions<CreditFacilityProposalCreateMutation, CreditFacilityProposalCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreditFacilityProposalCreateMutation, CreditFacilityProposalCreateMutationVariables>(CreditFacilityProposalCreateDocument, options);
      }
export type CreditFacilityProposalCreateMutationHookResult = ReturnType<typeof useCreditFacilityProposalCreateMutation>;
export type CreditFacilityProposalCreateMutationResult = Apollo.MutationResult<CreditFacilityProposalCreateMutation>;
export type CreditFacilityProposalCreateMutationOptions = Apollo.BaseMutationOptions<CreditFacilityProposalCreateMutation, CreditFacilityProposalCreateMutationVariables>;
export const CreditFacilityProposalsDocument = gql`
    query CreditFacilityProposals($first: Int!, $after: String) {
  creditFacilityProposals(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        creditFacilityProposalId
        createdAt
        collateralizationState
        facilityAmount
        status
        collateral {
          btcBalance
        }
        customer {
          customerId
          email
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}
    `;

/**
 * __useCreditFacilityProposalsQuery__
 *
 * To run a query within a React component, call `useCreditFacilityProposalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilityProposalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreditFacilityProposalsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useCreditFacilityProposalsQuery(baseOptions: Apollo.QueryHookOptions<CreditFacilityProposalsQuery, CreditFacilityProposalsQueryVariables> & ({ variables: CreditFacilityProposalsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CreditFacilityProposalsQuery, CreditFacilityProposalsQueryVariables>(CreditFacilityProposalsDocument, options);
      }
export function useCreditFacilityProposalsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CreditFacilityProposalsQuery, CreditFacilityProposalsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CreditFacilityProposalsQuery, CreditFacilityProposalsQueryVariables>(CreditFacilityProposalsDocument, options);
        }
export function useCreditFacilityProposalsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CreditFacilityProposalsQuery, CreditFacilityProposalsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CreditFacilityProposalsQuery, CreditFacilityProposalsQueryVariables>(CreditFacilityProposalsDocument, options);
        }
export type CreditFacilityProposalsQueryHookResult = ReturnType<typeof useCreditFacilityProposalsQuery>;
export type CreditFacilityProposalsLazyQueryHookResult = ReturnType<typeof useCreditFacilityProposalsLazyQuery>;
export type CreditFacilityProposalsSuspenseQueryHookResult = ReturnType<typeof useCreditFacilityProposalsSuspenseQuery>;
export type CreditFacilityProposalsQueryResult = Apollo.QueryResult<CreditFacilityProposalsQuery, CreditFacilityProposalsQueryVariables>;
export const CustodianCreateDocument = gql`
    mutation CustodianCreate($input: CustodianCreateInput!) {
  custodianCreate(input: $input) {
    custodian {
      id
      custodianId
      name
      createdAt
    }
  }
}
    `;
export type CustodianCreateMutationFn = Apollo.MutationFunction<CustodianCreateMutation, CustodianCreateMutationVariables>;

/**
 * __useCustodianCreateMutation__
 *
 * To run a mutation, you first call `useCustodianCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCustodianCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [custodianCreateMutation, { data, loading, error }] = useCustodianCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCustodianCreateMutation(baseOptions?: Apollo.MutationHookOptions<CustodianCreateMutation, CustodianCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CustodianCreateMutation, CustodianCreateMutationVariables>(CustodianCreateDocument, options);
      }
export type CustodianCreateMutationHookResult = ReturnType<typeof useCustodianCreateMutation>;
export type CustodianCreateMutationResult = Apollo.MutationResult<CustodianCreateMutation>;
export type CustodianCreateMutationOptions = Apollo.BaseMutationOptions<CustodianCreateMutation, CustodianCreateMutationVariables>;
export const CustodiansDocument = gql`
    query Custodians($first: Int!, $after: String) {
  custodians(first: $first, after: $after) {
    edges {
      cursor
      node {
        ...CustodianFields
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    ${CustodianFieldsFragmentDoc}`;

/**
 * __useCustodiansQuery__
 *
 * To run a query within a React component, call `useCustodiansQuery` and pass it any options that fit your needs.
 * When your component renders, `useCustodiansQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCustodiansQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useCustodiansQuery(baseOptions: Apollo.QueryHookOptions<CustodiansQuery, CustodiansQueryVariables> & ({ variables: CustodiansQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CustodiansQuery, CustodiansQueryVariables>(CustodiansDocument, options);
      }
export function useCustodiansLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CustodiansQuery, CustodiansQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CustodiansQuery, CustodiansQueryVariables>(CustodiansDocument, options);
        }
export function useCustodiansSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CustodiansQuery, CustodiansQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CustodiansQuery, CustodiansQueryVariables>(CustodiansDocument, options);
        }
export type CustodiansQueryHookResult = ReturnType<typeof useCustodiansQuery>;
export type CustodiansLazyQueryHookResult = ReturnType<typeof useCustodiansLazyQuery>;
export type CustodiansSuspenseQueryHookResult = ReturnType<typeof useCustodiansSuspenseQuery>;
export type CustodiansQueryResult = Apollo.QueryResult<CustodiansQuery, CustodiansQueryVariables>;
export const GetCustomerCreditFacilitiesDocument = gql`
    query GetCustomerCreditFacilities($id: PublicId!) {
  customerByPublicId(id: $id) {
    id
    creditFacilities {
      id
      creditFacilityId
      publicId
      collateralizationState
      status
      activatedAt
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
      }
    }
  }
}
    `;

/**
 * __useGetCustomerCreditFacilitiesQuery__
 *
 * To run a query within a React component, call `useGetCustomerCreditFacilitiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerCreditFacilitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerCreditFacilitiesQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCustomerCreditFacilitiesQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerCreditFacilitiesQuery, GetCustomerCreditFacilitiesQueryVariables> & ({ variables: GetCustomerCreditFacilitiesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerCreditFacilitiesQuery, GetCustomerCreditFacilitiesQueryVariables>(GetCustomerCreditFacilitiesDocument, options);
      }
export function useGetCustomerCreditFacilitiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerCreditFacilitiesQuery, GetCustomerCreditFacilitiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerCreditFacilitiesQuery, GetCustomerCreditFacilitiesQueryVariables>(GetCustomerCreditFacilitiesDocument, options);
        }
export function useGetCustomerCreditFacilitiesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCustomerCreditFacilitiesQuery, GetCustomerCreditFacilitiesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCustomerCreditFacilitiesQuery, GetCustomerCreditFacilitiesQueryVariables>(GetCustomerCreditFacilitiesDocument, options);
        }
export type GetCustomerCreditFacilitiesQueryHookResult = ReturnType<typeof useGetCustomerCreditFacilitiesQuery>;
export type GetCustomerCreditFacilitiesLazyQueryHookResult = ReturnType<typeof useGetCustomerCreditFacilitiesLazyQuery>;
export type GetCustomerCreditFacilitiesSuspenseQueryHookResult = ReturnType<typeof useGetCustomerCreditFacilitiesSuspenseQuery>;
export type GetCustomerCreditFacilitiesQueryResult = Apollo.QueryResult<GetCustomerCreditFacilitiesQuery, GetCustomerCreditFacilitiesQueryVariables>;
export const GetCustomerCreditFacilityProposalsDocument = gql`
    query GetCustomerCreditFacilityProposals($id: PublicId!) {
  customerByPublicId(id: $id) {
    id
    creditFacilityProposals {
      id
      creditFacilityProposalId
      createdAt
      collateralizationState
      facilityAmount
      status
      collateral {
        btcBalance
      }
      customer {
        customerId
        email
      }
    }
  }
}
    `;

/**
 * __useGetCustomerCreditFacilityProposalsQuery__
 *
 * To run a query within a React component, call `useGetCustomerCreditFacilityProposalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerCreditFacilityProposalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerCreditFacilityProposalsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCustomerCreditFacilityProposalsQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerCreditFacilityProposalsQuery, GetCustomerCreditFacilityProposalsQueryVariables> & ({ variables: GetCustomerCreditFacilityProposalsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerCreditFacilityProposalsQuery, GetCustomerCreditFacilityProposalsQueryVariables>(GetCustomerCreditFacilityProposalsDocument, options);
      }
export function useGetCustomerCreditFacilityProposalsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerCreditFacilityProposalsQuery, GetCustomerCreditFacilityProposalsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerCreditFacilityProposalsQuery, GetCustomerCreditFacilityProposalsQueryVariables>(GetCustomerCreditFacilityProposalsDocument, options);
        }
export function useGetCustomerCreditFacilityProposalsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCustomerCreditFacilityProposalsQuery, GetCustomerCreditFacilityProposalsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCustomerCreditFacilityProposalsQuery, GetCustomerCreditFacilityProposalsQueryVariables>(GetCustomerCreditFacilityProposalsDocument, options);
        }
export type GetCustomerCreditFacilityProposalsQueryHookResult = ReturnType<typeof useGetCustomerCreditFacilityProposalsQuery>;
export type GetCustomerCreditFacilityProposalsLazyQueryHookResult = ReturnType<typeof useGetCustomerCreditFacilityProposalsLazyQuery>;
export type GetCustomerCreditFacilityProposalsSuspenseQueryHookResult = ReturnType<typeof useGetCustomerCreditFacilityProposalsSuspenseQuery>;
export type GetCustomerCreditFacilityProposalsQueryResult = Apollo.QueryResult<GetCustomerCreditFacilityProposalsQuery, GetCustomerCreditFacilityProposalsQueryVariables>;
export const CustomerDocumentDownloadLinkGenerateDocument = gql`
    mutation CustomerDocumentDownloadLinkGenerate($input: CustomerDocumentDownloadLinksGenerateInput!) {
  customerDocumentDownloadLinkGenerate(input: $input) {
    link
  }
}
    `;
export type CustomerDocumentDownloadLinkGenerateMutationFn = Apollo.MutationFunction<CustomerDocumentDownloadLinkGenerateMutation, CustomerDocumentDownloadLinkGenerateMutationVariables>;

/**
 * __useCustomerDocumentDownloadLinkGenerateMutation__
 *
 * To run a mutation, you first call `useCustomerDocumentDownloadLinkGenerateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCustomerDocumentDownloadLinkGenerateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [customerDocumentDownloadLinkGenerateMutation, { data, loading, error }] = useCustomerDocumentDownloadLinkGenerateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCustomerDocumentDownloadLinkGenerateMutation(baseOptions?: Apollo.MutationHookOptions<CustomerDocumentDownloadLinkGenerateMutation, CustomerDocumentDownloadLinkGenerateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CustomerDocumentDownloadLinkGenerateMutation, CustomerDocumentDownloadLinkGenerateMutationVariables>(CustomerDocumentDownloadLinkGenerateDocument, options);
      }
export type CustomerDocumentDownloadLinkGenerateMutationHookResult = ReturnType<typeof useCustomerDocumentDownloadLinkGenerateMutation>;
export type CustomerDocumentDownloadLinkGenerateMutationResult = Apollo.MutationResult<CustomerDocumentDownloadLinkGenerateMutation>;
export type CustomerDocumentDownloadLinkGenerateMutationOptions = Apollo.BaseMutationOptions<CustomerDocumentDownloadLinkGenerateMutation, CustomerDocumentDownloadLinkGenerateMutationVariables>;
export const CustomerDocumentDeleteDocument = gql`
    mutation CustomerDocumentDelete($input: CustomerDocumentDeleteInput!) {
  customerDocumentDelete(input: $input) {
    deletedDocumentId
  }
}
    `;
export type CustomerDocumentDeleteMutationFn = Apollo.MutationFunction<CustomerDocumentDeleteMutation, CustomerDocumentDeleteMutationVariables>;

/**
 * __useCustomerDocumentDeleteMutation__
 *
 * To run a mutation, you first call `useCustomerDocumentDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCustomerDocumentDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [customerDocumentDeleteMutation, { data, loading, error }] = useCustomerDocumentDeleteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCustomerDocumentDeleteMutation(baseOptions?: Apollo.MutationHookOptions<CustomerDocumentDeleteMutation, CustomerDocumentDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CustomerDocumentDeleteMutation, CustomerDocumentDeleteMutationVariables>(CustomerDocumentDeleteDocument, options);
      }
export type CustomerDocumentDeleteMutationHookResult = ReturnType<typeof useCustomerDocumentDeleteMutation>;
export type CustomerDocumentDeleteMutationResult = Apollo.MutationResult<CustomerDocumentDeleteMutation>;
export type CustomerDocumentDeleteMutationOptions = Apollo.BaseMutationOptions<CustomerDocumentDeleteMutation, CustomerDocumentDeleteMutationVariables>;
export const CustomerDocumentAttachDocument = gql`
    mutation CustomerDocumentAttach($file: Upload!, $customerId: UUID!) {
  customerDocumentAttach(input: {file: $file, customerId: $customerId}) {
    document {
      id
      customerId
      filename
    }
  }
}
    `;
export type CustomerDocumentAttachMutationFn = Apollo.MutationFunction<CustomerDocumentAttachMutation, CustomerDocumentAttachMutationVariables>;

/**
 * __useCustomerDocumentAttachMutation__
 *
 * To run a mutation, you first call `useCustomerDocumentAttachMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCustomerDocumentAttachMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [customerDocumentAttachMutation, { data, loading, error }] = useCustomerDocumentAttachMutation({
 *   variables: {
 *      file: // value for 'file'
 *      customerId: // value for 'customerId'
 *   },
 * });
 */
export function useCustomerDocumentAttachMutation(baseOptions?: Apollo.MutationHookOptions<CustomerDocumentAttachMutation, CustomerDocumentAttachMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CustomerDocumentAttachMutation, CustomerDocumentAttachMutationVariables>(CustomerDocumentAttachDocument, options);
      }
export type CustomerDocumentAttachMutationHookResult = ReturnType<typeof useCustomerDocumentAttachMutation>;
export type CustomerDocumentAttachMutationResult = Apollo.MutationResult<CustomerDocumentAttachMutation>;
export type CustomerDocumentAttachMutationOptions = Apollo.BaseMutationOptions<CustomerDocumentAttachMutation, CustomerDocumentAttachMutationVariables>;
export const GetCustomerDocumentsDocument = gql`
    query GetCustomerDocuments($id: PublicId!) {
  customerByPublicId(id: $id) {
    id
    customerId
    documents {
      id
      filename
      documentId
    }
  }
}
    `;

/**
 * __useGetCustomerDocumentsQuery__
 *
 * To run a query within a React component, call `useGetCustomerDocumentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerDocumentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerDocumentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCustomerDocumentsQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerDocumentsQuery, GetCustomerDocumentsQueryVariables> & ({ variables: GetCustomerDocumentsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerDocumentsQuery, GetCustomerDocumentsQueryVariables>(GetCustomerDocumentsDocument, options);
      }
export function useGetCustomerDocumentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerDocumentsQuery, GetCustomerDocumentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerDocumentsQuery, GetCustomerDocumentsQueryVariables>(GetCustomerDocumentsDocument, options);
        }
export function useGetCustomerDocumentsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCustomerDocumentsQuery, GetCustomerDocumentsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCustomerDocumentsQuery, GetCustomerDocumentsQueryVariables>(GetCustomerDocumentsDocument, options);
        }
export type GetCustomerDocumentsQueryHookResult = ReturnType<typeof useGetCustomerDocumentsQuery>;
export type GetCustomerDocumentsLazyQueryHookResult = ReturnType<typeof useGetCustomerDocumentsLazyQuery>;
export type GetCustomerDocumentsSuspenseQueryHookResult = ReturnType<typeof useGetCustomerDocumentsSuspenseQuery>;
export type GetCustomerDocumentsQueryResult = Apollo.QueryResult<GetCustomerDocumentsQuery, GetCustomerDocumentsQueryVariables>;
export const DepositAccountFreezeDocument = gql`
    mutation DepositAccountFreeze($input: DepositAccountFreezeInput!) {
  depositAccountFreeze(input: $input) {
    account {
      id
    }
  }
}
    `;
export type DepositAccountFreezeMutationFn = Apollo.MutationFunction<DepositAccountFreezeMutation, DepositAccountFreezeMutationVariables>;

/**
 * __useDepositAccountFreezeMutation__
 *
 * To run a mutation, you first call `useDepositAccountFreezeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDepositAccountFreezeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [depositAccountFreezeMutation, { data, loading, error }] = useDepositAccountFreezeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDepositAccountFreezeMutation(baseOptions?: Apollo.MutationHookOptions<DepositAccountFreezeMutation, DepositAccountFreezeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DepositAccountFreezeMutation, DepositAccountFreezeMutationVariables>(DepositAccountFreezeDocument, options);
      }
export type DepositAccountFreezeMutationHookResult = ReturnType<typeof useDepositAccountFreezeMutation>;
export type DepositAccountFreezeMutationResult = Apollo.MutationResult<DepositAccountFreezeMutation>;
export type DepositAccountFreezeMutationOptions = Apollo.BaseMutationOptions<DepositAccountFreezeMutation, DepositAccountFreezeMutationVariables>;
export const GetKycStatusForCustomerDocument = gql`
    query GetKycStatusForCustomer($id: UUID!) {
  customer(id: $id) {
    customerId
    kycVerification
    level
    applicantId
  }
}
    `;

/**
 * __useGetKycStatusForCustomerQuery__
 *
 * To run a query within a React component, call `useGetKycStatusForCustomerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetKycStatusForCustomerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetKycStatusForCustomerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetKycStatusForCustomerQuery(baseOptions: Apollo.QueryHookOptions<GetKycStatusForCustomerQuery, GetKycStatusForCustomerQueryVariables> & ({ variables: GetKycStatusForCustomerQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetKycStatusForCustomerQuery, GetKycStatusForCustomerQueryVariables>(GetKycStatusForCustomerDocument, options);
      }
export function useGetKycStatusForCustomerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetKycStatusForCustomerQuery, GetKycStatusForCustomerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetKycStatusForCustomerQuery, GetKycStatusForCustomerQueryVariables>(GetKycStatusForCustomerDocument, options);
        }
export function useGetKycStatusForCustomerSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetKycStatusForCustomerQuery, GetKycStatusForCustomerQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetKycStatusForCustomerQuery, GetKycStatusForCustomerQueryVariables>(GetKycStatusForCustomerDocument, options);
        }
export type GetKycStatusForCustomerQueryHookResult = ReturnType<typeof useGetKycStatusForCustomerQuery>;
export type GetKycStatusForCustomerLazyQueryHookResult = ReturnType<typeof useGetKycStatusForCustomerLazyQuery>;
export type GetKycStatusForCustomerSuspenseQueryHookResult = ReturnType<typeof useGetKycStatusForCustomerSuspenseQuery>;
export type GetKycStatusForCustomerQueryResult = Apollo.QueryResult<GetKycStatusForCustomerQuery, GetKycStatusForCustomerQueryVariables>;
export const SumsubPermalinkCreateDocument = gql`
    mutation sumsubPermalinkCreate($input: SumsubPermalinkCreateInput!) {
  sumsubPermalinkCreate(input: $input) {
    url
  }
}
    `;
export type SumsubPermalinkCreateMutationFn = Apollo.MutationFunction<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>;

/**
 * __useSumsubPermalinkCreateMutation__
 *
 * To run a mutation, you first call `useSumsubPermalinkCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSumsubPermalinkCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sumsubPermalinkCreateMutation, { data, loading, error }] = useSumsubPermalinkCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSumsubPermalinkCreateMutation(baseOptions?: Apollo.MutationHookOptions<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>(SumsubPermalinkCreateDocument, options);
      }
export type SumsubPermalinkCreateMutationHookResult = ReturnType<typeof useSumsubPermalinkCreateMutation>;
export type SumsubPermalinkCreateMutationResult = Apollo.MutationResult<SumsubPermalinkCreateMutation>;
export type SumsubPermalinkCreateMutationOptions = Apollo.BaseMutationOptions<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>;
export const GetCustomerBasicDetailsDocument = gql`
    query GetCustomerBasicDetails($id: PublicId!) {
  customerByPublicId(id: $id) {
    id
    customerId
    email
    telegramId
    kycVerification
    activity
    level
    customerType
    createdAt
    publicId
    depositAccount {
      id
      status
      publicId
      depositAccountId
      balance {
        settled
        pending
      }
      ledgerAccounts {
        depositAccountId
        frozenDepositAccountId
      }
    }
  }
}
    `;

/**
 * __useGetCustomerBasicDetailsQuery__
 *
 * To run a query within a React component, call `useGetCustomerBasicDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerBasicDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerBasicDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCustomerBasicDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerBasicDetailsQuery, GetCustomerBasicDetailsQueryVariables> & ({ variables: GetCustomerBasicDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerBasicDetailsQuery, GetCustomerBasicDetailsQueryVariables>(GetCustomerBasicDetailsDocument, options);
      }
export function useGetCustomerBasicDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerBasicDetailsQuery, GetCustomerBasicDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerBasicDetailsQuery, GetCustomerBasicDetailsQueryVariables>(GetCustomerBasicDetailsDocument, options);
        }
export function useGetCustomerBasicDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCustomerBasicDetailsQuery, GetCustomerBasicDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCustomerBasicDetailsQuery, GetCustomerBasicDetailsQueryVariables>(GetCustomerBasicDetailsDocument, options);
        }
export type GetCustomerBasicDetailsQueryHookResult = ReturnType<typeof useGetCustomerBasicDetailsQuery>;
export type GetCustomerBasicDetailsLazyQueryHookResult = ReturnType<typeof useGetCustomerBasicDetailsLazyQuery>;
export type GetCustomerBasicDetailsSuspenseQueryHookResult = ReturnType<typeof useGetCustomerBasicDetailsSuspenseQuery>;
export type GetCustomerBasicDetailsQueryResult = Apollo.QueryResult<GetCustomerBasicDetailsQuery, GetCustomerBasicDetailsQueryVariables>;
export const GetCustomerTransactionHistoryDocument = gql`
    query GetCustomerTransactionHistory($id: PublicId!, $first: Int!, $after: String) {
  customerByPublicId(id: $id) {
    id
    customerId
    customerType
    depositAccount {
      depositAccountId
      history(first: $first, after: $after) {
        pageInfo {
          hasNextPage
          endCursor
          hasPreviousPage
          startCursor
        }
        edges {
          cursor
          node {
            ... on DepositEntry {
              recordedAt
              deposit {
                id
                depositId
                publicId
                accountId
                amount
                createdAt
                reference
                status
              }
            }
            ... on WithdrawalEntry {
              recordedAt
              withdrawal {
                id
                withdrawalId
                publicId
                accountId
                amount
                createdAt
                reference
                status
              }
            }
            ... on CancelledWithdrawalEntry {
              recordedAt
              withdrawal {
                id
                withdrawalId
                publicId
                accountId
                amount
                createdAt
                reference
                status
              }
            }
            ... on DisbursalEntry {
              recordedAt
              disbursal {
                id
                disbursalId
                publicId
                amount
                createdAt
                status
              }
            }
            ... on PaymentEntry {
              recordedAt
              payment {
                id
                paymentAllocationId
                amount
                createdAt
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useGetCustomerTransactionHistoryQuery__
 *
 * To run a query within a React component, call `useGetCustomerTransactionHistoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerTransactionHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerTransactionHistoryQuery({
 *   variables: {
 *      id: // value for 'id'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useGetCustomerTransactionHistoryQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerTransactionHistoryQuery, GetCustomerTransactionHistoryQueryVariables> & ({ variables: GetCustomerTransactionHistoryQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerTransactionHistoryQuery, GetCustomerTransactionHistoryQueryVariables>(GetCustomerTransactionHistoryDocument, options);
      }
export function useGetCustomerTransactionHistoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerTransactionHistoryQuery, GetCustomerTransactionHistoryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerTransactionHistoryQuery, GetCustomerTransactionHistoryQueryVariables>(GetCustomerTransactionHistoryDocument, options);
        }
export function useGetCustomerTransactionHistorySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCustomerTransactionHistoryQuery, GetCustomerTransactionHistoryQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCustomerTransactionHistoryQuery, GetCustomerTransactionHistoryQueryVariables>(GetCustomerTransactionHistoryDocument, options);
        }
export type GetCustomerTransactionHistoryQueryHookResult = ReturnType<typeof useGetCustomerTransactionHistoryQuery>;
export type GetCustomerTransactionHistoryLazyQueryHookResult = ReturnType<typeof useGetCustomerTransactionHistoryLazyQuery>;
export type GetCustomerTransactionHistorySuspenseQueryHookResult = ReturnType<typeof useGetCustomerTransactionHistorySuspenseQuery>;
export type GetCustomerTransactionHistoryQueryResult = Apollo.QueryResult<GetCustomerTransactionHistoryQuery, GetCustomerTransactionHistoryQueryVariables>;
export const CustomerEmailUpdateDocument = gql`
    mutation CustomerEmailUpdate($input: CustomerEmailUpdateInput!) {
  customerEmailUpdate(input: $input) {
    customer {
      id
      email
    }
  }
}
    `;
export type CustomerEmailUpdateMutationFn = Apollo.MutationFunction<CustomerEmailUpdateMutation, CustomerEmailUpdateMutationVariables>;

/**
 * __useCustomerEmailUpdateMutation__
 *
 * To run a mutation, you first call `useCustomerEmailUpdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCustomerEmailUpdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [customerEmailUpdateMutation, { data, loading, error }] = useCustomerEmailUpdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCustomerEmailUpdateMutation(baseOptions?: Apollo.MutationHookOptions<CustomerEmailUpdateMutation, CustomerEmailUpdateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CustomerEmailUpdateMutation, CustomerEmailUpdateMutationVariables>(CustomerEmailUpdateDocument, options);
      }
export type CustomerEmailUpdateMutationHookResult = ReturnType<typeof useCustomerEmailUpdateMutation>;
export type CustomerEmailUpdateMutationResult = Apollo.MutationResult<CustomerEmailUpdateMutation>;
export type CustomerEmailUpdateMutationOptions = Apollo.BaseMutationOptions<CustomerEmailUpdateMutation, CustomerEmailUpdateMutationVariables>;
export const CustomerTelegramIdUpdateDocument = gql`
    mutation CustomerTelegramIdUpdate($input: CustomerTelegramIdUpdateInput!) {
  customerTelegramIdUpdate(input: $input) {
    customer {
      id
      telegramId
    }
  }
}
    `;
export type CustomerTelegramIdUpdateMutationFn = Apollo.MutationFunction<CustomerTelegramIdUpdateMutation, CustomerTelegramIdUpdateMutationVariables>;

/**
 * __useCustomerTelegramIdUpdateMutation__
 *
 * To run a mutation, you first call `useCustomerTelegramIdUpdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCustomerTelegramIdUpdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [customerTelegramIdUpdateMutation, { data, loading, error }] = useCustomerTelegramIdUpdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCustomerTelegramIdUpdateMutation(baseOptions?: Apollo.MutationHookOptions<CustomerTelegramIdUpdateMutation, CustomerTelegramIdUpdateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CustomerTelegramIdUpdateMutation, CustomerTelegramIdUpdateMutationVariables>(CustomerTelegramIdUpdateDocument, options);
      }
export type CustomerTelegramIdUpdateMutationHookResult = ReturnType<typeof useCustomerTelegramIdUpdateMutation>;
export type CustomerTelegramIdUpdateMutationResult = Apollo.MutationResult<CustomerTelegramIdUpdateMutation>;
export type CustomerTelegramIdUpdateMutationOptions = Apollo.BaseMutationOptions<CustomerTelegramIdUpdateMutation, CustomerTelegramIdUpdateMutationVariables>;
export const CustomerCreateDocument = gql`
    mutation CustomerCreate($input: CustomerCreateInput!) {
  customerCreate(input: $input) {
    customer {
      id
      customerId
      publicId
      email
      kycVerification
      level
      applicantId
    }
  }
}
    `;
export type CustomerCreateMutationFn = Apollo.MutationFunction<CustomerCreateMutation, CustomerCreateMutationVariables>;

/**
 * __useCustomerCreateMutation__
 *
 * To run a mutation, you first call `useCustomerCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCustomerCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [customerCreateMutation, { data, loading, error }] = useCustomerCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCustomerCreateMutation(baseOptions?: Apollo.MutationHookOptions<CustomerCreateMutation, CustomerCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CustomerCreateMutation, CustomerCreateMutationVariables>(CustomerCreateDocument, options);
      }
export type CustomerCreateMutationHookResult = ReturnType<typeof useCustomerCreateMutation>;
export type CustomerCreateMutationResult = Apollo.MutationResult<CustomerCreateMutation>;
export type CustomerCreateMutationOptions = Apollo.BaseMutationOptions<CustomerCreateMutation, CustomerCreateMutationVariables>;
export const CustomersDocument = gql`
    query Customers($first: Int!, $after: String, $sort: CustomersSort, $filter: CustomersFilter) {
  customers(first: $first, after: $after, sort: $sort, filter: $filter) {
    edges {
      node {
        id
        customerId
        publicId
        kycVerification
        activity
        level
        email
        telegramId
        applicantId
        depositAccount {
          balance {
            settled
            pending
          }
        }
      }
      cursor
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useCustomersQuery__
 *
 * To run a query within a React component, call `useCustomersQuery` and pass it any options that fit your needs.
 * When your component renders, `useCustomersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCustomersQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      sort: // value for 'sort'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useCustomersQuery(baseOptions: Apollo.QueryHookOptions<CustomersQuery, CustomersQueryVariables> & ({ variables: CustomersQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
      }
export function useCustomersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CustomersQuery, CustomersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
        }
export function useCustomersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CustomersQuery, CustomersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
        }
export type CustomersQueryHookResult = ReturnType<typeof useCustomersQuery>;
export type CustomersLazyQueryHookResult = ReturnType<typeof useCustomersLazyQuery>;
export type CustomersSuspenseQueryHookResult = ReturnType<typeof useCustomersSuspenseQuery>;
export type CustomersQueryResult = Apollo.QueryResult<CustomersQuery, CustomersQueryVariables>;
export const DashboardDocument = gql`
    query Dashboard {
  dashboard {
    activeFacilities
    pendingFacilities
    totalDisbursed
    totalCollateral
  }
}
    `;

/**
 * __useDashboardQuery__
 *
 * To run a query within a React component, call `useDashboardQuery` and pass it any options that fit your needs.
 * When your component renders, `useDashboardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDashboardQuery({
 *   variables: {
 *   },
 * });
 */
export function useDashboardQuery(baseOptions?: Apollo.QueryHookOptions<DashboardQuery, DashboardQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DashboardQuery, DashboardQueryVariables>(DashboardDocument, options);
      }
export function useDashboardLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DashboardQuery, DashboardQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DashboardQuery, DashboardQueryVariables>(DashboardDocument, options);
        }
export function useDashboardSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<DashboardQuery, DashboardQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<DashboardQuery, DashboardQueryVariables>(DashboardDocument, options);
        }
export type DashboardQueryHookResult = ReturnType<typeof useDashboardQuery>;
export type DashboardLazyQueryHookResult = ReturnType<typeof useDashboardLazyQuery>;
export type DashboardSuspenseQueryHookResult = ReturnType<typeof useDashboardSuspenseQuery>;
export type DashboardQueryResult = Apollo.QueryResult<DashboardQuery, DashboardQueryVariables>;
export const GetDepositDetailsDocument = gql`
    query GetDepositDetails($publicId: PublicId!) {
  depositByPublicId(id: $publicId) {
    ...DepositDetailsPageFragment
  }
}
    ${DepositDetailsPageFragmentFragmentDoc}`;

/**
 * __useGetDepositDetailsQuery__
 *
 * To run a query within a React component, call `useGetDepositDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDepositDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDepositDetailsQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useGetDepositDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetDepositDetailsQuery, GetDepositDetailsQueryVariables> & ({ variables: GetDepositDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDepositDetailsQuery, GetDepositDetailsQueryVariables>(GetDepositDetailsDocument, options);
      }
export function useGetDepositDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDepositDetailsQuery, GetDepositDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDepositDetailsQuery, GetDepositDetailsQueryVariables>(GetDepositDetailsDocument, options);
        }
export function useGetDepositDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetDepositDetailsQuery, GetDepositDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetDepositDetailsQuery, GetDepositDetailsQueryVariables>(GetDepositDetailsDocument, options);
        }
export type GetDepositDetailsQueryHookResult = ReturnType<typeof useGetDepositDetailsQuery>;
export type GetDepositDetailsLazyQueryHookResult = ReturnType<typeof useGetDepositDetailsLazyQuery>;
export type GetDepositDetailsSuspenseQueryHookResult = ReturnType<typeof useGetDepositDetailsSuspenseQuery>;
export type GetDepositDetailsQueryResult = Apollo.QueryResult<GetDepositDetailsQuery, GetDepositDetailsQueryVariables>;
export const DepositRevertDocument = gql`
    mutation DepositRevert($input: DepositRevertInput!) {
  depositRevert(input: $input) {
    deposit {
      ...DepositDetailsPageFragment
    }
  }
}
    ${DepositDetailsPageFragmentFragmentDoc}`;
export type DepositRevertMutationFn = Apollo.MutationFunction<DepositRevertMutation, DepositRevertMutationVariables>;

/**
 * __useDepositRevertMutation__
 *
 * To run a mutation, you first call `useDepositRevertMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDepositRevertMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [depositRevertMutation, { data, loading, error }] = useDepositRevertMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDepositRevertMutation(baseOptions?: Apollo.MutationHookOptions<DepositRevertMutation, DepositRevertMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DepositRevertMutation, DepositRevertMutationVariables>(DepositRevertDocument, options);
      }
export type DepositRevertMutationHookResult = ReturnType<typeof useDepositRevertMutation>;
export type DepositRevertMutationResult = Apollo.MutationResult<DepositRevertMutation>;
export type DepositRevertMutationOptions = Apollo.BaseMutationOptions<DepositRevertMutation, DepositRevertMutationVariables>;
export const CreateDepositDocument = gql`
    mutation CreateDeposit($input: DepositRecordInput!) {
  depositRecord(input: $input) {
    deposit {
      ...DepositFields
      account {
        customer {
          id
          customerId
          depositAccount {
            id
            deposits {
              ...DepositFields
            }
          }
          depositAccount {
            id
            balance {
              settled
              pending
            }
          }
        }
      }
    }
  }
}
    ${DepositFieldsFragmentDoc}`;
export type CreateDepositMutationFn = Apollo.MutationFunction<CreateDepositMutation, CreateDepositMutationVariables>;

/**
 * __useCreateDepositMutation__
 *
 * To run a mutation, you first call `useCreateDepositMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDepositMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDepositMutation, { data, loading, error }] = useCreateDepositMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateDepositMutation(baseOptions?: Apollo.MutationHookOptions<CreateDepositMutation, CreateDepositMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateDepositMutation, CreateDepositMutationVariables>(CreateDepositDocument, options);
      }
export type CreateDepositMutationHookResult = ReturnType<typeof useCreateDepositMutation>;
export type CreateDepositMutationResult = Apollo.MutationResult<CreateDepositMutation>;
export type CreateDepositMutationOptions = Apollo.BaseMutationOptions<CreateDepositMutation, CreateDepositMutationVariables>;
export const DepositsDocument = gql`
    query Deposits($first: Int!, $after: String) {
  deposits(first: $first, after: $after) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        ...DepositFields
      }
    }
  }
}
    ${DepositFieldsFragmentDoc}`;

/**
 * __useDepositsQuery__
 *
 * To run a query within a React component, call `useDepositsQuery` and pass it any options that fit your needs.
 * When your component renders, `useDepositsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDepositsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useDepositsQuery(baseOptions: Apollo.QueryHookOptions<DepositsQuery, DepositsQueryVariables> & ({ variables: DepositsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DepositsQuery, DepositsQueryVariables>(DepositsDocument, options);
      }
export function useDepositsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DepositsQuery, DepositsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DepositsQuery, DepositsQueryVariables>(DepositsDocument, options);
        }
export function useDepositsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<DepositsQuery, DepositsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<DepositsQuery, DepositsQueryVariables>(DepositsDocument, options);
        }
export type DepositsQueryHookResult = ReturnType<typeof useDepositsQuery>;
export type DepositsLazyQueryHookResult = ReturnType<typeof useDepositsLazyQuery>;
export type DepositsSuspenseQueryHookResult = ReturnType<typeof useDepositsSuspenseQuery>;
export type DepositsQueryResult = Apollo.QueryResult<DepositsQuery, DepositsQueryVariables>;
export const GetDisbursalDetailsDocument = gql`
    query GetDisbursalDetails($publicId: PublicId!) {
  disbursalByPublicId(id: $publicId) {
    id
    disbursalId
    amount
    createdAt
    status
    publicId
    ledgerTransactions {
      ...LedgerTransactionFields
    }
    creditFacility {
      id
      creditFacilityId
      facilityAmount
      status
      publicId
      customer {
        id
        email
        customerId
        publicId
        depositAccount {
          balance {
            settled
            pending
          }
        }
      }
    }
    approvalProcess {
      ...ApprovalProcessFields
    }
  }
}
    ${LedgerTransactionFieldsFragmentDoc}
${ApprovalProcessFieldsFragmentDoc}`;

/**
 * __useGetDisbursalDetailsQuery__
 *
 * To run a query within a React component, call `useGetDisbursalDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDisbursalDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDisbursalDetailsQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useGetDisbursalDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetDisbursalDetailsQuery, GetDisbursalDetailsQueryVariables> & ({ variables: GetDisbursalDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDisbursalDetailsQuery, GetDisbursalDetailsQueryVariables>(GetDisbursalDetailsDocument, options);
      }
export function useGetDisbursalDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDisbursalDetailsQuery, GetDisbursalDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDisbursalDetailsQuery, GetDisbursalDetailsQueryVariables>(GetDisbursalDetailsDocument, options);
        }
export function useGetDisbursalDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetDisbursalDetailsQuery, GetDisbursalDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetDisbursalDetailsQuery, GetDisbursalDetailsQueryVariables>(GetDisbursalDetailsDocument, options);
        }
export type GetDisbursalDetailsQueryHookResult = ReturnType<typeof useGetDisbursalDetailsQuery>;
export type GetDisbursalDetailsLazyQueryHookResult = ReturnType<typeof useGetDisbursalDetailsLazyQuery>;
export type GetDisbursalDetailsSuspenseQueryHookResult = ReturnType<typeof useGetDisbursalDetailsSuspenseQuery>;
export type GetDisbursalDetailsQueryResult = Apollo.QueryResult<GetDisbursalDetailsQuery, GetDisbursalDetailsQueryVariables>;
export const CreditFacilityDisbursalInitiateDocument = gql`
    mutation CreditFacilityDisbursalInitiate($input: CreditFacilityDisbursalInitiateInput!) {
  creditFacilityDisbursalInitiate(input: $input) {
    disbursal {
      id
      disbursalId
      publicId
      amount
      status
      createdAt
      creditFacility {
        id
        disbursals {
          ...DisbursalOnFacilityPage
        }
        ...CreditFacilityHistoryFragment
        ...CreditFacilityLayoutFragment
      }
    }
  }
}
    ${DisbursalOnFacilityPageFragmentDoc}
${CreditFacilityHistoryFragmentFragmentDoc}
${CreditFacilityLayoutFragmentFragmentDoc}`;
export type CreditFacilityDisbursalInitiateMutationFn = Apollo.MutationFunction<CreditFacilityDisbursalInitiateMutation, CreditFacilityDisbursalInitiateMutationVariables>;

/**
 * __useCreditFacilityDisbursalInitiateMutation__
 *
 * To run a mutation, you first call `useCreditFacilityDisbursalInitiateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreditFacilityDisbursalInitiateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creditFacilityDisbursalInitiateMutation, { data, loading, error }] = useCreditFacilityDisbursalInitiateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreditFacilityDisbursalInitiateMutation(baseOptions?: Apollo.MutationHookOptions<CreditFacilityDisbursalInitiateMutation, CreditFacilityDisbursalInitiateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreditFacilityDisbursalInitiateMutation, CreditFacilityDisbursalInitiateMutationVariables>(CreditFacilityDisbursalInitiateDocument, options);
      }
export type CreditFacilityDisbursalInitiateMutationHookResult = ReturnType<typeof useCreditFacilityDisbursalInitiateMutation>;
export type CreditFacilityDisbursalInitiateMutationResult = Apollo.MutationResult<CreditFacilityDisbursalInitiateMutation>;
export type CreditFacilityDisbursalInitiateMutationOptions = Apollo.BaseMutationOptions<CreditFacilityDisbursalInitiateMutation, CreditFacilityDisbursalInitiateMutationVariables>;
export const DisbursalsDocument = gql`
    query Disbursals($first: Int!, $after: String) {
  disbursals(first: $first, after: $after) {
    edges {
      node {
        id
        disbursalId
        publicId
        amount
        createdAt
        status
      }
      cursor
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useDisbursalsQuery__
 *
 * To run a query within a React component, call `useDisbursalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useDisbursalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDisbursalsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useDisbursalsQuery(baseOptions: Apollo.QueryHookOptions<DisbursalsQuery, DisbursalsQueryVariables> & ({ variables: DisbursalsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DisbursalsQuery, DisbursalsQueryVariables>(DisbursalsDocument, options);
      }
export function useDisbursalsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DisbursalsQuery, DisbursalsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DisbursalsQuery, DisbursalsQueryVariables>(DisbursalsDocument, options);
        }
export function useDisbursalsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<DisbursalsQuery, DisbursalsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<DisbursalsQuery, DisbursalsQueryVariables>(DisbursalsDocument, options);
        }
export type DisbursalsQueryHookResult = ReturnType<typeof useDisbursalsQuery>;
export type DisbursalsLazyQueryHookResult = ReturnType<typeof useDisbursalsLazyQuery>;
export type DisbursalsSuspenseQueryHookResult = ReturnType<typeof useDisbursalsSuspenseQuery>;
export type DisbursalsQueryResult = Apollo.QueryResult<DisbursalsQuery, DisbursalsQueryVariables>;
export const ExecuteManualTransactionDocument = gql`
    mutation ExecuteManualTransaction($input: ManualTransactionExecuteInput!) {
  manualTransactionExecute(input: $input) {
    transaction {
      id
      ledgerTransactionId
      createdAt
      description
    }
  }
}
    `;
export type ExecuteManualTransactionMutationFn = Apollo.MutationFunction<ExecuteManualTransactionMutation, ExecuteManualTransactionMutationVariables>;

/**
 * __useExecuteManualTransactionMutation__
 *
 * To run a mutation, you first call `useExecuteManualTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExecuteManualTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [executeManualTransactionMutation, { data, loading, error }] = useExecuteManualTransactionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useExecuteManualTransactionMutation(baseOptions?: Apollo.MutationHookOptions<ExecuteManualTransactionMutation, ExecuteManualTransactionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ExecuteManualTransactionMutation, ExecuteManualTransactionMutationVariables>(ExecuteManualTransactionDocument, options);
      }
export type ExecuteManualTransactionMutationHookResult = ReturnType<typeof useExecuteManualTransactionMutation>;
export type ExecuteManualTransactionMutationResult = Apollo.MutationResult<ExecuteManualTransactionMutation>;
export type ExecuteManualTransactionMutationOptions = Apollo.BaseMutationOptions<ExecuteManualTransactionMutation, ExecuteManualTransactionMutationVariables>;
export const JournalEntriesDocument = gql`
    query JournalEntries($first: Int!, $after: String) {
  journalEntries(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        entryId
        entryType
        description
        direction
        layer
        createdAt
        amount {
          ... on UsdAmount {
            usd
          }
          ... on BtcAmount {
            btc
          }
        }
        ledgerAccount {
          id
          ledgerAccountId
          code
          name
          closestAccountWithCode {
            code
          }
        }
        ledgerTransaction {
          id
          ledgerTransactionId
          description
          effective
        }
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useJournalEntriesQuery__
 *
 * To run a query within a React component, call `useJournalEntriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useJournalEntriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useJournalEntriesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useJournalEntriesQuery(baseOptions: Apollo.QueryHookOptions<JournalEntriesQuery, JournalEntriesQueryVariables> & ({ variables: JournalEntriesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<JournalEntriesQuery, JournalEntriesQueryVariables>(JournalEntriesDocument, options);
      }
export function useJournalEntriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<JournalEntriesQuery, JournalEntriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<JournalEntriesQuery, JournalEntriesQueryVariables>(JournalEntriesDocument, options);
        }
export function useJournalEntriesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<JournalEntriesQuery, JournalEntriesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<JournalEntriesQuery, JournalEntriesQueryVariables>(JournalEntriesDocument, options);
        }
export type JournalEntriesQueryHookResult = ReturnType<typeof useJournalEntriesQuery>;
export type JournalEntriesLazyQueryHookResult = ReturnType<typeof useJournalEntriesLazyQuery>;
export type JournalEntriesSuspenseQueryHookResult = ReturnType<typeof useJournalEntriesSuspenseQuery>;
export type JournalEntriesQueryResult = Apollo.QueryResult<JournalEntriesQuery, JournalEntriesQueryVariables>;
export const AccountEntryCsvDocument = gql`
    query AccountEntryCsv($ledgerAccountId: UUID!) {
  accountEntryCsv(ledgerAccountId: $ledgerAccountId) {
    id
    documentId
    status
    createdAt
  }
}
    `;

/**
 * __useAccountEntryCsvQuery__
 *
 * To run a query within a React component, call `useAccountEntryCsvQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountEntryCsvQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountEntryCsvQuery({
 *   variables: {
 *      ledgerAccountId: // value for 'ledgerAccountId'
 *   },
 * });
 */
export function useAccountEntryCsvQuery(baseOptions: Apollo.QueryHookOptions<AccountEntryCsvQuery, AccountEntryCsvQueryVariables> & ({ variables: AccountEntryCsvQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AccountEntryCsvQuery, AccountEntryCsvQueryVariables>(AccountEntryCsvDocument, options);
      }
export function useAccountEntryCsvLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AccountEntryCsvQuery, AccountEntryCsvQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AccountEntryCsvQuery, AccountEntryCsvQueryVariables>(AccountEntryCsvDocument, options);
        }
export function useAccountEntryCsvSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AccountEntryCsvQuery, AccountEntryCsvQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AccountEntryCsvQuery, AccountEntryCsvQueryVariables>(AccountEntryCsvDocument, options);
        }
export type AccountEntryCsvQueryHookResult = ReturnType<typeof useAccountEntryCsvQuery>;
export type AccountEntryCsvLazyQueryHookResult = ReturnType<typeof useAccountEntryCsvLazyQuery>;
export type AccountEntryCsvSuspenseQueryHookResult = ReturnType<typeof useAccountEntryCsvSuspenseQuery>;
export type AccountEntryCsvQueryResult = Apollo.QueryResult<AccountEntryCsvQuery, AccountEntryCsvQueryVariables>;
export const LedgerAccountCsvCreateDocument = gql`
    mutation LedgerAccountCsvCreate($input: LedgerAccountCsvCreateInput!) {
  ledgerAccountCsvCreate(input: $input) {
    accountingCsvDocument {
      id
      documentId
      status
      createdAt
    }
  }
}
    `;
export type LedgerAccountCsvCreateMutationFn = Apollo.MutationFunction<LedgerAccountCsvCreateMutation, LedgerAccountCsvCreateMutationVariables>;

/**
 * __useLedgerAccountCsvCreateMutation__
 *
 * To run a mutation, you first call `useLedgerAccountCsvCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLedgerAccountCsvCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [ledgerAccountCsvCreateMutation, { data, loading, error }] = useLedgerAccountCsvCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLedgerAccountCsvCreateMutation(baseOptions?: Apollo.MutationHookOptions<LedgerAccountCsvCreateMutation, LedgerAccountCsvCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LedgerAccountCsvCreateMutation, LedgerAccountCsvCreateMutationVariables>(LedgerAccountCsvCreateDocument, options);
      }
export type LedgerAccountCsvCreateMutationHookResult = ReturnType<typeof useLedgerAccountCsvCreateMutation>;
export type LedgerAccountCsvCreateMutationResult = Apollo.MutationResult<LedgerAccountCsvCreateMutation>;
export type LedgerAccountCsvCreateMutationOptions = Apollo.BaseMutationOptions<LedgerAccountCsvCreateMutation, LedgerAccountCsvCreateMutationVariables>;
export const AccountingCsvDownloadLinkGenerateDocument = gql`
    mutation AccountingCsvDownloadLinkGenerate($input: AccountingCsvDownloadLinkGenerateInput!) {
  accountingCsvDownloadLinkGenerate(input: $input) {
    link {
      url
      csvId
    }
  }
}
    `;
export type AccountingCsvDownloadLinkGenerateMutationFn = Apollo.MutationFunction<AccountingCsvDownloadLinkGenerateMutation, AccountingCsvDownloadLinkGenerateMutationVariables>;

/**
 * __useAccountingCsvDownloadLinkGenerateMutation__
 *
 * To run a mutation, you first call `useAccountingCsvDownloadLinkGenerateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAccountingCsvDownloadLinkGenerateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [accountingCsvDownloadLinkGenerateMutation, { data, loading, error }] = useAccountingCsvDownloadLinkGenerateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAccountingCsvDownloadLinkGenerateMutation(baseOptions?: Apollo.MutationHookOptions<AccountingCsvDownloadLinkGenerateMutation, AccountingCsvDownloadLinkGenerateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AccountingCsvDownloadLinkGenerateMutation, AccountingCsvDownloadLinkGenerateMutationVariables>(AccountingCsvDownloadLinkGenerateDocument, options);
      }
export type AccountingCsvDownloadLinkGenerateMutationHookResult = ReturnType<typeof useAccountingCsvDownloadLinkGenerateMutation>;
export type AccountingCsvDownloadLinkGenerateMutationResult = Apollo.MutationResult<AccountingCsvDownloadLinkGenerateMutation>;
export type AccountingCsvDownloadLinkGenerateMutationOptions = Apollo.BaseMutationOptions<AccountingCsvDownloadLinkGenerateMutation, AccountingCsvDownloadLinkGenerateMutationVariables>;
export const LedgerAccountByCodeDocument = gql`
    query LedgerAccountByCode($code: String!, $first: Int!, $after: String) {
  ledgerAccountByCode(code: $code) {
    ...LedgerAccountDetails
  }
}
    ${LedgerAccountDetailsFragmentDoc}`;

/**
 * __useLedgerAccountByCodeQuery__
 *
 * To run a query within a React component, call `useLedgerAccountByCodeQuery` and pass it any options that fit your needs.
 * When your component renders, `useLedgerAccountByCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLedgerAccountByCodeQuery({
 *   variables: {
 *      code: // value for 'code'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useLedgerAccountByCodeQuery(baseOptions: Apollo.QueryHookOptions<LedgerAccountByCodeQuery, LedgerAccountByCodeQueryVariables> & ({ variables: LedgerAccountByCodeQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LedgerAccountByCodeQuery, LedgerAccountByCodeQueryVariables>(LedgerAccountByCodeDocument, options);
      }
export function useLedgerAccountByCodeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LedgerAccountByCodeQuery, LedgerAccountByCodeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LedgerAccountByCodeQuery, LedgerAccountByCodeQueryVariables>(LedgerAccountByCodeDocument, options);
        }
export function useLedgerAccountByCodeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<LedgerAccountByCodeQuery, LedgerAccountByCodeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LedgerAccountByCodeQuery, LedgerAccountByCodeQueryVariables>(LedgerAccountByCodeDocument, options);
        }
export type LedgerAccountByCodeQueryHookResult = ReturnType<typeof useLedgerAccountByCodeQuery>;
export type LedgerAccountByCodeLazyQueryHookResult = ReturnType<typeof useLedgerAccountByCodeLazyQuery>;
export type LedgerAccountByCodeSuspenseQueryHookResult = ReturnType<typeof useLedgerAccountByCodeSuspenseQuery>;
export type LedgerAccountByCodeQueryResult = Apollo.QueryResult<LedgerAccountByCodeQuery, LedgerAccountByCodeQueryVariables>;
export const LedgerAccountDocument = gql`
    query LedgerAccount($id: UUID!, $first: Int!, $after: String) {
  ledgerAccount(id: $id) {
    ...LedgerAccountDetails
  }
}
    ${LedgerAccountDetailsFragmentDoc}`;

/**
 * __useLedgerAccountQuery__
 *
 * To run a query within a React component, call `useLedgerAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useLedgerAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLedgerAccountQuery({
 *   variables: {
 *      id: // value for 'id'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useLedgerAccountQuery(baseOptions: Apollo.QueryHookOptions<LedgerAccountQuery, LedgerAccountQueryVariables> & ({ variables: LedgerAccountQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LedgerAccountQuery, LedgerAccountQueryVariables>(LedgerAccountDocument, options);
      }
export function useLedgerAccountLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LedgerAccountQuery, LedgerAccountQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LedgerAccountQuery, LedgerAccountQueryVariables>(LedgerAccountDocument, options);
        }
export function useLedgerAccountSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<LedgerAccountQuery, LedgerAccountQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LedgerAccountQuery, LedgerAccountQueryVariables>(LedgerAccountDocument, options);
        }
export type LedgerAccountQueryHookResult = ReturnType<typeof useLedgerAccountQuery>;
export type LedgerAccountLazyQueryHookResult = ReturnType<typeof useLedgerAccountLazyQuery>;
export type LedgerAccountSuspenseQueryHookResult = ReturnType<typeof useLedgerAccountSuspenseQuery>;
export type LedgerAccountQueryResult = Apollo.QueryResult<LedgerAccountQuery, LedgerAccountQueryVariables>;
export const LedgerAccountExistsByCodeDocument = gql`
    query LedgerAccountExistsByCode($code: String!) {
  ledgerAccountByCode(code: $code) {
    id
  }
}
    `;

/**
 * __useLedgerAccountExistsByCodeQuery__
 *
 * To run a query within a React component, call `useLedgerAccountExistsByCodeQuery` and pass it any options that fit your needs.
 * When your component renders, `useLedgerAccountExistsByCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLedgerAccountExistsByCodeQuery({
 *   variables: {
 *      code: // value for 'code'
 *   },
 * });
 */
export function useLedgerAccountExistsByCodeQuery(baseOptions: Apollo.QueryHookOptions<LedgerAccountExistsByCodeQuery, LedgerAccountExistsByCodeQueryVariables> & ({ variables: LedgerAccountExistsByCodeQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LedgerAccountExistsByCodeQuery, LedgerAccountExistsByCodeQueryVariables>(LedgerAccountExistsByCodeDocument, options);
      }
export function useLedgerAccountExistsByCodeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LedgerAccountExistsByCodeQuery, LedgerAccountExistsByCodeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LedgerAccountExistsByCodeQuery, LedgerAccountExistsByCodeQueryVariables>(LedgerAccountExistsByCodeDocument, options);
        }
export function useLedgerAccountExistsByCodeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<LedgerAccountExistsByCodeQuery, LedgerAccountExistsByCodeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LedgerAccountExistsByCodeQuery, LedgerAccountExistsByCodeQueryVariables>(LedgerAccountExistsByCodeDocument, options);
        }
export type LedgerAccountExistsByCodeQueryHookResult = ReturnType<typeof useLedgerAccountExistsByCodeQuery>;
export type LedgerAccountExistsByCodeLazyQueryHookResult = ReturnType<typeof useLedgerAccountExistsByCodeLazyQuery>;
export type LedgerAccountExistsByCodeSuspenseQueryHookResult = ReturnType<typeof useLedgerAccountExistsByCodeSuspenseQuery>;
export type LedgerAccountExistsByCodeQueryResult = Apollo.QueryResult<LedgerAccountExistsByCodeQuery, LedgerAccountExistsByCodeQueryVariables>;
export const LedgerAccountExistsByIdDocument = gql`
    query LedgerAccountExistsById($id: UUID!) {
  ledgerAccount(id: $id) {
    id
  }
}
    `;

/**
 * __useLedgerAccountExistsByIdQuery__
 *
 * To run a query within a React component, call `useLedgerAccountExistsByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useLedgerAccountExistsByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLedgerAccountExistsByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useLedgerAccountExistsByIdQuery(baseOptions: Apollo.QueryHookOptions<LedgerAccountExistsByIdQuery, LedgerAccountExistsByIdQueryVariables> & ({ variables: LedgerAccountExistsByIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LedgerAccountExistsByIdQuery, LedgerAccountExistsByIdQueryVariables>(LedgerAccountExistsByIdDocument, options);
      }
export function useLedgerAccountExistsByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LedgerAccountExistsByIdQuery, LedgerAccountExistsByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LedgerAccountExistsByIdQuery, LedgerAccountExistsByIdQueryVariables>(LedgerAccountExistsByIdDocument, options);
        }
export function useLedgerAccountExistsByIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<LedgerAccountExistsByIdQuery, LedgerAccountExistsByIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LedgerAccountExistsByIdQuery, LedgerAccountExistsByIdQueryVariables>(LedgerAccountExistsByIdDocument, options);
        }
export type LedgerAccountExistsByIdQueryHookResult = ReturnType<typeof useLedgerAccountExistsByIdQuery>;
export type LedgerAccountExistsByIdLazyQueryHookResult = ReturnType<typeof useLedgerAccountExistsByIdLazyQuery>;
export type LedgerAccountExistsByIdSuspenseQueryHookResult = ReturnType<typeof useLedgerAccountExistsByIdSuspenseQuery>;
export type LedgerAccountExistsByIdQueryResult = Apollo.QueryResult<LedgerAccountExistsByIdQuery, LedgerAccountExistsByIdQueryVariables>;
export const LedgerTransactionDocument = gql`
    query LedgerTransaction($id: UUID!) {
  ledgerTransaction(id: $id) {
    id
    ledgerTransactionId
    createdAt
    description
    effective
    entity {
      __typename
      ... on Deposit {
        publicId
      }
      ... on Withdrawal {
        publicId
      }
      ... on CreditFacilityDisbursal {
        publicId
      }
    }
    entries {
      id
      entryId
      entryType
      amount {
        __typename
        ... on UsdAmount {
          usd
        }
        ... on BtcAmount {
          btc
        }
      }
      direction
      layer
      ledgerAccount {
        id
        ledgerAccountId
        code
        name
        closestAccountWithCode {
          code
        }
      }
    }
  }
}
    `;

/**
 * __useLedgerTransactionQuery__
 *
 * To run a query within a React component, call `useLedgerTransactionQuery` and pass it any options that fit your needs.
 * When your component renders, `useLedgerTransactionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLedgerTransactionQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useLedgerTransactionQuery(baseOptions: Apollo.QueryHookOptions<LedgerTransactionQuery, LedgerTransactionQueryVariables> & ({ variables: LedgerTransactionQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LedgerTransactionQuery, LedgerTransactionQueryVariables>(LedgerTransactionDocument, options);
      }
export function useLedgerTransactionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LedgerTransactionQuery, LedgerTransactionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LedgerTransactionQuery, LedgerTransactionQueryVariables>(LedgerTransactionDocument, options);
        }
export function useLedgerTransactionSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<LedgerTransactionQuery, LedgerTransactionQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LedgerTransactionQuery, LedgerTransactionQueryVariables>(LedgerTransactionDocument, options);
        }
export type LedgerTransactionQueryHookResult = ReturnType<typeof useLedgerTransactionQuery>;
export type LedgerTransactionLazyQueryHookResult = ReturnType<typeof useLedgerTransactionLazyQuery>;
export type LedgerTransactionSuspenseQueryHookResult = ReturnType<typeof useLedgerTransactionSuspenseQuery>;
export type LedgerTransactionQueryResult = Apollo.QueryResult<LedgerTransactionQuery, LedgerTransactionQueryVariables>;
export const BalanceSheetConfigureDocument = gql`
    mutation BalanceSheetConfigure($input: BalanceSheetModuleConfigureInput!) {
  balanceSheetConfigure(input: $input) {
    balanceSheetConfig {
      chartOfAccountsId
      chartOfAccountsAssetsCode
      chartOfAccountsLiabilitiesCode
      chartOfAccountsEquityCode
      chartOfAccountsRevenueCode
      chartOfAccountsCostOfRevenueCode
      chartOfAccountsExpensesCode
    }
  }
}
    `;
export type BalanceSheetConfigureMutationFn = Apollo.MutationFunction<BalanceSheetConfigureMutation, BalanceSheetConfigureMutationVariables>;

/**
 * __useBalanceSheetConfigureMutation__
 *
 * To run a mutation, you first call `useBalanceSheetConfigureMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBalanceSheetConfigureMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [balanceSheetConfigureMutation, { data, loading, error }] = useBalanceSheetConfigureMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBalanceSheetConfigureMutation(baseOptions?: Apollo.MutationHookOptions<BalanceSheetConfigureMutation, BalanceSheetConfigureMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<BalanceSheetConfigureMutation, BalanceSheetConfigureMutationVariables>(BalanceSheetConfigureDocument, options);
      }
export type BalanceSheetConfigureMutationHookResult = ReturnType<typeof useBalanceSheetConfigureMutation>;
export type BalanceSheetConfigureMutationResult = Apollo.MutationResult<BalanceSheetConfigureMutation>;
export type BalanceSheetConfigureMutationOptions = Apollo.BaseMutationOptions<BalanceSheetConfigureMutation, BalanceSheetConfigureMutationVariables>;
export const CreditModuleConfigureDocument = gql`
    mutation CreditModuleConfigure($input: CreditModuleConfigureInput!) {
  creditModuleConfigure(input: $input) {
    creditConfig {
      chartOfAccountsId
    }
  }
}
    `;
export type CreditModuleConfigureMutationFn = Apollo.MutationFunction<CreditModuleConfigureMutation, CreditModuleConfigureMutationVariables>;

/**
 * __useCreditModuleConfigureMutation__
 *
 * To run a mutation, you first call `useCreditModuleConfigureMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreditModuleConfigureMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [creditModuleConfigureMutation, { data, loading, error }] = useCreditModuleConfigureMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreditModuleConfigureMutation(baseOptions?: Apollo.MutationHookOptions<CreditModuleConfigureMutation, CreditModuleConfigureMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreditModuleConfigureMutation, CreditModuleConfigureMutationVariables>(CreditModuleConfigureDocument, options);
      }
export type CreditModuleConfigureMutationHookResult = ReturnType<typeof useCreditModuleConfigureMutation>;
export type CreditModuleConfigureMutationResult = Apollo.MutationResult<CreditModuleConfigureMutation>;
export type CreditModuleConfigureMutationOptions = Apollo.BaseMutationOptions<CreditModuleConfigureMutation, CreditModuleConfigureMutationVariables>;
export const DepositModuleConfigureDocument = gql`
    mutation DepositModuleConfigure($input: DepositModuleConfigureInput!) {
  depositModuleConfigure(input: $input) {
    depositConfig {
      chartOfAccountsId
      chartOfAccountsOmnibusParentCode
      chartOfAccountsIndividualDepositAccountsParentCode
      chartOfAccountsGovernmentEntityDepositAccountsParentCode
      chartOfAccountPrivateCompanyDepositAccountsParentCode
      chartOfAccountBankDepositAccountsParentCode
      chartOfAccountFinancialInstitutionDepositAccountsParentCode
      chartOfAccountNonDomiciledIndividualDepositAccountsParentCode
      chartOfAccountsFrozenIndividualDepositAccountsParentCode
      chartOfAccountsFrozenGovernmentEntityDepositAccountsParentCode
      chartOfAccountFrozenPrivateCompanyDepositAccountsParentCode
      chartOfAccountFrozenBankDepositAccountsParentCode
      chartOfAccountFrozenFinancialInstitutionDepositAccountsParentCode
      chartOfAccountFrozenNonDomiciledIndividualDepositAccountsParentCode
    }
  }
}
    `;
export type DepositModuleConfigureMutationFn = Apollo.MutationFunction<DepositModuleConfigureMutation, DepositModuleConfigureMutationVariables>;

/**
 * __useDepositModuleConfigureMutation__
 *
 * To run a mutation, you first call `useDepositModuleConfigureMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDepositModuleConfigureMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [depositModuleConfigureMutation, { data, loading, error }] = useDepositModuleConfigureMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDepositModuleConfigureMutation(baseOptions?: Apollo.MutationHookOptions<DepositModuleConfigureMutation, DepositModuleConfigureMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DepositModuleConfigureMutation, DepositModuleConfigureMutationVariables>(DepositModuleConfigureDocument, options);
      }
export type DepositModuleConfigureMutationHookResult = ReturnType<typeof useDepositModuleConfigureMutation>;
export type DepositModuleConfigureMutationResult = Apollo.MutationResult<DepositModuleConfigureMutation>;
export type DepositModuleConfigureMutationOptions = Apollo.BaseMutationOptions<DepositModuleConfigureMutation, DepositModuleConfigureMutationVariables>;
export const DepositConfigDocument = gql`
    query depositConfig {
  depositConfig {
    chartOfAccountsOmnibusParentCode
    chartOfAccountsIndividualDepositAccountsParentCode
    chartOfAccountsGovernmentEntityDepositAccountsParentCode
    chartOfAccountPrivateCompanyDepositAccountsParentCode
    chartOfAccountBankDepositAccountsParentCode
    chartOfAccountFinancialInstitutionDepositAccountsParentCode
    chartOfAccountNonDomiciledIndividualDepositAccountsParentCode
    chartOfAccountsFrozenIndividualDepositAccountsParentCode
    chartOfAccountsFrozenGovernmentEntityDepositAccountsParentCode
    chartOfAccountFrozenPrivateCompanyDepositAccountsParentCode
    chartOfAccountFrozenBankDepositAccountsParentCode
    chartOfAccountFrozenFinancialInstitutionDepositAccountsParentCode
    chartOfAccountFrozenNonDomiciledIndividualDepositAccountsParentCode
  }
}
    `;

/**
 * __useDepositConfigQuery__
 *
 * To run a query within a React component, call `useDepositConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useDepositConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDepositConfigQuery({
 *   variables: {
 *   },
 * });
 */
export function useDepositConfigQuery(baseOptions?: Apollo.QueryHookOptions<DepositConfigQuery, DepositConfigQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DepositConfigQuery, DepositConfigQueryVariables>(DepositConfigDocument, options);
      }
export function useDepositConfigLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DepositConfigQuery, DepositConfigQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DepositConfigQuery, DepositConfigQueryVariables>(DepositConfigDocument, options);
        }
export function useDepositConfigSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<DepositConfigQuery, DepositConfigQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<DepositConfigQuery, DepositConfigQueryVariables>(DepositConfigDocument, options);
        }
export type DepositConfigQueryHookResult = ReturnType<typeof useDepositConfigQuery>;
export type DepositConfigLazyQueryHookResult = ReturnType<typeof useDepositConfigLazyQuery>;
export type DepositConfigSuspenseQueryHookResult = ReturnType<typeof useDepositConfigSuspenseQuery>;
export type DepositConfigQueryResult = Apollo.QueryResult<DepositConfigQuery, DepositConfigQueryVariables>;
export const CreditConfigDocument = gql`
    query creditConfig {
  creditConfig {
    chartOfAccountFacilityOmnibusParentCode
    chartOfAccountCollateralOmnibusParentCode
    chartOfAccountInLiquidationOmnibusParentCode
    chartOfAccountFacilityParentCode
    chartOfAccountCollateralParentCode
    chartOfAccountInLiquidationParentCode
    chartOfAccountInterestIncomeParentCode
    chartOfAccountFeeIncomeParentCode
    chartOfAccountShortTermIndividualDisbursedReceivableParentCode
    chartOfAccountShortTermGovernmentEntityDisbursedReceivableParentCode
    chartOfAccountShortTermPrivateCompanyDisbursedReceivableParentCode
    chartOfAccountShortTermBankDisbursedReceivableParentCode
    chartOfAccountShortTermFinancialInstitutionDisbursedReceivableParentCode
    chartOfAccountShortTermForeignAgencyOrSubsidiaryDisbursedReceivableParentCode
    chartOfAccountShortTermNonDomiciledCompanyDisbursedReceivableParentCode
    chartOfAccountLongTermIndividualDisbursedReceivableParentCode
    chartOfAccountLongTermGovernmentEntityDisbursedReceivableParentCode
    chartOfAccountLongTermPrivateCompanyDisbursedReceivableParentCode
    chartOfAccountLongTermBankDisbursedReceivableParentCode
    chartOfAccountLongTermFinancialInstitutionDisbursedReceivableParentCode
    chartOfAccountLongTermForeignAgencyOrSubsidiaryDisbursedReceivableParentCode
    chartOfAccountLongTermNonDomiciledCompanyDisbursedReceivableParentCode
    chartOfAccountShortTermIndividualInterestReceivableParentCode
    chartOfAccountShortTermGovernmentEntityInterestReceivableParentCode
    chartOfAccountShortTermPrivateCompanyInterestReceivableParentCode
    chartOfAccountShortTermBankInterestReceivableParentCode
    chartOfAccountShortTermFinancialInstitutionInterestReceivableParentCode
    chartOfAccountShortTermForeignAgencyOrSubsidiaryInterestReceivableParentCode
    chartOfAccountShortTermNonDomiciledCompanyInterestReceivableParentCode
    chartOfAccountLongTermIndividualInterestReceivableParentCode
    chartOfAccountLongTermGovernmentEntityInterestReceivableParentCode
    chartOfAccountLongTermPrivateCompanyInterestReceivableParentCode
    chartOfAccountLongTermBankInterestReceivableParentCode
    chartOfAccountLongTermFinancialInstitutionInterestReceivableParentCode
    chartOfAccountLongTermForeignAgencyOrSubsidiaryInterestReceivableParentCode
    chartOfAccountLongTermNonDomiciledCompanyInterestReceivableParentCode
    chartOfAccountOverdueIndividualDisbursedReceivableParentCode
    chartOfAccountOverdueGovernmentEntityDisbursedReceivableParentCode
    chartOfAccountOverduePrivateCompanyDisbursedReceivableParentCode
    chartOfAccountOverdueBankDisbursedReceivableParentCode
    chartOfAccountOverdueFinancialInstitutionDisbursedReceivableParentCode
    chartOfAccountOverdueForeignAgencyOrSubsidiaryDisbursedReceivableParentCode
    chartOfAccountOverdueNonDomiciledCompanyDisbursedReceivableParentCode
  }
}
    `;

/**
 * __useCreditConfigQuery__
 *
 * To run a query within a React component, call `useCreditConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreditConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreditConfigQuery({
 *   variables: {
 *   },
 * });
 */
export function useCreditConfigQuery(baseOptions?: Apollo.QueryHookOptions<CreditConfigQuery, CreditConfigQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CreditConfigQuery, CreditConfigQueryVariables>(CreditConfigDocument, options);
      }
export function useCreditConfigLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CreditConfigQuery, CreditConfigQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CreditConfigQuery, CreditConfigQueryVariables>(CreditConfigDocument, options);
        }
export function useCreditConfigSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<CreditConfigQuery, CreditConfigQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<CreditConfigQuery, CreditConfigQueryVariables>(CreditConfigDocument, options);
        }
export type CreditConfigQueryHookResult = ReturnType<typeof useCreditConfigQuery>;
export type CreditConfigLazyQueryHookResult = ReturnType<typeof useCreditConfigLazyQuery>;
export type CreditConfigSuspenseQueryHookResult = ReturnType<typeof useCreditConfigSuspenseQuery>;
export type CreditConfigQueryResult = Apollo.QueryResult<CreditConfigQuery, CreditConfigQueryVariables>;
export const BalanceSheetConfigDocument = gql`
    query BalanceSheetConfig {
  balanceSheetConfig {
    chartOfAccountsAssetsCode
    chartOfAccountsLiabilitiesCode
    chartOfAccountsEquityCode
    chartOfAccountsRevenueCode
    chartOfAccountsCostOfRevenueCode
    chartOfAccountsExpensesCode
  }
}
    `;

/**
 * __useBalanceSheetConfigQuery__
 *
 * To run a query within a React component, call `useBalanceSheetConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useBalanceSheetConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBalanceSheetConfigQuery({
 *   variables: {
 *   },
 * });
 */
export function useBalanceSheetConfigQuery(baseOptions?: Apollo.QueryHookOptions<BalanceSheetConfigQuery, BalanceSheetConfigQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<BalanceSheetConfigQuery, BalanceSheetConfigQueryVariables>(BalanceSheetConfigDocument, options);
      }
export function useBalanceSheetConfigLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BalanceSheetConfigQuery, BalanceSheetConfigQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<BalanceSheetConfigQuery, BalanceSheetConfigQueryVariables>(BalanceSheetConfigDocument, options);
        }
export function useBalanceSheetConfigSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<BalanceSheetConfigQuery, BalanceSheetConfigQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<BalanceSheetConfigQuery, BalanceSheetConfigQueryVariables>(BalanceSheetConfigDocument, options);
        }
export type BalanceSheetConfigQueryHookResult = ReturnType<typeof useBalanceSheetConfigQuery>;
export type BalanceSheetConfigLazyQueryHookResult = ReturnType<typeof useBalanceSheetConfigLazyQuery>;
export type BalanceSheetConfigSuspenseQueryHookResult = ReturnType<typeof useBalanceSheetConfigSuspenseQuery>;
export type BalanceSheetConfigQueryResult = Apollo.QueryResult<BalanceSheetConfigQuery, BalanceSheetConfigQueryVariables>;
export const ProfitAndLossStatementConfigDocument = gql`
    query ProfitAndLossStatementConfig {
  profitAndLossStatementConfig {
    chartOfAccountsRevenueCode
    chartOfAccountsCostOfRevenueCode
    chartOfAccountsExpensesCode
  }
}
    `;

/**
 * __useProfitAndLossStatementConfigQuery__
 *
 * To run a query within a React component, call `useProfitAndLossStatementConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useProfitAndLossStatementConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProfitAndLossStatementConfigQuery({
 *   variables: {
 *   },
 * });
 */
export function useProfitAndLossStatementConfigQuery(baseOptions?: Apollo.QueryHookOptions<ProfitAndLossStatementConfigQuery, ProfitAndLossStatementConfigQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ProfitAndLossStatementConfigQuery, ProfitAndLossStatementConfigQueryVariables>(ProfitAndLossStatementConfigDocument, options);
      }
export function useProfitAndLossStatementConfigLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfitAndLossStatementConfigQuery, ProfitAndLossStatementConfigQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ProfitAndLossStatementConfigQuery, ProfitAndLossStatementConfigQueryVariables>(ProfitAndLossStatementConfigDocument, options);
        }
export function useProfitAndLossStatementConfigSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ProfitAndLossStatementConfigQuery, ProfitAndLossStatementConfigQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ProfitAndLossStatementConfigQuery, ProfitAndLossStatementConfigQueryVariables>(ProfitAndLossStatementConfigDocument, options);
        }
export type ProfitAndLossStatementConfigQueryHookResult = ReturnType<typeof useProfitAndLossStatementConfigQuery>;
export type ProfitAndLossStatementConfigLazyQueryHookResult = ReturnType<typeof useProfitAndLossStatementConfigLazyQuery>;
export type ProfitAndLossStatementConfigSuspenseQueryHookResult = ReturnType<typeof useProfitAndLossStatementConfigSuspenseQuery>;
export type ProfitAndLossStatementConfigQueryResult = Apollo.QueryResult<ProfitAndLossStatementConfigQuery, ProfitAndLossStatementConfigQueryVariables>;
export const ProfitAndLossStatementConfigureDocument = gql`
    mutation ProfitAndLossStatementConfigure($input: ProfitAndLossModuleConfigureInput!) {
  profitAndLossStatementConfigure(input: $input) {
    profitAndLossConfig {
      chartOfAccountsId
      chartOfAccountsRevenueCode
      chartOfAccountsCostOfRevenueCode
      chartOfAccountsExpensesCode
    }
  }
}
    `;
export type ProfitAndLossStatementConfigureMutationFn = Apollo.MutationFunction<ProfitAndLossStatementConfigureMutation, ProfitAndLossStatementConfigureMutationVariables>;

/**
 * __useProfitAndLossStatementConfigureMutation__
 *
 * To run a mutation, you first call `useProfitAndLossStatementConfigureMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProfitAndLossStatementConfigureMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [profitAndLossStatementConfigureMutation, { data, loading, error }] = useProfitAndLossStatementConfigureMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useProfitAndLossStatementConfigureMutation(baseOptions?: Apollo.MutationHookOptions<ProfitAndLossStatementConfigureMutation, ProfitAndLossStatementConfigureMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ProfitAndLossStatementConfigureMutation, ProfitAndLossStatementConfigureMutationVariables>(ProfitAndLossStatementConfigureDocument, options);
      }
export type ProfitAndLossStatementConfigureMutationHookResult = ReturnType<typeof useProfitAndLossStatementConfigureMutation>;
export type ProfitAndLossStatementConfigureMutationResult = Apollo.MutationResult<ProfitAndLossStatementConfigureMutation>;
export type ProfitAndLossStatementConfigureMutationOptions = Apollo.BaseMutationOptions<ProfitAndLossStatementConfigureMutation, ProfitAndLossStatementConfigureMutationVariables>;
export const PolicyAssignCommitteeDocument = gql`
    mutation PolicyAssignCommittee($input: PolicyAssignCommitteeInput!) {
  policyAssignCommittee(input: $input) {
    policy {
      id
      policyId
      approvalProcessType
      rules {
        ... on CommitteeThreshold {
          threshold
          committee {
            ...CommitteeFields
          }
        }
        ... on SystemApproval {
          autoApprove
        }
      }
    }
  }
}
    ${CommitteeFieldsFragmentDoc}`;
export type PolicyAssignCommitteeMutationFn = Apollo.MutationFunction<PolicyAssignCommitteeMutation, PolicyAssignCommitteeMutationVariables>;

/**
 * __usePolicyAssignCommitteeMutation__
 *
 * To run a mutation, you first call `usePolicyAssignCommitteeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePolicyAssignCommitteeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [policyAssignCommitteeMutation, { data, loading, error }] = usePolicyAssignCommitteeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePolicyAssignCommitteeMutation(baseOptions?: Apollo.MutationHookOptions<PolicyAssignCommitteeMutation, PolicyAssignCommitteeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<PolicyAssignCommitteeMutation, PolicyAssignCommitteeMutationVariables>(PolicyAssignCommitteeDocument, options);
      }
export type PolicyAssignCommitteeMutationHookResult = ReturnType<typeof usePolicyAssignCommitteeMutation>;
export type PolicyAssignCommitteeMutationResult = Apollo.MutationResult<PolicyAssignCommitteeMutation>;
export type PolicyAssignCommitteeMutationOptions = Apollo.BaseMutationOptions<PolicyAssignCommitteeMutation, PolicyAssignCommitteeMutationVariables>;
export const GetPolicyDetailsDocument = gql`
    query GetPolicyDetails($id: UUID!) {
  policy(id: $id) {
    id
    policyId
    approvalProcessType
    rules {
      ... on CommitteeThreshold {
        threshold
        committee {
          ...CommitteeFields
        }
      }
      ... on SystemApproval {
        autoApprove
      }
    }
  }
}
    ${CommitteeFieldsFragmentDoc}`;

/**
 * __useGetPolicyDetailsQuery__
 *
 * To run a query within a React component, call `useGetPolicyDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPolicyDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPolicyDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetPolicyDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetPolicyDetailsQuery, GetPolicyDetailsQueryVariables> & ({ variables: GetPolicyDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPolicyDetailsQuery, GetPolicyDetailsQueryVariables>(GetPolicyDetailsDocument, options);
      }
export function useGetPolicyDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPolicyDetailsQuery, GetPolicyDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPolicyDetailsQuery, GetPolicyDetailsQueryVariables>(GetPolicyDetailsDocument, options);
        }
export function useGetPolicyDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetPolicyDetailsQuery, GetPolicyDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetPolicyDetailsQuery, GetPolicyDetailsQueryVariables>(GetPolicyDetailsDocument, options);
        }
export type GetPolicyDetailsQueryHookResult = ReturnType<typeof useGetPolicyDetailsQuery>;
export type GetPolicyDetailsLazyQueryHookResult = ReturnType<typeof useGetPolicyDetailsLazyQuery>;
export type GetPolicyDetailsSuspenseQueryHookResult = ReturnType<typeof useGetPolicyDetailsSuspenseQuery>;
export type GetPolicyDetailsQueryResult = Apollo.QueryResult<GetPolicyDetailsQuery, GetPolicyDetailsQueryVariables>;
export const PoliciesDocument = gql`
    query Policies($first: Int!, $after: String) {
  policies(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        policyId
        approvalProcessType
        rules {
          ... on CommitteeThreshold {
            threshold
            committee {
              id
              committeeId
              createdAt
              name
            }
          }
          ... on SystemApproval {
            autoApprove
          }
        }
      }
    }
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
  }
}
    `;

/**
 * __usePoliciesQuery__
 *
 * To run a query within a React component, call `usePoliciesQuery` and pass it any options that fit your needs.
 * When your component renders, `usePoliciesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePoliciesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function usePoliciesQuery(baseOptions: Apollo.QueryHookOptions<PoliciesQuery, PoliciesQueryVariables> & ({ variables: PoliciesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PoliciesQuery, PoliciesQueryVariables>(PoliciesDocument, options);
      }
export function usePoliciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PoliciesQuery, PoliciesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PoliciesQuery, PoliciesQueryVariables>(PoliciesDocument, options);
        }
export function usePoliciesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<PoliciesQuery, PoliciesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<PoliciesQuery, PoliciesQueryVariables>(PoliciesDocument, options);
        }
export type PoliciesQueryHookResult = ReturnType<typeof usePoliciesQuery>;
export type PoliciesLazyQueryHookResult = ReturnType<typeof usePoliciesLazyQuery>;
export type PoliciesSuspenseQueryHookResult = ReturnType<typeof usePoliciesSuspenseQuery>;
export type PoliciesQueryResult = Apollo.QueryResult<PoliciesQuery, PoliciesQueryVariables>;
export const ProfitAndLossStatementDocument = gql`
    query ProfitAndLossStatement($from: Date!, $until: Date) {
  profitAndLossStatement(from: $from, until: $until) {
    name
    total {
      usd {
        ...UsdLedgerBalanceRangeFragment
      }
      btc {
        ...BtcLedgerBalanceRangeFragment
      }
    }
    categories {
      id
      name
      code
      balanceRange {
        __typename
        ...UsdLedgerBalanceRangeFragment
        ...BtcLedgerBalanceRangeFragment
      }
      children {
        id
        name
        code
        balanceRange {
          __typename
          ...UsdLedgerBalanceRangeFragment
          ...BtcLedgerBalanceRangeFragment
        }
      }
    }
  }
}
    ${UsdLedgerBalanceRangeFragmentFragmentDoc}
${BtcLedgerBalanceRangeFragmentFragmentDoc}`;

/**
 * __useProfitAndLossStatementQuery__
 *
 * To run a query within a React component, call `useProfitAndLossStatementQuery` and pass it any options that fit your needs.
 * When your component renders, `useProfitAndLossStatementQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProfitAndLossStatementQuery({
 *   variables: {
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function useProfitAndLossStatementQuery(baseOptions: Apollo.QueryHookOptions<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables> & ({ variables: ProfitAndLossStatementQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>(ProfitAndLossStatementDocument, options);
      }
export function useProfitAndLossStatementLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>(ProfitAndLossStatementDocument, options);
        }
export function useProfitAndLossStatementSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>(ProfitAndLossStatementDocument, options);
        }
export type ProfitAndLossStatementQueryHookResult = ReturnType<typeof useProfitAndLossStatementQuery>;
export type ProfitAndLossStatementLazyQueryHookResult = ReturnType<typeof useProfitAndLossStatementLazyQuery>;
export type ProfitAndLossStatementSuspenseQueryHookResult = ReturnType<typeof useProfitAndLossStatementSuspenseQuery>;
export type ProfitAndLossStatementQueryResult = Apollo.QueryResult<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>;
export const ReportRunByIdDocument = gql`
    query ReportRunById($reportRunId: UUID!) {
  reportRun(id: $reportRunId) {
    id
    reportRunId
    state
    runType
    executionDate
    startDate
    endDate
    reports {
      id
      reportId
      externalId
      name
      norm
      files {
        extension
      }
    }
  }
}
    `;

/**
 * __useReportRunByIdQuery__
 *
 * To run a query within a React component, call `useReportRunByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useReportRunByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReportRunByIdQuery({
 *   variables: {
 *      reportRunId: // value for 'reportRunId'
 *   },
 * });
 */
export function useReportRunByIdQuery(baseOptions: Apollo.QueryHookOptions<ReportRunByIdQuery, ReportRunByIdQueryVariables> & ({ variables: ReportRunByIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ReportRunByIdQuery, ReportRunByIdQueryVariables>(ReportRunByIdDocument, options);
      }
export function useReportRunByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReportRunByIdQuery, ReportRunByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ReportRunByIdQuery, ReportRunByIdQueryVariables>(ReportRunByIdDocument, options);
        }
export function useReportRunByIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ReportRunByIdQuery, ReportRunByIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ReportRunByIdQuery, ReportRunByIdQueryVariables>(ReportRunByIdDocument, options);
        }
export type ReportRunByIdQueryHookResult = ReturnType<typeof useReportRunByIdQuery>;
export type ReportRunByIdLazyQueryHookResult = ReturnType<typeof useReportRunByIdLazyQuery>;
export type ReportRunByIdSuspenseQueryHookResult = ReturnType<typeof useReportRunByIdSuspenseQuery>;
export type ReportRunByIdQueryResult = Apollo.QueryResult<ReportRunByIdQuery, ReportRunByIdQueryVariables>;
export const ReportFileGenerateDownloadLinkDocument = gql`
    mutation ReportFileGenerateDownloadLink($input: ReportFileGenerateDownloadLinkInput!) {
  reportFileGenerateDownloadLink(input: $input) {
    url
  }
}
    `;
export type ReportFileGenerateDownloadLinkMutationFn = Apollo.MutationFunction<ReportFileGenerateDownloadLinkMutation, ReportFileGenerateDownloadLinkMutationVariables>;

/**
 * __useReportFileGenerateDownloadLinkMutation__
 *
 * To run a mutation, you first call `useReportFileGenerateDownloadLinkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReportFileGenerateDownloadLinkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [reportFileGenerateDownloadLinkMutation, { data, loading, error }] = useReportFileGenerateDownloadLinkMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useReportFileGenerateDownloadLinkMutation(baseOptions?: Apollo.MutationHookOptions<ReportFileGenerateDownloadLinkMutation, ReportFileGenerateDownloadLinkMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ReportFileGenerateDownloadLinkMutation, ReportFileGenerateDownloadLinkMutationVariables>(ReportFileGenerateDownloadLinkDocument, options);
      }
export type ReportFileGenerateDownloadLinkMutationHookResult = ReturnType<typeof useReportFileGenerateDownloadLinkMutation>;
export type ReportFileGenerateDownloadLinkMutationResult = Apollo.MutationResult<ReportFileGenerateDownloadLinkMutation>;
export type ReportFileGenerateDownloadLinkMutationOptions = Apollo.BaseMutationOptions<ReportFileGenerateDownloadLinkMutation, ReportFileGenerateDownloadLinkMutationVariables>;
export const ReportGenerateDocument = gql`
    mutation ReportGenerate {
  triggerReportRun {
    jobId
  }
}
    `;
export type ReportGenerateMutationFn = Apollo.MutationFunction<ReportGenerateMutation, ReportGenerateMutationVariables>;

/**
 * __useReportGenerateMutation__
 *
 * To run a mutation, you first call `useReportGenerateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReportGenerateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [reportGenerateMutation, { data, loading, error }] = useReportGenerateMutation({
 *   variables: {
 *   },
 * });
 */
export function useReportGenerateMutation(baseOptions?: Apollo.MutationHookOptions<ReportGenerateMutation, ReportGenerateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<ReportGenerateMutation, ReportGenerateMutationVariables>(ReportGenerateDocument, options);
      }
export type ReportGenerateMutationHookResult = ReturnType<typeof useReportGenerateMutation>;
export type ReportGenerateMutationResult = Apollo.MutationResult<ReportGenerateMutation>;
export type ReportGenerateMutationOptions = Apollo.BaseMutationOptions<ReportGenerateMutation, ReportGenerateMutationVariables>;
export const ReportRunsDocument = gql`
    query ReportRuns($first: Int!, $after: String) {
  reportRuns(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        reportRunId
        executionDate
        startDate
        endDate
        runType
        state
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useReportRunsQuery__
 *
 * To run a query within a React component, call `useReportRunsQuery` and pass it any options that fit your needs.
 * When your component renders, `useReportRunsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReportRunsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useReportRunsQuery(baseOptions: Apollo.QueryHookOptions<ReportRunsQuery, ReportRunsQueryVariables> & ({ variables: ReportRunsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ReportRunsQuery, ReportRunsQueryVariables>(ReportRunsDocument, options);
      }
export function useReportRunsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReportRunsQuery, ReportRunsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ReportRunsQuery, ReportRunsQueryVariables>(ReportRunsDocument, options);
        }
export function useReportRunsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<ReportRunsQuery, ReportRunsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<ReportRunsQuery, ReportRunsQueryVariables>(ReportRunsDocument, options);
        }
export type ReportRunsQueryHookResult = ReturnType<typeof useReportRunsQuery>;
export type ReportRunsLazyQueryHookResult = ReturnType<typeof useReportRunsLazyQuery>;
export type ReportRunsSuspenseQueryHookResult = ReturnType<typeof useReportRunsSuspenseQuery>;
export type ReportRunsQueryResult = Apollo.QueryResult<ReportRunsQuery, ReportRunsQueryVariables>;
export const RoleAddPermissionSetsDocument = gql`
    mutation RoleAddPermissionSets($input: RoleAddPermissionSetsInput!) {
  roleAddPermissionSets(input: $input) {
    role {
      ...RoleFields
    }
  }
}
    ${RoleFieldsFragmentDoc}`;
export type RoleAddPermissionSetsMutationFn = Apollo.MutationFunction<RoleAddPermissionSetsMutation, RoleAddPermissionSetsMutationVariables>;

/**
 * __useRoleAddPermissionSetsMutation__
 *
 * To run a mutation, you first call `useRoleAddPermissionSetsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRoleAddPermissionSetsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [roleAddPermissionSetsMutation, { data, loading, error }] = useRoleAddPermissionSetsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRoleAddPermissionSetsMutation(baseOptions?: Apollo.MutationHookOptions<RoleAddPermissionSetsMutation, RoleAddPermissionSetsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RoleAddPermissionSetsMutation, RoleAddPermissionSetsMutationVariables>(RoleAddPermissionSetsDocument, options);
      }
export type RoleAddPermissionSetsMutationHookResult = ReturnType<typeof useRoleAddPermissionSetsMutation>;
export type RoleAddPermissionSetsMutationResult = Apollo.MutationResult<RoleAddPermissionSetsMutation>;
export type RoleAddPermissionSetsMutationOptions = Apollo.BaseMutationOptions<RoleAddPermissionSetsMutation, RoleAddPermissionSetsMutationVariables>;
export const RoleRemovePermissionSetsDocument = gql`
    mutation RoleRemovePermissionSets($input: RoleRemovePermissionSetsInput!) {
  roleRemovePermissionSets(input: $input) {
    role {
      ...RoleFields
    }
  }
}
    ${RoleFieldsFragmentDoc}`;
export type RoleRemovePermissionSetsMutationFn = Apollo.MutationFunction<RoleRemovePermissionSetsMutation, RoleRemovePermissionSetsMutationVariables>;

/**
 * __useRoleRemovePermissionSetsMutation__
 *
 * To run a mutation, you first call `useRoleRemovePermissionSetsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRoleRemovePermissionSetsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [roleRemovePermissionSetsMutation, { data, loading, error }] = useRoleRemovePermissionSetsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRoleRemovePermissionSetsMutation(baseOptions?: Apollo.MutationHookOptions<RoleRemovePermissionSetsMutation, RoleRemovePermissionSetsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RoleRemovePermissionSetsMutation, RoleRemovePermissionSetsMutationVariables>(RoleRemovePermissionSetsDocument, options);
      }
export type RoleRemovePermissionSetsMutationHookResult = ReturnType<typeof useRoleRemovePermissionSetsMutation>;
export type RoleRemovePermissionSetsMutationResult = Apollo.MutationResult<RoleRemovePermissionSetsMutation>;
export type RoleRemovePermissionSetsMutationOptions = Apollo.BaseMutationOptions<RoleRemovePermissionSetsMutation, RoleRemovePermissionSetsMutationVariables>;
export const RoleDocument = gql`
    query Role($id: UUID!) {
  role(id: $id) {
    ...RoleFields
  }
}
    ${RoleFieldsFragmentDoc}`;

/**
 * __useRoleQuery__
 *
 * To run a query within a React component, call `useRoleQuery` and pass it any options that fit your needs.
 * When your component renders, `useRoleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRoleQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRoleQuery(baseOptions: Apollo.QueryHookOptions<RoleQuery, RoleQueryVariables> & ({ variables: RoleQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RoleQuery, RoleQueryVariables>(RoleDocument, options);
      }
export function useRoleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RoleQuery, RoleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RoleQuery, RoleQueryVariables>(RoleDocument, options);
        }
export function useRoleSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<RoleQuery, RoleQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<RoleQuery, RoleQueryVariables>(RoleDocument, options);
        }
export type RoleQueryHookResult = ReturnType<typeof useRoleQuery>;
export type RoleLazyQueryHookResult = ReturnType<typeof useRoleLazyQuery>;
export type RoleSuspenseQueryHookResult = ReturnType<typeof useRoleSuspenseQuery>;
export type RoleQueryResult = Apollo.QueryResult<RoleQuery, RoleQueryVariables>;
export const RoleCreateDocument = gql`
    mutation RoleCreate($input: RoleCreateInput!) {
  roleCreate(input: $input) {
    role {
      ...RoleFields
    }
  }
}
    ${RoleFieldsFragmentDoc}`;
export type RoleCreateMutationFn = Apollo.MutationFunction<RoleCreateMutation, RoleCreateMutationVariables>;

/**
 * __useRoleCreateMutation__
 *
 * To run a mutation, you first call `useRoleCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRoleCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [roleCreateMutation, { data, loading, error }] = useRoleCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRoleCreateMutation(baseOptions?: Apollo.MutationHookOptions<RoleCreateMutation, RoleCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RoleCreateMutation, RoleCreateMutationVariables>(RoleCreateDocument, options);
      }
export type RoleCreateMutationHookResult = ReturnType<typeof useRoleCreateMutation>;
export type RoleCreateMutationResult = Apollo.MutationResult<RoleCreateMutation>;
export type RoleCreateMutationOptions = Apollo.BaseMutationOptions<RoleCreateMutation, RoleCreateMutationVariables>;
export const PermissionSetsDocument = gql`
    query PermissionSets($first: Int!, $after: String) {
  permissionSets(first: $first, after: $after) {
    edges {
      node {
        ...PermissionSetFields
      }
    }
  }
}
    ${PermissionSetFieldsFragmentDoc}`;

/**
 * __usePermissionSetsQuery__
 *
 * To run a query within a React component, call `usePermissionSetsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePermissionSetsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePermissionSetsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function usePermissionSetsQuery(baseOptions: Apollo.QueryHookOptions<PermissionSetsQuery, PermissionSetsQueryVariables> & ({ variables: PermissionSetsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PermissionSetsQuery, PermissionSetsQueryVariables>(PermissionSetsDocument, options);
      }
export function usePermissionSetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PermissionSetsQuery, PermissionSetsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PermissionSetsQuery, PermissionSetsQueryVariables>(PermissionSetsDocument, options);
        }
export function usePermissionSetsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<PermissionSetsQuery, PermissionSetsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<PermissionSetsQuery, PermissionSetsQueryVariables>(PermissionSetsDocument, options);
        }
export type PermissionSetsQueryHookResult = ReturnType<typeof usePermissionSetsQuery>;
export type PermissionSetsLazyQueryHookResult = ReturnType<typeof usePermissionSetsLazyQuery>;
export type PermissionSetsSuspenseQueryHookResult = ReturnType<typeof usePermissionSetsSuspenseQuery>;
export type PermissionSetsQueryResult = Apollo.QueryResult<PermissionSetsQuery, PermissionSetsQueryVariables>;
export const RolesDocument = gql`
    query Roles($first: Int!, $after: String) {
  roles(first: $first, after: $after) {
    edges {
      node {
        ...RoleFields
      }
    }
  }
}
    ${RoleFieldsFragmentDoc}`;

/**
 * __useRolesQuery__
 *
 * To run a query within a React component, call `useRolesQuery` and pass it any options that fit your needs.
 * When your component renders, `useRolesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRolesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useRolesQuery(baseOptions: Apollo.QueryHookOptions<RolesQuery, RolesQueryVariables> & ({ variables: RolesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RolesQuery, RolesQueryVariables>(RolesDocument, options);
      }
export function useRolesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RolesQuery, RolesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RolesQuery, RolesQueryVariables>(RolesDocument, options);
        }
export function useRolesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<RolesQuery, RolesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<RolesQuery, RolesQueryVariables>(RolesDocument, options);
        }
export type RolesQueryHookResult = ReturnType<typeof useRolesQuery>;
export type RolesLazyQueryHookResult = ReturnType<typeof useRolesLazyQuery>;
export type RolesSuspenseQueryHookResult = ReturnType<typeof useRolesSuspenseQuery>;
export type RolesQueryResult = Apollo.QueryResult<RolesQuery, RolesQueryVariables>;
export const TermsTemplateDocument = gql`
    query TermsTemplate($id: UUID!) {
  termsTemplate(id: $id) {
    ...TermsTemplateFields
  }
}
    ${TermsTemplateFieldsFragmentDoc}`;

/**
 * __useTermsTemplateQuery__
 *
 * To run a query within a React component, call `useTermsTemplateQuery` and pass it any options that fit your needs.
 * When your component renders, `useTermsTemplateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTermsTemplateQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useTermsTemplateQuery(baseOptions: Apollo.QueryHookOptions<TermsTemplateQuery, TermsTemplateQueryVariables> & ({ variables: TermsTemplateQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TermsTemplateQuery, TermsTemplateQueryVariables>(TermsTemplateDocument, options);
      }
export function useTermsTemplateLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TermsTemplateQuery, TermsTemplateQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TermsTemplateQuery, TermsTemplateQueryVariables>(TermsTemplateDocument, options);
        }
export function useTermsTemplateSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<TermsTemplateQuery, TermsTemplateQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<TermsTemplateQuery, TermsTemplateQueryVariables>(TermsTemplateDocument, options);
        }
export type TermsTemplateQueryHookResult = ReturnType<typeof useTermsTemplateQuery>;
export type TermsTemplateLazyQueryHookResult = ReturnType<typeof useTermsTemplateLazyQuery>;
export type TermsTemplateSuspenseQueryHookResult = ReturnType<typeof useTermsTemplateSuspenseQuery>;
export type TermsTemplateQueryResult = Apollo.QueryResult<TermsTemplateQuery, TermsTemplateQueryVariables>;
export const UpdateTermsTemplateDocument = gql`
    mutation UpdateTermsTemplate($input: TermsTemplateUpdateInput!) {
  termsTemplateUpdate(input: $input) {
    termsTemplate {
      ...TermsTemplateFields
    }
  }
}
    ${TermsTemplateFieldsFragmentDoc}`;
export type UpdateTermsTemplateMutationFn = Apollo.MutationFunction<UpdateTermsTemplateMutation, UpdateTermsTemplateMutationVariables>;

/**
 * __useUpdateTermsTemplateMutation__
 *
 * To run a mutation, you first call `useUpdateTermsTemplateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTermsTemplateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTermsTemplateMutation, { data, loading, error }] = useUpdateTermsTemplateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateTermsTemplateMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTermsTemplateMutation, UpdateTermsTemplateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateTermsTemplateMutation, UpdateTermsTemplateMutationVariables>(UpdateTermsTemplateDocument, options);
      }
export type UpdateTermsTemplateMutationHookResult = ReturnType<typeof useUpdateTermsTemplateMutation>;
export type UpdateTermsTemplateMutationResult = Apollo.MutationResult<UpdateTermsTemplateMutation>;
export type UpdateTermsTemplateMutationOptions = Apollo.BaseMutationOptions<UpdateTermsTemplateMutation, UpdateTermsTemplateMutationVariables>;
export const CreateTermsTemplateDocument = gql`
    mutation CreateTermsTemplate($input: TermsTemplateCreateInput!) {
  termsTemplateCreate(input: $input) {
    termsTemplate {
      ...TermsTemplateFields
    }
  }
}
    ${TermsTemplateFieldsFragmentDoc}`;
export type CreateTermsTemplateMutationFn = Apollo.MutationFunction<CreateTermsTemplateMutation, CreateTermsTemplateMutationVariables>;

/**
 * __useCreateTermsTemplateMutation__
 *
 * To run a mutation, you first call `useCreateTermsTemplateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTermsTemplateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTermsTemplateMutation, { data, loading, error }] = useCreateTermsTemplateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateTermsTemplateMutation(baseOptions?: Apollo.MutationHookOptions<CreateTermsTemplateMutation, CreateTermsTemplateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateTermsTemplateMutation, CreateTermsTemplateMutationVariables>(CreateTermsTemplateDocument, options);
      }
export type CreateTermsTemplateMutationHookResult = ReturnType<typeof useCreateTermsTemplateMutation>;
export type CreateTermsTemplateMutationResult = Apollo.MutationResult<CreateTermsTemplateMutation>;
export type CreateTermsTemplateMutationOptions = Apollo.BaseMutationOptions<CreateTermsTemplateMutation, CreateTermsTemplateMutationVariables>;
export const TermsTemplatesDocument = gql`
    query TermsTemplates {
  termsTemplates {
    ...TermsTemplateFields
  }
}
    ${TermsTemplateFieldsFragmentDoc}`;

/**
 * __useTermsTemplatesQuery__
 *
 * To run a query within a React component, call `useTermsTemplatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useTermsTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTermsTemplatesQuery({
 *   variables: {
 *   },
 * });
 */
export function useTermsTemplatesQuery(baseOptions?: Apollo.QueryHookOptions<TermsTemplatesQuery, TermsTemplatesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TermsTemplatesQuery, TermsTemplatesQueryVariables>(TermsTemplatesDocument, options);
      }
export function useTermsTemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TermsTemplatesQuery, TermsTemplatesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TermsTemplatesQuery, TermsTemplatesQueryVariables>(TermsTemplatesDocument, options);
        }
export function useTermsTemplatesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<TermsTemplatesQuery, TermsTemplatesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<TermsTemplatesQuery, TermsTemplatesQueryVariables>(TermsTemplatesDocument, options);
        }
export type TermsTemplatesQueryHookResult = ReturnType<typeof useTermsTemplatesQuery>;
export type TermsTemplatesLazyQueryHookResult = ReturnType<typeof useTermsTemplatesLazyQuery>;
export type TermsTemplatesSuspenseQueryHookResult = ReturnType<typeof useTermsTemplatesSuspenseQuery>;
export type TermsTemplatesQueryResult = Apollo.QueryResult<TermsTemplatesQuery, TermsTemplatesQueryVariables>;
export const LedgerTransactionsForTemplateCodeDocument = gql`
    query LedgerTransactionsForTemplateCode($templateCode: String!, $first: Int!, $after: String) {
  ledgerTransactionsForTemplateCode(
    templateCode: $templateCode
    first: $first
    after: $after
  ) {
    edges {
      cursor
      node {
        id
        ledgerTransactionId
        createdAt
        description
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useLedgerTransactionsForTemplateCodeQuery__
 *
 * To run a query within a React component, call `useLedgerTransactionsForTemplateCodeQuery` and pass it any options that fit your needs.
 * When your component renders, `useLedgerTransactionsForTemplateCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLedgerTransactionsForTemplateCodeQuery({
 *   variables: {
 *      templateCode: // value for 'templateCode'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useLedgerTransactionsForTemplateCodeQuery(baseOptions: Apollo.QueryHookOptions<LedgerTransactionsForTemplateCodeQuery, LedgerTransactionsForTemplateCodeQueryVariables> & ({ variables: LedgerTransactionsForTemplateCodeQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LedgerTransactionsForTemplateCodeQuery, LedgerTransactionsForTemplateCodeQueryVariables>(LedgerTransactionsForTemplateCodeDocument, options);
      }
export function useLedgerTransactionsForTemplateCodeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LedgerTransactionsForTemplateCodeQuery, LedgerTransactionsForTemplateCodeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LedgerTransactionsForTemplateCodeQuery, LedgerTransactionsForTemplateCodeQueryVariables>(LedgerTransactionsForTemplateCodeDocument, options);
        }
export function useLedgerTransactionsForTemplateCodeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<LedgerTransactionsForTemplateCodeQuery, LedgerTransactionsForTemplateCodeQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LedgerTransactionsForTemplateCodeQuery, LedgerTransactionsForTemplateCodeQueryVariables>(LedgerTransactionsForTemplateCodeDocument, options);
        }
export type LedgerTransactionsForTemplateCodeQueryHookResult = ReturnType<typeof useLedgerTransactionsForTemplateCodeQuery>;
export type LedgerTransactionsForTemplateCodeLazyQueryHookResult = ReturnType<typeof useLedgerTransactionsForTemplateCodeLazyQuery>;
export type LedgerTransactionsForTemplateCodeSuspenseQueryHookResult = ReturnType<typeof useLedgerTransactionsForTemplateCodeSuspenseQuery>;
export type LedgerTransactionsForTemplateCodeQueryResult = Apollo.QueryResult<LedgerTransactionsForTemplateCodeQuery, LedgerTransactionsForTemplateCodeQueryVariables>;
export const TransactionTemplatesDocument = gql`
    query TransactionTemplates($first: Int!, $after: String) {
  transactionTemplates(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        code
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useTransactionTemplatesQuery__
 *
 * To run a query within a React component, call `useTransactionTemplatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useTransactionTemplatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTransactionTemplatesQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useTransactionTemplatesQuery(baseOptions: Apollo.QueryHookOptions<TransactionTemplatesQuery, TransactionTemplatesQueryVariables> & ({ variables: TransactionTemplatesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<TransactionTemplatesQuery, TransactionTemplatesQueryVariables>(TransactionTemplatesDocument, options);
      }
export function useTransactionTemplatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransactionTemplatesQuery, TransactionTemplatesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<TransactionTemplatesQuery, TransactionTemplatesQueryVariables>(TransactionTemplatesDocument, options);
        }
export function useTransactionTemplatesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<TransactionTemplatesQuery, TransactionTemplatesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<TransactionTemplatesQuery, TransactionTemplatesQueryVariables>(TransactionTemplatesDocument, options);
        }
export type TransactionTemplatesQueryHookResult = ReturnType<typeof useTransactionTemplatesQuery>;
export type TransactionTemplatesLazyQueryHookResult = ReturnType<typeof useTransactionTemplatesLazyQuery>;
export type TransactionTemplatesSuspenseQueryHookResult = ReturnType<typeof useTransactionTemplatesSuspenseQuery>;
export type TransactionTemplatesQueryResult = Apollo.QueryResult<TransactionTemplatesQuery, TransactionTemplatesQueryVariables>;
export const GetTrialBalanceDocument = gql`
    query GetTrialBalance($from: Date!, $until: Date!) {
  trialBalance(from: $from, until: $until) {
    name
    accounts {
      ...TrialBalanceAccountBase
      childrenWithCodeAndActivity {
        ...TrialBalanceAccountBase
        childrenWithCodeAndActivity {
          ...TrialBalanceAccountBase
          childrenWithCodeAndActivity {
            ...TrialBalanceAccountBase
            childrenWithCodeAndActivity {
              ...TrialBalanceAccountBase
              childrenWithCodeAndActivity {
                ...TrialBalanceAccountBase
                childrenWithCodeAndActivity {
                  ...TrialBalanceAccountBase
                  childrenWithCodeAndActivity {
                    ...TrialBalanceAccountBase
                    childrenWithCodeAndActivity {
                      ...TrialBalanceAccountBase
                      childrenWithCodeAndActivity {
                        ...TrialBalanceAccountBase
                        childrenWithCodeAndActivity {
                          ...TrialBalanceAccountBase
                          childrenWithCodeAndActivity {
                            ...TrialBalanceAccountBase
                            childrenWithCodeAndActivity {
                              ...TrialBalanceAccountBase
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${TrialBalanceAccountBaseFragmentDoc}`;

/**
 * __useGetTrialBalanceQuery__
 *
 * To run a query within a React component, call `useGetTrialBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTrialBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTrialBalanceQuery({
 *   variables: {
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function useGetTrialBalanceQuery(baseOptions: Apollo.QueryHookOptions<GetTrialBalanceQuery, GetTrialBalanceQueryVariables> & ({ variables: GetTrialBalanceQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetTrialBalanceQuery, GetTrialBalanceQueryVariables>(GetTrialBalanceDocument, options);
      }
export function useGetTrialBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTrialBalanceQuery, GetTrialBalanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetTrialBalanceQuery, GetTrialBalanceQueryVariables>(GetTrialBalanceDocument, options);
        }
export function useGetTrialBalanceSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetTrialBalanceQuery, GetTrialBalanceQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetTrialBalanceQuery, GetTrialBalanceQueryVariables>(GetTrialBalanceDocument, options);
        }
export type GetTrialBalanceQueryHookResult = ReturnType<typeof useGetTrialBalanceQuery>;
export type GetTrialBalanceLazyQueryHookResult = ReturnType<typeof useGetTrialBalanceLazyQuery>;
export type GetTrialBalanceSuspenseQueryHookResult = ReturnType<typeof useGetTrialBalanceSuspenseQuery>;
export type GetTrialBalanceQueryResult = Apollo.QueryResult<GetTrialBalanceQuery, GetTrialBalanceQueryVariables>;
export const GetUserDetailsDocument = gql`
    query GetUserDetails($id: UUID!) {
  user(id: $id) {
    ...UserFields
  }
}
    ${UserFieldsFragmentDoc}`;

/**
 * __useGetUserDetailsQuery__
 *
 * To run a query within a React component, call `useGetUserDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetUserDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetUserDetailsQuery, GetUserDetailsQueryVariables> & ({ variables: GetUserDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetUserDetailsQuery, GetUserDetailsQueryVariables>(GetUserDetailsDocument, options);
      }
export function useGetUserDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserDetailsQuery, GetUserDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetUserDetailsQuery, GetUserDetailsQueryVariables>(GetUserDetailsDocument, options);
        }
export function useGetUserDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetUserDetailsQuery, GetUserDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetUserDetailsQuery, GetUserDetailsQueryVariables>(GetUserDetailsDocument, options);
        }
export type GetUserDetailsQueryHookResult = ReturnType<typeof useGetUserDetailsQuery>;
export type GetUserDetailsLazyQueryHookResult = ReturnType<typeof useGetUserDetailsLazyQuery>;
export type GetUserDetailsSuspenseQueryHookResult = ReturnType<typeof useGetUserDetailsSuspenseQuery>;
export type GetUserDetailsQueryResult = Apollo.QueryResult<GetUserDetailsQuery, GetUserDetailsQueryVariables>;
export const UserCreateDocument = gql`
    mutation UserCreate($input: UserCreateInput!) {
  userCreate(input: $input) {
    user {
      ...UserFields
    }
  }
}
    ${UserFieldsFragmentDoc}`;
export type UserCreateMutationFn = Apollo.MutationFunction<UserCreateMutation, UserCreateMutationVariables>;

/**
 * __useUserCreateMutation__
 *
 * To run a mutation, you first call `useUserCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userCreateMutation, { data, loading, error }] = useUserCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserCreateMutation(baseOptions?: Apollo.MutationHookOptions<UserCreateMutation, UserCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UserCreateMutation, UserCreateMutationVariables>(UserCreateDocument, options);
      }
export type UserCreateMutationHookResult = ReturnType<typeof useUserCreateMutation>;
export type UserCreateMutationResult = Apollo.MutationResult<UserCreateMutation>;
export type UserCreateMutationOptions = Apollo.BaseMutationOptions<UserCreateMutation, UserCreateMutationVariables>;
export const UsersDocument = gql`
    query Users {
  users {
    ...UserFields
  }
}
    ${UserFieldsFragmentDoc}`;

/**
 * __useUsersQuery__
 *
 * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
      }
export function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
        }
export function useUsersSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<UsersQuery, UsersQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
        }
export type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;
export type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;
export type UsersSuspenseQueryHookResult = ReturnType<typeof useUsersSuspenseQuery>;
export type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;
export const UserUpdateRoleDocument = gql`
    mutation UserUpdateRole($input: UserUpdateRoleInput!) {
  userUpdateRole(input: $input) {
    user {
      ...UserFields
    }
  }
}
    ${UserFieldsFragmentDoc}`;
export type UserUpdateRoleMutationFn = Apollo.MutationFunction<UserUpdateRoleMutation, UserUpdateRoleMutationVariables>;

/**
 * __useUserUpdateRoleMutation__
 *
 * To run a mutation, you first call `useUserUpdateRoleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserUpdateRoleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userUpdateRoleMutation, { data, loading, error }] = useUserUpdateRoleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserUpdateRoleMutation(baseOptions?: Apollo.MutationHookOptions<UserUpdateRoleMutation, UserUpdateRoleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UserUpdateRoleMutation, UserUpdateRoleMutationVariables>(UserUpdateRoleDocument, options);
      }
export type UserUpdateRoleMutationHookResult = ReturnType<typeof useUserUpdateRoleMutation>;
export type UserUpdateRoleMutationResult = Apollo.MutationResult<UserUpdateRoleMutation>;
export type UserUpdateRoleMutationOptions = Apollo.BaseMutationOptions<UserUpdateRoleMutation, UserUpdateRoleMutationVariables>;
export const WithdrawalCancelDocument = gql`
    mutation WithdrawalCancel($input: WithdrawalCancelInput!) {
  withdrawalCancel(input: $input) {
    withdrawal {
      ...WithdrawDetailsPageFragment
    }
  }
}
    ${WithdrawDetailsPageFragmentFragmentDoc}`;
export type WithdrawalCancelMutationFn = Apollo.MutationFunction<WithdrawalCancelMutation, WithdrawalCancelMutationVariables>;

/**
 * __useWithdrawalCancelMutation__
 *
 * To run a mutation, you first call `useWithdrawalCancelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalCancelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [withdrawalCancelMutation, { data, loading, error }] = useWithdrawalCancelMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWithdrawalCancelMutation(baseOptions?: Apollo.MutationHookOptions<WithdrawalCancelMutation, WithdrawalCancelMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<WithdrawalCancelMutation, WithdrawalCancelMutationVariables>(WithdrawalCancelDocument, options);
      }
export type WithdrawalCancelMutationHookResult = ReturnType<typeof useWithdrawalCancelMutation>;
export type WithdrawalCancelMutationResult = Apollo.MutationResult<WithdrawalCancelMutation>;
export type WithdrawalCancelMutationOptions = Apollo.BaseMutationOptions<WithdrawalCancelMutation, WithdrawalCancelMutationVariables>;
export const WithdrawalConfirmDocument = gql`
    mutation WithdrawalConfirm($input: WithdrawalConfirmInput!) {
  withdrawalConfirm(input: $input) {
    withdrawal {
      ...WithdrawDetailsPageFragment
    }
  }
}
    ${WithdrawDetailsPageFragmentFragmentDoc}`;
export type WithdrawalConfirmMutationFn = Apollo.MutationFunction<WithdrawalConfirmMutation, WithdrawalConfirmMutationVariables>;

/**
 * __useWithdrawalConfirmMutation__
 *
 * To run a mutation, you first call `useWithdrawalConfirmMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalConfirmMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [withdrawalConfirmMutation, { data, loading, error }] = useWithdrawalConfirmMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWithdrawalConfirmMutation(baseOptions?: Apollo.MutationHookOptions<WithdrawalConfirmMutation, WithdrawalConfirmMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<WithdrawalConfirmMutation, WithdrawalConfirmMutationVariables>(WithdrawalConfirmDocument, options);
      }
export type WithdrawalConfirmMutationHookResult = ReturnType<typeof useWithdrawalConfirmMutation>;
export type WithdrawalConfirmMutationResult = Apollo.MutationResult<WithdrawalConfirmMutation>;
export type WithdrawalConfirmMutationOptions = Apollo.BaseMutationOptions<WithdrawalConfirmMutation, WithdrawalConfirmMutationVariables>;
export const GetWithdrawalDetailsDocument = gql`
    query GetWithdrawalDetails($publicId: PublicId!) {
  withdrawalByPublicId(id: $publicId) {
    ...WithdrawDetailsPageFragment
  }
}
    ${WithdrawDetailsPageFragmentFragmentDoc}`;

/**
 * __useGetWithdrawalDetailsQuery__
 *
 * To run a query within a React component, call `useGetWithdrawalDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWithdrawalDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWithdrawalDetailsQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useGetWithdrawalDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetWithdrawalDetailsQuery, GetWithdrawalDetailsQueryVariables> & ({ variables: GetWithdrawalDetailsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWithdrawalDetailsQuery, GetWithdrawalDetailsQueryVariables>(GetWithdrawalDetailsDocument, options);
      }
export function useGetWithdrawalDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWithdrawalDetailsQuery, GetWithdrawalDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWithdrawalDetailsQuery, GetWithdrawalDetailsQueryVariables>(GetWithdrawalDetailsDocument, options);
        }
export function useGetWithdrawalDetailsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetWithdrawalDetailsQuery, GetWithdrawalDetailsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetWithdrawalDetailsQuery, GetWithdrawalDetailsQueryVariables>(GetWithdrawalDetailsDocument, options);
        }
export type GetWithdrawalDetailsQueryHookResult = ReturnType<typeof useGetWithdrawalDetailsQuery>;
export type GetWithdrawalDetailsLazyQueryHookResult = ReturnType<typeof useGetWithdrawalDetailsLazyQuery>;
export type GetWithdrawalDetailsSuspenseQueryHookResult = ReturnType<typeof useGetWithdrawalDetailsSuspenseQuery>;
export type GetWithdrawalDetailsQueryResult = Apollo.QueryResult<GetWithdrawalDetailsQuery, GetWithdrawalDetailsQueryVariables>;
export const WithdrawalRevertDocument = gql`
    mutation WithdrawalRevert($input: WithdrawalRevertInput!) {
  withdrawalRevert(input: $input) {
    withdrawal {
      ...WithdrawDetailsPageFragment
    }
  }
}
    ${WithdrawDetailsPageFragmentFragmentDoc}`;
export type WithdrawalRevertMutationFn = Apollo.MutationFunction<WithdrawalRevertMutation, WithdrawalRevertMutationVariables>;

/**
 * __useWithdrawalRevertMutation__
 *
 * To run a mutation, you first call `useWithdrawalRevertMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalRevertMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [withdrawalRevertMutation, { data, loading, error }] = useWithdrawalRevertMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWithdrawalRevertMutation(baseOptions?: Apollo.MutationHookOptions<WithdrawalRevertMutation, WithdrawalRevertMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<WithdrawalRevertMutation, WithdrawalRevertMutationVariables>(WithdrawalRevertDocument, options);
      }
export type WithdrawalRevertMutationHookResult = ReturnType<typeof useWithdrawalRevertMutation>;
export type WithdrawalRevertMutationResult = Apollo.MutationResult<WithdrawalRevertMutation>;
export type WithdrawalRevertMutationOptions = Apollo.BaseMutationOptions<WithdrawalRevertMutation, WithdrawalRevertMutationVariables>;
export const WithdrawalInitiateDocument = gql`
    mutation WithdrawalInitiate($input: WithdrawalInitiateInput!) {
  withdrawalInitiate(input: $input) {
    withdrawal {
      ...WithdrawalFields
      account {
        customer {
          id
          depositAccount {
            withdrawals {
              ...WithdrawalFields
            }
            balance {
              settled
              pending
            }
          }
        }
      }
    }
  }
}
    ${WithdrawalFieldsFragmentDoc}`;
export type WithdrawalInitiateMutationFn = Apollo.MutationFunction<WithdrawalInitiateMutation, WithdrawalInitiateMutationVariables>;

/**
 * __useWithdrawalInitiateMutation__
 *
 * To run a mutation, you first call `useWithdrawalInitiateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalInitiateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [withdrawalInitiateMutation, { data, loading, error }] = useWithdrawalInitiateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWithdrawalInitiateMutation(baseOptions?: Apollo.MutationHookOptions<WithdrawalInitiateMutation, WithdrawalInitiateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<WithdrawalInitiateMutation, WithdrawalInitiateMutationVariables>(WithdrawalInitiateDocument, options);
      }
export type WithdrawalInitiateMutationHookResult = ReturnType<typeof useWithdrawalInitiateMutation>;
export type WithdrawalInitiateMutationResult = Apollo.MutationResult<WithdrawalInitiateMutation>;
export type WithdrawalInitiateMutationOptions = Apollo.BaseMutationOptions<WithdrawalInitiateMutation, WithdrawalInitiateMutationVariables>;
export const WithdrawalsDocument = gql`
    query Withdrawals($first: Int!, $after: String) {
  withdrawals(first: $first, after: $after) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    edges {
      cursor
      node {
        ...WithdrawalFields
      }
    }
  }
}
    ${WithdrawalFieldsFragmentDoc}`;

/**
 * __useWithdrawalsQuery__
 *
 * To run a query within a React component, call `useWithdrawalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useWithdrawalsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useWithdrawalsQuery(baseOptions: Apollo.QueryHookOptions<WithdrawalsQuery, WithdrawalsQueryVariables> & ({ variables: WithdrawalsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<WithdrawalsQuery, WithdrawalsQueryVariables>(WithdrawalsDocument, options);
      }
export function useWithdrawalsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WithdrawalsQuery, WithdrawalsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<WithdrawalsQuery, WithdrawalsQueryVariables>(WithdrawalsDocument, options);
        }
export function useWithdrawalsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<WithdrawalsQuery, WithdrawalsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<WithdrawalsQuery, WithdrawalsQueryVariables>(WithdrawalsDocument, options);
        }
export type WithdrawalsQueryHookResult = ReturnType<typeof useWithdrawalsQuery>;
export type WithdrawalsLazyQueryHookResult = ReturnType<typeof useWithdrawalsLazyQuery>;
export type WithdrawalsSuspenseQueryHookResult = ReturnType<typeof useWithdrawalsSuspenseQuery>;
export type WithdrawalsQueryResult = Apollo.QueryResult<WithdrawalsQuery, WithdrawalsQueryVariables>;
export const AvatarDocument = gql`
    query Avatar {
  me {
    user {
      userId
      email
      role {
        roleId
        name
      }
    }
  }
}
    `;

/**
 * __useAvatarQuery__
 *
 * To run a query within a React component, call `useAvatarQuery` and pass it any options that fit your needs.
 * When your component renders, `useAvatarQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAvatarQuery({
 *   variables: {
 *   },
 * });
 */
export function useAvatarQuery(baseOptions?: Apollo.QueryHookOptions<AvatarQuery, AvatarQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AvatarQuery, AvatarQueryVariables>(AvatarDocument, options);
      }
export function useAvatarLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AvatarQuery, AvatarQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AvatarQuery, AvatarQueryVariables>(AvatarDocument, options);
        }
export function useAvatarSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AvatarQuery, AvatarQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AvatarQuery, AvatarQueryVariables>(AvatarDocument, options);
        }
export type AvatarQueryHookResult = ReturnType<typeof useAvatarQuery>;
export type AvatarLazyQueryHookResult = ReturnType<typeof useAvatarLazyQuery>;
export type AvatarSuspenseQueryHookResult = ReturnType<typeof useAvatarSuspenseQuery>;
export type AvatarQueryResult = Apollo.QueryResult<AvatarQuery, AvatarQueryVariables>;
export const GetRealtimePriceUpdatesDocument = gql`
    query GetRealtimePriceUpdates {
  realtimePrice {
    usdCentsPerBtc
  }
}
    `;

/**
 * __useGetRealtimePriceUpdatesQuery__
 *
 * To run a query within a React component, call `useGetRealtimePriceUpdatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRealtimePriceUpdatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRealtimePriceUpdatesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetRealtimePriceUpdatesQuery(baseOptions?: Apollo.QueryHookOptions<GetRealtimePriceUpdatesQuery, GetRealtimePriceUpdatesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetRealtimePriceUpdatesQuery, GetRealtimePriceUpdatesQueryVariables>(GetRealtimePriceUpdatesDocument, options);
      }
export function useGetRealtimePriceUpdatesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRealtimePriceUpdatesQuery, GetRealtimePriceUpdatesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetRealtimePriceUpdatesQuery, GetRealtimePriceUpdatesQueryVariables>(GetRealtimePriceUpdatesDocument, options);
        }
export function useGetRealtimePriceUpdatesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetRealtimePriceUpdatesQuery, GetRealtimePriceUpdatesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetRealtimePriceUpdatesQuery, GetRealtimePriceUpdatesQueryVariables>(GetRealtimePriceUpdatesDocument, options);
        }
export type GetRealtimePriceUpdatesQueryHookResult = ReturnType<typeof useGetRealtimePriceUpdatesQuery>;
export type GetRealtimePriceUpdatesLazyQueryHookResult = ReturnType<typeof useGetRealtimePriceUpdatesLazyQuery>;
export type GetRealtimePriceUpdatesSuspenseQueryHookResult = ReturnType<typeof useGetRealtimePriceUpdatesSuspenseQuery>;
export type GetRealtimePriceUpdatesQueryResult = Apollo.QueryResult<GetRealtimePriceUpdatesQuery, GetRealtimePriceUpdatesQueryVariables>;
export const LoanAgreementGenerateDocument = gql`
    mutation LoanAgreementGenerate($input: LoanAgreementGenerateInput!) {
  loanAgreementGenerate(input: $input) {
    loanAgreement {
      id
      status
      createdAt
    }
  }
}
    `;
export type LoanAgreementGenerateMutationFn = Apollo.MutationFunction<LoanAgreementGenerateMutation, LoanAgreementGenerateMutationVariables>;

/**
 * __useLoanAgreementGenerateMutation__
 *
 * To run a mutation, you first call `useLoanAgreementGenerateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoanAgreementGenerateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loanAgreementGenerateMutation, { data, loading, error }] = useLoanAgreementGenerateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoanAgreementGenerateMutation(baseOptions?: Apollo.MutationHookOptions<LoanAgreementGenerateMutation, LoanAgreementGenerateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoanAgreementGenerateMutation, LoanAgreementGenerateMutationVariables>(LoanAgreementGenerateDocument, options);
      }
export type LoanAgreementGenerateMutationHookResult = ReturnType<typeof useLoanAgreementGenerateMutation>;
export type LoanAgreementGenerateMutationResult = Apollo.MutationResult<LoanAgreementGenerateMutation>;
export type LoanAgreementGenerateMutationOptions = Apollo.BaseMutationOptions<LoanAgreementGenerateMutation, LoanAgreementGenerateMutationVariables>;
export const LoanAgreementDownloadLinkGenerateDocument = gql`
    mutation LoanAgreementDownloadLinkGenerate($input: LoanAgreementDownloadLinksGenerateInput!) {
  loanAgreementDownloadLinkGenerate(input: $input) {
    loanAgreementId
    link
  }
}
    `;
export type LoanAgreementDownloadLinkGenerateMutationFn = Apollo.MutationFunction<LoanAgreementDownloadLinkGenerateMutation, LoanAgreementDownloadLinkGenerateMutationVariables>;

/**
 * __useLoanAgreementDownloadLinkGenerateMutation__
 *
 * To run a mutation, you first call `useLoanAgreementDownloadLinkGenerateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoanAgreementDownloadLinkGenerateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loanAgreementDownloadLinkGenerateMutation, { data, loading, error }] = useLoanAgreementDownloadLinkGenerateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoanAgreementDownloadLinkGenerateMutation(baseOptions?: Apollo.MutationHookOptions<LoanAgreementDownloadLinkGenerateMutation, LoanAgreementDownloadLinkGenerateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoanAgreementDownloadLinkGenerateMutation, LoanAgreementDownloadLinkGenerateMutationVariables>(LoanAgreementDownloadLinkGenerateDocument, options);
      }
export type LoanAgreementDownloadLinkGenerateMutationHookResult = ReturnType<typeof useLoanAgreementDownloadLinkGenerateMutation>;
export type LoanAgreementDownloadLinkGenerateMutationResult = Apollo.MutationResult<LoanAgreementDownloadLinkGenerateMutation>;
export type LoanAgreementDownloadLinkGenerateMutationOptions = Apollo.BaseMutationOptions<LoanAgreementDownloadLinkGenerateMutation, LoanAgreementDownloadLinkGenerateMutationVariables>;
export const LoanAgreementDocument = gql`
    query LoanAgreement($id: UUID!) {
  loanAgreement(id: $id) {
    id
    status
    createdAt
  }
}
    `;

/**
 * __useLoanAgreementQuery__
 *
 * To run a query within a React component, call `useLoanAgreementQuery` and pass it any options that fit your needs.
 * When your component renders, `useLoanAgreementQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLoanAgreementQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useLoanAgreementQuery(baseOptions: Apollo.QueryHookOptions<LoanAgreementQuery, LoanAgreementQueryVariables> & ({ variables: LoanAgreementQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LoanAgreementQuery, LoanAgreementQueryVariables>(LoanAgreementDocument, options);
      }
export function useLoanAgreementLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LoanAgreementQuery, LoanAgreementQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LoanAgreementQuery, LoanAgreementQueryVariables>(LoanAgreementDocument, options);
        }
export function useLoanAgreementSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<LoanAgreementQuery, LoanAgreementQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LoanAgreementQuery, LoanAgreementQueryVariables>(LoanAgreementDocument, options);
        }
export type LoanAgreementQueryHookResult = ReturnType<typeof useLoanAgreementQuery>;
export type LoanAgreementLazyQueryHookResult = ReturnType<typeof useLoanAgreementLazyQuery>;
export type LoanAgreementSuspenseQueryHookResult = ReturnType<typeof useLoanAgreementSuspenseQuery>;
export type LoanAgreementQueryResult = Apollo.QueryResult<LoanAgreementQuery, LoanAgreementQueryVariables>;
export const SearchPublicIdTargetDocument = gql`
    query SearchPublicIdTarget($publicId: PublicId!) {
  publicIdTarget(id: $publicId) {
    __typename
    ... on Customer {
      id
      customerId
      publicId
      email
    }
    ... on DepositAccount {
      id
      customer {
        id
        customerId
        publicId
        email
      }
    }
    ... on CreditFacility {
      id
      publicId
      facilityAmount
    }
    ... on CreditFacilityDisbursal {
      id
      amount
      publicId
    }
    ... on Deposit {
      id
      amount
      publicId
      depositId
    }
    ... on Withdrawal {
      id
      amount
      publicId
      withdrawalId
    }
  }
}
    `;

/**
 * __useSearchPublicIdTargetQuery__
 *
 * To run a query within a React component, call `useSearchPublicIdTargetQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchPublicIdTargetQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchPublicIdTargetQuery({
 *   variables: {
 *      publicId: // value for 'publicId'
 *   },
 * });
 */
export function useSearchPublicIdTargetQuery(baseOptions: Apollo.QueryHookOptions<SearchPublicIdTargetQuery, SearchPublicIdTargetQueryVariables> & ({ variables: SearchPublicIdTargetQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<SearchPublicIdTargetQuery, SearchPublicIdTargetQueryVariables>(SearchPublicIdTargetDocument, options);
      }
export function useSearchPublicIdTargetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchPublicIdTargetQuery, SearchPublicIdTargetQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<SearchPublicIdTargetQuery, SearchPublicIdTargetQueryVariables>(SearchPublicIdTargetDocument, options);
        }
export function useSearchPublicIdTargetSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<SearchPublicIdTargetQuery, SearchPublicIdTargetQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<SearchPublicIdTargetQuery, SearchPublicIdTargetQueryVariables>(SearchPublicIdTargetDocument, options);
        }
export type SearchPublicIdTargetQueryHookResult = ReturnType<typeof useSearchPublicIdTargetQuery>;
export type SearchPublicIdTargetLazyQueryHookResult = ReturnType<typeof useSearchPublicIdTargetLazyQuery>;
export type SearchPublicIdTargetSuspenseQueryHookResult = ReturnType<typeof useSearchPublicIdTargetSuspenseQuery>;
export type SearchPublicIdTargetQueryResult = Apollo.QueryResult<SearchPublicIdTargetQuery, SearchPublicIdTargetQueryVariables>;
export const GetCreditFacilityPublicIdDocument = gql`
    query GetCreditFacilityPublicId($id: UUID!) {
  creditFacility(id: $id) {
    publicId
  }
}
    `;

/**
 * __useGetCreditFacilityPublicIdQuery__
 *
 * To run a query within a React component, call `useGetCreditFacilityPublicIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCreditFacilityPublicIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCreditFacilityPublicIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCreditFacilityPublicIdQuery(baseOptions: Apollo.QueryHookOptions<GetCreditFacilityPublicIdQuery, GetCreditFacilityPublicIdQueryVariables> & ({ variables: GetCreditFacilityPublicIdQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCreditFacilityPublicIdQuery, GetCreditFacilityPublicIdQueryVariables>(GetCreditFacilityPublicIdDocument, options);
      }
export function useGetCreditFacilityPublicIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCreditFacilityPublicIdQuery, GetCreditFacilityPublicIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCreditFacilityPublicIdQuery, GetCreditFacilityPublicIdQueryVariables>(GetCreditFacilityPublicIdDocument, options);
        }
export function useGetCreditFacilityPublicIdSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCreditFacilityPublicIdQuery, GetCreditFacilityPublicIdQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetCreditFacilityPublicIdQuery, GetCreditFacilityPublicIdQueryVariables>(GetCreditFacilityPublicIdDocument, options);
        }
export type GetCreditFacilityPublicIdQueryHookResult = ReturnType<typeof useGetCreditFacilityPublicIdQuery>;
export type GetCreditFacilityPublicIdLazyQueryHookResult = ReturnType<typeof useGetCreditFacilityPublicIdLazyQuery>;
export type GetCreditFacilityPublicIdSuspenseQueryHookResult = ReturnType<typeof useGetCreditFacilityPublicIdSuspenseQuery>;
export type GetCreditFacilityPublicIdQueryResult = Apollo.QueryResult<GetCreditFacilityPublicIdQuery, GetCreditFacilityPublicIdQueryVariables>;