scalar AnnualRatePct

scalar CVLPct

type CancelledWithdrawalEntry {
	recordedAt: Timestamp!
	withdrawal: Withdrawal!
}

type Collateral {
	btcBalance: Satoshis!
}

enum CollateralAction {
	ADD
	REMOVE
}

enum CollateralizationState {
	FULLY_COLLATERALIZED
	UNDER_MARGIN_CALL_THRESHOLD
	UNDER_LIQUIDATION_THRESHOLD
	NO_COLLATERAL
	NO_EXPOSURE
}

type CreditFacility {
	id: ID!
	creditFacilityId: UUID!
	facilityAmount: UsdCents!
	collateralizationState: CollateralizationState!
	status: CreditFacilityStatus!
	activatedAt: Timestamp!
	maturesAt: Timestamp!
	creditFacilityTerms: TermValues!
	balance: CreditFacilityBalance!
	currentCvl: CVLPct!
	history: [CreditFacilityHistoryEntry!]!
	disbursals: [CreditFacilityDisbursal!]!
	repaymentPlan: [CreditFacilityRepaymentPlanEntry!]!
}

type CreditFacilityApproved {
	cents: UsdCents!
	recordedAt: Timestamp!
	effective: Date!
	txId: UUID!
}

type CreditFacilityBalance {
	facilityRemaining: FacilityRemaining!
	disbursed: Disbursed!
	interest: Interest!
	outstanding: Outstanding!
	dueOutstanding: Outstanding!
	collateral: Collateral!
}

type CreditFacilityCollateralUpdated {
	satoshis: Satoshis!
	recordedAt: Timestamp!
	effective: Date!
	action: CollateralAction!
	txId: UUID!
}

type CreditFacilityCollateralizationUpdated {
	state: CollateralizationState!
	collateral: Satoshis!
	outstandingInterest: UsdCents!
	outstandingDisbursal: UsdCents!
	recordedAt: Timestamp!
	effective: Date!
	price: UsdCents!
}

type CreditFacilityDisbursal {
	id: ID!
	disbursalId: UUID!
	amount: UsdCents!
	createdAt: Timestamp!
	status: DisbursalStatus!
}

type CreditFacilityDisbursalExecuted {
	cents: UsdCents!
	recordedAt: Timestamp!
	effective: Date!
	txId: UUID!
}

union CreditFacilityHistoryEntry = CreditFacilityIncrementalPayment | CreditFacilityCollateralUpdated | CreditFacilityApproved | CreditFacilityCollateralizationUpdated | CreditFacilityDisbursalExecuted | CreditFacilityInterestAccrued | CreditFacilityLiquidationAmountReserved

type CreditFacilityIncrementalPayment {
	cents: UsdCents!
	recordedAt: Timestamp!
	effective: Date!
	txId: UUID!
}

type CreditFacilityInterestAccrued {
	cents: UsdCents!
	recordedAt: Timestamp!
	effective: Date!
	txId: UUID!
	days: Int!
}

type CreditFacilityLiquidationAmountReserved {
	cents: UsdCents!
	recordedAt: Timestamp!
	effective: Date!
	txId: UUID!
}

type CreditFacilityPaymentAllocation {
	id: ID!
	paymentAllocationId: UUID!
	amount: UsdCents!
	createdAt: Timestamp!
	creditFacility: CreditFacility!
}

type CreditFacilityRepaymentPlanEntry {
	repaymentType: CreditFacilityRepaymentType!
	status: CreditFacilityRepaymentStatus!
	initial: UsdCents!
	outstanding: UsdCents!
	accrualAt: Timestamp!
	dueAt: Timestamp!
}

enum CreditFacilityRepaymentStatus {
	UPCOMING
	NOT_YET_DUE
	DUE
	OVERDUE
	DEFAULTED
	PAID
}

enum CreditFacilityRepaymentType {
	DISBURSAL
	INTEREST
}

enum CreditFacilityStatus {
	ACTIVE
	MATURED
	CLOSED
}

type Customer {
	id: ID!
	customerId: UUID!
	customerType: CustomerType!
	kycVerification: KycVerification!
	level: KycLevel!
	createdAt: Timestamp!
	email: String!
	telegramId: String!
	depositAccount: DepositAccount!
	creditFacilities: [CreditFacility!]!
}

enum CustomerType {
	INDIVIDUAL
	GOVERNMENT_ENTITY
	PRIVATE_COMPANY
	BANK
	FINANCIAL_INSTITUTION
	FOREIGN_AGENCY_OR_SUBSIDIARY
	NON_DOMICILED_COMPANY
}

scalar Date

type Deposit {
	id: ID!
	depositId: UUID!
	accountId: UUID!
	amount: UsdCents!
	createdAt: Timestamp!
	reference: String!
	status: DepositStatus!
}

type DepositAccount {
	id: ID!
	depositAccountId: UUID!
	customerId: UUID!
	createdAt: Timestamp!
	balance: DepositAccountBalance!
	deposits: [Deposit!]!
	withdrawals: [Withdrawal!]!
	history(first: Int!, after: String): DepositAccountHistoryEntryConnection!
}

type DepositAccountBalance {
	settled: UsdCents!
	pending: UsdCents!
}

union DepositAccountHistoryEntry = DepositEntry | WithdrawalEntry | CancelledWithdrawalEntry | DisbursalEntry | PaymentEntry | UnknownEntry

type DepositAccountHistoryEntryConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [DepositAccountHistoryEntryEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [DepositAccountHistoryEntry!]!
}

"""
An edge in a connection.
"""
type DepositAccountHistoryEntryEdge {
	"""
	The item at the end of the edge
	"""
	node: DepositAccountHistoryEntry!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type DepositEntry {
	recordedAt: Timestamp!
	deposit: Deposit!
}

enum DepositStatus {
	CONFIRMED
	REVERTED
}

type DisbursalEntry {
	recordedAt: Timestamp!
	disbursal: CreditFacilityDisbursal!
}

enum DisbursalStatus {
	NEW
	APPROVED
	DENIED
	CONFIRMED
}

type Disbursed {
	total: Total!
	outstanding: Outstanding!
	dueOutstanding: Outstanding!
}

type Duration {
	period: Period!
	units: Int!
}

type FacilityRemaining {
	usdBalance: UsdCents!
}

type Interest {
	total: Total!
	outstanding: Outstanding!
	dueOutstanding: Outstanding!
}

enum InterestInterval {
	END_OF_MONTH
	END_OF_DAY
}

enum KycLevel {
	NOT_KYCED
	BASIC
	ADVANCED
}

enum KycVerification {
	PENDING_VERIFICATION
	VERIFIED
	REJECTED
}

type Me {
	customer: Customer!
}

scalar OneTimeFeeRatePct

type Outstanding {
	usdBalance: UsdCents!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type PaymentEntry {
	recordedAt: Timestamp!
	payment: CreditFacilityPaymentAllocation!
}

enum Period {
	MONTHS
}

type Query {
	me: Me!
	creditFacility(id: UUID!): CreditFacility
	realtimePrice: RealtimePrice!
}

type RealtimePrice {
	usdCentsPerBtc: UsdCents!
}

scalar Satoshis

type TermValues {
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	accrualCycleInterval: InterestInterval!
	oneTimeFeeRate: OneTimeFeeRatePct!
	duration: Duration!
        liquidationCvl: CVLPct!
        marginCallCvl: CVLPct!
        initialCvl: CVLPct!
        disburseFullAmountOnActivation: Boolean!
}

scalar Timestamp

type Total {
	usdBalance: UsdCents!
}

scalar UUID

type UnknownEntry {
	txId: UUID!
	recordedAt: Timestamp!
}

scalar UsdCents

type Withdrawal {
	id: ID!
	withdrawalId: UUID!
	accountId: UUID!
	amount: UsdCents!
	createdAt: Timestamp!
	reference: String!
	status: WithdrawalStatus!
}

type WithdrawalEntry {
	recordedAt: Timestamp!
	withdrawal: Withdrawal!
}

enum WithdrawalStatus {
	PENDING_APPROVAL
	PENDING_CONFIRMATION
	CONFIRMED
	DENIED
	CANCELLED
	REVERTED
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
}
